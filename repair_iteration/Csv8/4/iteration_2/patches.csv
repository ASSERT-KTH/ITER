bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(list.size()  ==  set.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(list.size()  ==  set.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(list.size()  ==  set.length)  {	  if    (header.size()    ==    set.length)    {    	non-compiled	[CE]  	17	None	replace
2	[BUG]  [BUGGY]  if(!set.size()  ==  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(!set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(!set.size()  ==  header.length)  {	  if    (header.size()    ==    set.length)    {    	non-compiled	[CE]  	17	None	replace
3	[BUG]  [BUGGY]  if(header.size()  >  set.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  >  set.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  >  set.length)  {	  if(header.size()    >=    set.length)    {    	non-compiled	[CE]  	21	None	replace
4	[BUG]  [BUGGY]  if(list.size()  >=  set.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(list.size()  >=  set.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(list.size()  >=  set.length)  {	  if(header.size()    >=    set.length)    {    	non-compiled	[CE]  	21	None	replace
5	[BUG]  [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
6	[BUG]  [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
7	[BUG]  [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString()  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString()  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString()	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
8	[BUG]  [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.as  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.as  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.as	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
9	[BUG]  [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
10	[BUG]  [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.a  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.a  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.a	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
11	[BUG]  [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	||  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
12	[BUG]  [BUGGY]  if(set.size()  ==  header.length  +  1)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  +  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  +  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  if(set.size()  ==  header.length  -  2)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  -  2)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  -  2)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  if(set.size()!=  header.length  -  1)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  if(header.size()  ==  set.length  -  1)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  set.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  set.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  if(s.size()  ==  header.length  -  1)  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(s.size()  ==  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(s.size()  ==  header.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
17	[BUG]  [BUGGY]  ArrayList  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ArrayList  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	ArrayList  <  String>  set  =  Sets.newHashSet();	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  List  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  List  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	List  <  String>  set  =  Sets.newHashSet();	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  Collection  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Collection  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Collection  <  String>  set  =  Sets.newHashSet();	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header.length);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header.length);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  Sets.newHashSet(header.length);	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.size()  >  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.size()  >  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.size()  >  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    >    header.length)    {    	non-compiled	[CE]  	23	None	replace
22	[BUG]  [BUGGY]  if(set.size()  <  header.length  ||  set.size()  >  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  header.length  ||  set.size()  >  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  header.length  ||  set.size()  >  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    >    header.length)    {    	non-compiled	[CE]  	23	None	replace
23	[BUG]  [BUGGY]  if(set.size()  >=  header.length  ||  set.size()  >  header.length)  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >=  header.length  ||  set.size()  >  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  header.length  ||  set.size()  >  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    >    header.length)    {    	non-compiled	[CE]  	23	None	replace
24	[BUG]  [BUGGY]  if(header.size()  ==  set.length  ||  set.size()  >  header.length)  {  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  set.length  ||  set.size()  >  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  set.length  ||  set.size()  >  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    >    header.length)    {    	non-compiled	[CE]  	23	None	replace
25	[BUG]  [BUGGY]  if(set.size()!=  header.length  ||  set.size()  >  header.length)  {  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  ||  set.size()  >  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  ||  set.size()  >  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    >    header.length)    {    	non-compiled	[CE]  	23	None	replace
26	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  <  header.length)  {  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  <  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.size()  <  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    >    header.length)    {    	non-compiled	[CE]  	23	None	replace
27	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  -  1]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  1]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]  +  1);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]  +  1);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]  +  1);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  2]);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  2]);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  2]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  if(set.size()  ==  header.length  &&  set.size()!=  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  &&  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  &&  set.size()!=  header.length)  {	  if(set.size()!=    header.length    &&    set.size()!=    header.length)    {    	non-compiled	[CE]  	4	None	replace
33	[BUG]  [BUGGY]  if(set.size()!=  header.length  &&  set.size()  ==  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  &&  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  &&  set.size()  ==  header.length)  {	  if(set.size()!=    header.length    &&    set.size()!=    header.length)    {    	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  if(set.size()!=  header.length  &&  set.size()  >=  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  &&  set.size()  >=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  &&  set.size()  >=  header.length)  {	  if(set.size()!=    header.length    &&    set.size()!=    header.length)    {    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  if(set.size()  ==  header.length  &&  set.size()  >=  header.length)  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  &&  set.size()  >=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  &&  set.size()  >=  header.length)  {	  if(set.size()!=    header.length    &&    set.size()!=    header.length)    {    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  if(set.size()  >=  header.length  &&  set.size()!=  header.length)  {  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >=  header.length  &&  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  header.length  &&  set.size()!=  header.length)  {	  if(set.size()!=    header.length    &&    set.size()!=    header.length)    {    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
38	[BUG]  [BUGGY]  if(c!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(c!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(c!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
39	[BUG]  [BUGGY]  if(c  ==  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(c  ==  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(c  ==  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
40	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  set.addAll(Arrays.asList(header));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
41	[BUG]  [BUGGY]  Set  <  String>  set  =  set.toArray(new  Set  <  String>(set.size()  ]);  set.addAll(Arrays.asList(header));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  set.toArray(new  Set  <  String>(set.size()  ]);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  set.toArray(new  Set  <  String>(set.size()  ]);  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
42	[BUG]  [BUGGY]  if(set.size()  ==  header.length  &&  set.size()  ==  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  &&  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  &&  set.size()  ==  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  if(header.size()  ==  set.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  set.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  set.length  ||  set.size()  ==  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  if(header.length  ==  set.size()  ||  set.size()  ==  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length  ==  set.size()  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length  ==  set.size()  ||  set.size()  ==  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  >=  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  >=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.size()  >=  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
46	[BUG]  [BUGGY]  if(s.size()!=  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(s.size()!=  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(s.size()!=  header.length  ||  set.size()  ==  header.length)  {	  if(s.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	31	None	replace
47	[BUG]  [BUGGY]  if(s.size()  ==  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(s.size()  ==  header.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(s.size()  ==  header.length  ||  set.size()!=  header.length)  {	  if(s.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	31	None	replace
48	[BUG]  [BUGGY]  if(s.size()!=  header.length  &&  set.size()!=  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(s.size()!=  header.length  &&  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(s.size()!=  header.length  &&  set.size()!=  header.length)  {	  if(s.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	31	None	replace
49	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.size()!=  header.length)  {	  if(set.size()    >=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	30	None	replace
50	[BUG]  [BUGGY]  if(header.size()  ==  set.length  ||  set.size()!=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  set.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  set.length  ||  set.size()!=  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  if(header.length  ==  set.size()  ||  set.size()!=  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length  ==  set.size()  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length  ==  set.size()  ||  set.size()!=  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  List  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
53	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  ArrayList  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
54	[BUG]  [BUGGY]  final  HashSet  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  HashSet  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  HashSet  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
55	[BUG]  [BUGGY]  final  TreeSet  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  TreeSet  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  TreeSet  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
56	[BUG]  [BUGGY]  final  Collection  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Collection  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Collection  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
57	[BUG]  [BUGGY]  if(set.size()!=  list.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  list.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  list.length)  {	  if    (list.size()!=    set.length)    {    	non-compiled	[CE]  	18	None	replace
58	[BUG]  [BUGGY]  if(set.size()!=  set.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  set.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  set.length)  {	  if    (list.size()!=    set.length)    {    	non-compiled	[CE]  	18	None	replace
59	[BUG]  [BUGGY]  if(set.size()  >=  list.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >=  list.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  list.length)  {	  if    (list.size()!=    set.length)    {    	non-compiled	[CE]  	18	None	replace
60	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
61	[BUG]  [BUGGY]  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
62	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
63	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
64	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
65	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
66	[BUG]  [BUGGY]  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
67	[BUG]  [BUGGY]  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
68	[BUG]  [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  set.addAll(Arrays.asList(header));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  new  HashSet  <  String>(set.size());  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
69	[BUG]  [BUGGY]  final  String[]  header  =  new  String[set.size()  +  1];  set.addAll(Arrays.asList(header));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  new  String[set.size()  +  1];  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  new  String[set.size()  +  1];  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
70	[BUG]  [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(set.size()  ];  set.addAll(Arrays.asList(header));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(set.size()  ];  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  new  HashSet  <  String>(set.size()  ];  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
71	[BUG]  [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(set));  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(set));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(set));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
72	[BUG]  [BUGGY]  if(set.size()  ==  commentStart.length  -  1)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  commentStart.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  commentStart.length  -  1)  {	  if(set.size()    ==    commentStart.length)    {    	non-compiled	[CE]  	15	None	replace
73	[BUG]  [BUGGY]  if(set.size()  ==  commentStart.length  ||  set.size()  ==  commentStart.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  commentStart.length  ||  set.size()  ==  commentStart.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  commentStart.length  ||  set.size()  ==  commentStart.length)  {	  if(set.size()    ==    commentStart.length)    {    	non-compiled	[CE]  	15	None	replace
74	[BUG]  [BUGGY]  if(set.size()  >  commentStart.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  commentStart.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  commentStart.length)  {	  if(set.size()    ==    commentStart.length)    {    	non-compiled	[CE]  	15	None	replace
75	[BUG]  [BUGGY]  if(set.size()  ==  commentStart.length  +  1)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  commentStart.length  +  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  commentStart.length  +  1)  {	  if(set.size()    ==    commentStart.length)    {    	non-compiled	[CE]  	15	None	replace
76	[BUG]  [BUGGY]  if(set.size()  <  commentStart.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  commentStart.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  commentStart.length)  {	  if(set.size()    ==    commentStart.length)    {    	non-compiled	[CE]  	15	None	replace
77	[BUG]  [BUGGY]  if(set.size()  ==  header.length  &&  set.contains(header.length))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  &&  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  &&  set.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
78	[BUG]  [BUGGY]  if(header.size()  ==  set.length  ||  set.contains(header.length))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  set.length  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  set.length  ||  set.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
79	[BUG]  [BUGGY]  if(set.size()!=  header.length  ||  set.contains(header.length))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  ||  set.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
80	[BUG]  [BUGGY]  if(header.length  ==  set.size()  ||  set.contains(header.length))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length  ==  set.size()  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length  ==  set.size()  ||  set.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
81	[BUG]  [BUGGY]  if(s.size()  ==  header.length  ||  set.contains(header.length))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(s.size()  ==  header.length  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(s.size()  ==  header.length  ||  set.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
82	[BUG]  [BUGGY]  if(set.size()  ==  header.length  +  1  ||  set.contains(header.length))  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  +  1  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  +  1  ||  set.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
83	[BUG]  [BUGGY]  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
84	[BUG]  [BUGGY]  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
85	[BUG]  [BUGGY]  final  Character[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Character[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Character[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
86	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
87	[BUG]  [BUGGY]  final  Character[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Character[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Character[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
88	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(escape));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(escape));	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	11	None	replace
89	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(commentStart));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(commentStart));	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	11	None	replace
90	[BUG]  [BUGGY]  set.add(Arrays.asList(offset));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.add(Arrays.asList(offset));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.add(Arrays.asList(offset));	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	11	None	replace
91	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(escapeChar));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(escapeChar));	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	11	None	replace
92	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(header.length));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(header.length));	  set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	8	None	replace
93	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(delimiter));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(delimiter));	  set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	8	None	replace
94	[BUG]  [BUGGY]  if(set.size()  <  =  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  =  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  =  header.length)  {	  if(set.size()    <    header.length)    {    	non-compiled	[CE]  	38	None	replace
95	[BUG]  [BUGGY]  if(set.size()  <  header.length  ||  set.size()  <  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  header.length  ||  set.size()  <  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  header.length  ||  set.size()  <  header.length)  {	  if(set.size()    <    header.length)    {    	non-compiled	[CE]  	38	None	replace
96	[BUG]  [BUGGY]  if  (!set.size()  >  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if  (!set.size()  >  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (!set.size()  >  header.length)  {	  if    (!set.size()!=    header.length)    {    	non-compiled	[CE]  	19	None	replace
97	[BUG]  [BUGGY]  if  (!set.size()  >=  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if  (!set.size()  >=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (!set.size()  >=  header.length)  {	  if    (!set.size()!=    header.length)    {    	non-compiled	[CE]  	19	None	replace
98	[BUG]  [BUGGY]  set.addAll(Arrays.asList(char));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(char));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(char));	  set.addAll(Arrays.asList(c));    	non-compiled	[CE]  	12	None	replace
99	[BUG]  [BUGGY]  set.add(Arrays.asList(c));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.add(Arrays.asList(c));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.add(Arrays.asList(c));	  set.addAll(Arrays.asList(c));    	non-compiled	[CE]  	12	None	replace
100	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(set);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(set);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  Arrays.asList(set);	  set.addAll(Arrays.asList(set));    	non-compiled	[CE]  	10	None	replace
101	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);	  set.addAll(Arrays.asList(set));    	non-compiled	[CE]  	10	None	replace
102	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
103	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
104	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
105	[BUG]  [BUGGY]  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
106	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
107	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
108	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
109	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
110	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
111	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
112	[BUG]  [BUGGY]  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Character[]  header  =  set.toArray(new  Character[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
113	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
114	[BUG]  [BUGGY]  if(header.size()!=  set.length  &&  set.size()!=  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()!=  set.length  &&  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  set.length  &&  set.size()!=  header.length)  {	  if(header.size()!=    set.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	5	None	replace
115	[BUG]  [BUGGY]  if(set.size()  >=  header.length  ||  set.size()  <  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >=  header.length  ||  set.size()  <  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  header.length  ||  set.size()  <  header.length)  {	  if(set.size()!=    header.length    ||    set.size()    <    header.length)    {    	non-compiled	[CE]  	39	None	replace
116	[BUG]  [BUGGY]  if(set.size()!=  header.length  ||  set.size()  <  =  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  ||  set.size()  <  =  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  ||  set.size()  <  =  header.length)  {	  if(set.size()!=    header.length    ||    set.size()    <    header.length)    {    	non-compiled	[CE]  	39	None	replace
117	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  <  =  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  <  =  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.size()  <  =  header.length)  {	  if(set.size()!=    header.length    ||    set.size()    <    header.length)    {    	non-compiled	[CE]  	39	None	replace
118	[BUG]  [BUGGY]  if(header.size()!=  set.length  ||  set.size()  <  header.length)  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()!=  set.length  ||  set.size()  <  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  set.length  ||  set.size()  <  header.length)  {	  if(set.size()!=    header.length    ||    set.size()    <    header.length)    {    	non-compiled	[CE]  	39	None	replace
119	[BUG]  [BUGGY]  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	33	None	replace
120	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header.length));  }  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header.length));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header.length));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	33	None	replace
121	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toLowerCase();  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toLowerCase();  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  set.toLowerCase();  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	33	None	replace
122	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotedChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotedChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quotedChar.toLowerCase();  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	33	None	replace
123	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);  set.addAll(Arrays.asList(header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
124	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
125	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  set.addAll(Arrays.asList(header));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
126	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
127	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
128	[BUG]  [BUGGY]  if(set.size()!=  header.length  ||  header.size()!=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  ||  header.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  ||  header.size()!=  header.length)  {	  if(header.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	20	None	replace
129	[BUG]  [BUGGY]  if(header.size()  ==  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  header.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  header.length  ||  set.size()!=  header.length)  {	  if(header.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	20	None	replace
130	[BUG]  [BUGGY]  if(header.size()!=  header.length  &&  set.size()!=  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()!=  header.length  &&  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  header.length  &&  set.size()!=  header.length)  {	  if(header.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	20	None	replace
131	[BUG]  [BUGGY]  if(header.size()  ==  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  header.length  ||  set.size()  ==  header.length)  {	  if(header.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	20	None	replace
132	[BUG]  [BUGGY]  if(header.size()  ==  header.length  &&  set.size()!=  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  header.length  &&  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  header.length  &&  set.size()!=  header.length)  {	  if(header.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	20	None	replace
133	[BUG]  [BUGGY]  if(set.size()  >  header.length  -  1)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  -  1)  {	  if    (set.size()    >    header.length)    {    	non-compiled	[CE]  	1	None	replace
134	[BUG]  [BUGGY]  if  (set.size()  >  header.length  ||  set.isEmptyLines())  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if  (set.size()  >  header.length  ||  set.isEmptyLines())  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (set.size()  >  header.length  ||  set.isEmptyLines())  {	  if    (set.size()    >    header.length)    {    	non-compiled	[CE]  	1	None	replace
135	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.size()  ==  header.length)  {	  if(set.size()    >=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	40	None	replace
136	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  }	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
137	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
138	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header)  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header)  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header)	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
139	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(head  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(head  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(head	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
140	[BUG]  [BUGGY]  if(set.size()!=  header.length  ||  header.size()  ==  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  header.length  ||  header.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  ||  header.size()  ==  header.length)  {	  if    (header.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	22	None	replace
141	[BUG]  [BUGGY]  if  (header.length()!=  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if  (header.length()!=  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (header.length()!=  header.length  ||  set.size()  ==  header.length)  {	  if    (header.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	22	None	replace
142	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
143	[BUG]  [BUGGY]  final  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  set.addAll(Arrays.asList(header));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
144	[BUG]  [BUGGY]  final  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Character[]  header  =  set.toArray(new  Character[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
145	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
146	[BUG]  [BUGGY]  if(header.size()  ==  header.length  ||  set.size()  >  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  ==  header.length  ||  set.size()  >  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  ==  header.length  ||  set.size()  >  header.length)  {	  if(set.size()    ==    header.length    ||    set.size()    >    header.length)    {    	non-compiled	[CE]  	23	None	replace
147	[BUG]  [BUGGY]  set.add(Arrays.asList(escape));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.add(Arrays.asList(escape));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.add(Arrays.asList(escape));	  set.addAll(Arrays.asList(set));    	non-compiled	[CE]  	10	None	replace
148	[BUG]  [BUGGY]  set.add(Arrays.asList(header));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.add(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.add(Arrays.asList(header));	  set.addAll(Arrays.asList(set));    	non-compiled	[CE]  	10	None	replace
149	[BUG]  [BUGGY]  Set  <  String>  set  =  Arrays.asList(set);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  Arrays.asList(set);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  Arrays.asList(set);	  set.addAll(Arrays.asList(set));    	non-compiled	[CE]  	10	None	replace
150	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header  }  ));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(new  String[]  {  header  }  ));	  set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	8	None	replace
151	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  commentStart));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(header,  commentStart));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(header,  commentStart));	  set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	8	None	replace
152	[BUG]  [BUGGY]  if(escape  ==  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape  ==  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape  ==  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
153	[BUG]  [BUGGY]  if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
154	[BUG]  [BUGGY]  if(escape  ==  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape  ==  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape  ==  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
155	[BUG]  [BUGGY]  if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
156	[BUG]  [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
157	[BUG]  [BUGGY]  java.lang.Exception:  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
158	[BUG]  [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]));  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]));  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  set.toArray(new  String[set.size()  ]));  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
159	[BUG]  [BUGGY]  if(!set.isEmpty()  &&  set.size()  ==  header.length  -  1)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(!set.isEmpty()  &&  set.size()  ==  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(!set.isEmpty()  &&  set.size()  ==  header.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
160	[BUG]  [BUGGY]  if(escape.size()  ==  header.length  -  1)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape.size()  ==  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape.size()  ==  header.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
161	[BUG]  [BUGGY]  if(header.size()  <  set.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  <  set.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  <  set.length)  {	  if(set.size()    <    header.length)    {    	non-compiled	[CE]  	38	None	replace
162	[BUG]  [BUGGY]  if(set.size()  <  header.length  ||  set.contains(header.length))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  header.length  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  header.length  ||  set.contains(header.length))  {	  if(set.size()    <    header.length)    {    	non-compiled	[CE]  	38	None	replace
163	[BUG]  [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	&&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
164	[BUG]  [BUGGY]  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList(  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList(	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
165	[BUG]  [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	&&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
166	[BUG]  [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString()  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString()  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	&&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString()	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
167	[BUG]  [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	&&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
168	[BUG]  [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.as  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  &&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.as  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	&&  quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.as	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
169	[BUG]  [BUGGY]  &&  set!=  null)  {  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  &&  set!=  null)  {  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	&&  set!=  null)  {  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
170	[BUG]  [BUGGY]  if(set.size()!=  commentStart.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()!=  commentStart.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  commentStart.length)  {	  if(set.size()    ==    commentStart.length)    {    	non-compiled	[CE]  	15	None	replace
171	[BUG]  [BUGGY]  if(set.size()  >=  commentStart.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >=  commentStart.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  commentStart.length)  {	  if(set.size()    ==    commentStart.length)    {    	non-compiled	[CE]  	15	None	replace
172	[BUG]  [BUGGY]  if(header.size()  >=  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  >=  header.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  >=  header.length  ||  set.size()!=  header.length)  {	  if(set.size()    >=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	30	None	replace
173	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotedChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotedChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quotedChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
174	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotes.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotes.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quotes.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
175	[BUG]  [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
176	[BUG]  [BUGGY]  String[]  header  =  new  String[set.size()  ];  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  new  String[set.size()  ];  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  new  String[set.size()  ];  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
177	[BUG]  [BUGGY]  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  set.addAll(Arrays.asList(header));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
178	[BUG]  [BUGGY]  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  set.addAll(Arrays.asList(set));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  set.addAll(Arrays.asList(set));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  set.addAll(Arrays.asList(set));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
179	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
180	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
181	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header)  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header)  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header)	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
182	[BUG]  [BUGGY]  if(header.length!=  set.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length!=  set.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length!=  set.length  ||  set.size()  ==  header.length)  {	  if    (header.size()!=    set.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	14	None	replace
183	[BUG]  [BUGGY]  if(set.size()  >=  header.length  ||  set.contains(header.length))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >=  header.length  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  header.length  ||  set.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
184	[BUG]  [BUGGY]  if(set.size()  ==  header.length  +  Arrays.contains(header.length))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  +  Arrays.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  +  Arrays.contains(header.length))  {	  if(set.size()    ==    header.length    ||    set.contains(header.length))    {    	non-compiled	[CE]  	29	None	replace
185	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header.length);	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
186	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header);	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
187	[BUG]  [BUGGY]  final  List  <  String>  set  =  Sets.newHashList();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  List  <  String>  set  =  Sets.newHashList();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  List  <  String>  set  =  Sets.newHashList();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
188	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.contains(header.length))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.contains(header.length))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.contains(header.length))  {	  if    (set.size()    >    header.length)    {    	non-compiled	[CE]  	1	None	replace
189	[BUG]  [BUGGY]  if(header.length!=  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length!=  header.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length!=  header.length  ||  set.size()!=  header.length)  {	  if(s.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	31	None	replace
190	[BUG]  [BUGGY]  if(header.length!=  s.length  ||  set.size()!=  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length!=  s.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length!=  s.length  ||  set.size()!=  header.length)  {	  if(s.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	31	None	replace
191	[BUG]  [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
192	[BUG]  [BUGGY]  if(header.size()!=  header.length  ||  set.size()  >=  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()!=  header.length  ||  set.size()  >=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  header.length  ||  set.size()  >=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()    >=    header.length)    {    	non-compiled	[CE]  	6	None	replace
193	[BUG]  [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
194	[BUG]  [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
195	[BUG]  [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
196	[BUG]  [BUGGY]  java.lang.Exception:  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
197	[BUG]  [BUGGY]  if(header!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
198	[BUG]  [BUGGY]  if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape!=  null  &&  quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
199	[BUG]  [BUGGY]  Set  <  String>  set  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
200	[BUG]  [BUGGY]  set.addAll(Arrays.asList(length));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  set.addAll(Arrays.asList(length));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(length));	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	11	None	replace
201	[BUG]  [BUGGY]  Set  <  String>  set  =  Arrays.asList(offset);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  Arrays.asList(offset);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  Arrays.asList(offset);	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	11	None	replace
202	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  Sets.newHashSet(header);	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	9	None	replace
203	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  Sets.newHashSet(set);	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	9	None	replace
204	[BUG]  [BUGGY]  if(header.length!=  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length!=  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length!=  header.length  ||  set.size()  ==  header.length)  {	  if    (header.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	22	None	replace
205	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotes.toLowerCase();  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quotes.toLowerCase();  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quotes.toLowerCase();  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	33	None	replace
206	[BUG]  [BUGGY]  if(header.size()!=  header.length  ||  set.size()  <  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()!=  header.length  ||  set.size()  <  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  header.length  ||  set.size()  <  header.length)  {	  if(set.size()!=    header.length    ||    set.size()    <    header.length)    {    	non-compiled	[CE]  	39	None	replace
207	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.length()  ]);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.length()  ]);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.length()  ]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	7	None	replace
208	[BUG]  [BUGGY]  if(header.length!=  set.length  ||  set.size()!=  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.length!=  set.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.length!=  set.length  ||  set.size()!=  header.length)  {	  if(header.size()!=    set.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	5	None	replace
209	[BUG]  [BUGGY]  if(header.size()!=  set.length  ||  set.size()  >=  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()!=  set.length  ||  set.size()  >=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  set.length  ||  set.size()  >=  header.length)  {	  if(header.size()!=    set.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	5	None	replace
210	[BUG]  [BUGGY]  if(header.size()  >=  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  >=  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  >=  header.length  ||  set.size()  ==  header.length)  {	  if(set.size()    >=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	40	None	replace
211	[BUG]  [BUGGY]  if(header.size()  >=  set.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()  >=  set.length  ||  set.size()  ==  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  >=  set.length  ||  set.size()  ==  header.length)  {	  if(set.size()    >=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	40	None	replace
212	[BUG]  [BUGGY]  if(header!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
213	[BUG]  [BUGGY]  if(set!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
214	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  +  1];  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  +  1];  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  +  1];  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	35	None	replace
215	[BUG]  [BUGGY]  if(recordSeparator.size()!=  set.length  ||  set.size()!=  header.length)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(recordSeparator.size()!=  set.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(recordSeparator.size()!=  set.length  ||  set.size()!=  header.length)  {	  if(header.size()!=    set.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	5	None	replace
216	[BUG]  [BUGGY]  if(separator.size()!=  set.length  ||  set.size()!=  header.length)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(separator.size()!=  set.length  ||  set.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(separator.size()!=  set.length  ||  set.size()!=  header.length)  {	  if(header.size()!=    set.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	5	None	replace
217	[BUG]  [BUGGY]  Arrays.asList(  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
218	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  set.addAll(Arrays.asList(  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
219	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  -  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
220	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.iterator().next();  set.addAll(Arrays.asList  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.iterator().next();  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.iterator().next();  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	26	None	replace
221	[BUG]  [BUGGY]  if(escape!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
222	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	32	None	replace
223	[BUG]  [BUGGY]  if(set.size()  <  header.length  ||  set.contains(c))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  header.length  ||  set.contains(c))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  header.length  ||  set.contains(c))  {	  if(set.size()    <    header.length)    {    	non-compiled	[CE]  	38	None	replace
224	[BUG]  [BUGGY]  if(set.size()  <  header.length  ||  set.contains(escape))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  header.length  ||  set.contains(escape))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  header.length  ||  set.contains(escape))  {	  if(set.size()    <    header.length)    {    	non-compiled	[CE]  	38	None	replace
225	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.size()  >=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.size()  >=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.size()  >=  header.length)  {	  if(set.size()    >=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	30	None	replace
226	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  1);  set.addAll(Arrays.asList(header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  1);  set.addAll(Arrays.asList(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  1);  set.addAll(Arrays.asList(header));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	24	None	replace
227	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  set.addAll(Arrays.asList(  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
228	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
229	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(1);  set.addAll(Arrays.asList(  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(1);  set.addAll(Arrays.asList(  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(1);  set.addAll(Arrays.asList(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    length    =    header.length;    i    <    length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	28	None	replace
230	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.size()  <  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.size()  <  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.size()  <  header.length)  {	  if(set.size()!=    header.length    ||    set.size()    <    header.length)    {    	non-compiled	[CE]  	39	None	replace
231	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  ==  header.length  -  1)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  ==  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.size()  ==  header.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
232	[BUG]  [BUGGY]  if(set.size()  <  header.length  -  1)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  <  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  header.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
233	[BUG]  [BUGGY]  if(set.size()  >=  header.length  -  1)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >=  header.length  -  1)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  header.length  -  1)  {	  if(set.size()    ==    header.length    -    1)    {    	non-compiled	[CE]  	16	None	replace
234	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	27	None	replace
235	[BUG]  [BUGGY]  if(c!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(c!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(c!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
236	[BUG]  [BUGGY]  if(escape!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(escape!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(escape!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    set.toArray(new    String[set.size()    ]);    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	36	None	replace
237	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toUpperCase();  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toUpperCase();  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toUpperCase();  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	33	None	replace
238	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(escape);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(escape);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(escape);	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
239	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newLinkedHashSet();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  Set  <  String>  set  =  Sets.newLinkedHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  Sets.newLinkedHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
240	[BUG]  [BUGGY]  final  set  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  set  <  String>  set  =  Sets.newHashSet();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  set  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	13	None	replace
241	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(escape);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(escape);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  Sets.newHashSet(escape);	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	9	None	replace
242	[BUG]  [BUGGY]  if(Arrays.size()  ==  set.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(Arrays.size()  ==  set.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(Arrays.size()  ==  set.length)  {	  if    (header.size()    ==    set.length)    {    	non-compiled	[CE]  	17	None	replace
243	[BUG]  [BUGGY]  if(header.size()!=  set.length  ||  header.size()!=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(header.size()!=  set.length  ||  header.size()!=  header.length)  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  set.length  ||  header.size()!=  header.length)  {	  if(header.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	20	None	replace
244	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ],  escapeChar);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ],  escapeChar);  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ],  escapeChar);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	7	None	replace
245	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.contains(c))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.contains(c))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.contains(c))  {	  if    (set.size()    >    header.length)    {    	non-compiled	[CE]  	1	None	replace
246	[BUG]  [BUGGY]  if(set.size()  >  header.length  ||  set.contains(escape))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(set.size()  >  header.length  ||  set.contains(escape))  {  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >  header.length  ||  set.contains(escape))  {	  if    (set.size()    >    header.length)    {    	non-compiled	[CE]  	1	None	replace
247	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toUpperCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toUpperCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toUpperCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	  if(quoteChar!=    null)    {    final    String[]    header    =    quoteChar.toLowerCase();    set.addAll(Arrays.asList(header));    }    else    {    set.addAll(Arrays.asList(header));    }    	non-compiled	[CE]  	34	None	replace
248	[BUG]  [BUGGY]  java.lang.Exception:  Unexpected  exception( "The  header  contains  duplicate  names:   "  +  Arrays.toString(header));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:  Unexpected  exception( "The  header  contains  duplicate  names:   "  +  Arrays.toString(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:  Unexpected  exception( "The  header  contains  duplicate  names:   "  +  Arrays.toString(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
249	[BUG]  [BUGGY]  java.lang.Exception:   "The  header  contains  duplicate  names:   "  +  Arrays.toString(header));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  java.lang.Exception:   "The  header  contains  duplicate  names:   "  +  Arrays.toString(header));  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	java.lang.Exception:   "The  header  contains  duplicate  names:   "  +  Arrays.toString(header));	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
250	[BUG]  [BUGGY]  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
251	[BUG]  [BUGGY]  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  String[]  header  =  set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();	  if(quoteChar!=    null)    {    final    String[]    header    =    new    String[set.size()    ];    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    String[]    header    =    header.toString();    set.addAll(Arrays.asList(    	non-compiled	[CE]  	37	None	replace
252	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  -  1]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
253	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.iterator().next();  set.addAll(Arrays.asList  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.iterator().next();  set.addAll(Arrays.asList  [BUGGY]      throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.iterator().next();  set.addAll(Arrays.asList	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0,    len    =    header.length;    i    <    len;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    set.addAll(Arrays.asList(    	non-compiled	[CE]  	25	None	replace
