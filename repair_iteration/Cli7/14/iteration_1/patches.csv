bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.add(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.add(option);	  options.clear();    	compilable	  [FE]  NullPointerException  	20	1	replace
2	[BUG]  [BUGGY]  options.add(option);  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.add(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);	  options.clear();    	compilable	  [FE]  NullPointerException  	20	1	replace
3	[BUG]  [BUGGY]  if(option!=  null)reset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
4	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	8	1	add
6	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	8	1	add
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	8	1	add
8	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	8	1	add
9	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  If(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  If(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    If(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	non-compiled	[CE]  ';'  expected	8	None	add
10	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option  >=  null)  {  reset();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option  >=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option  >=  null)  {  reset();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	add
11	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(defaultOption);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(defaultOption);	      Option    option    =    options.get(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	13	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.get(null);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(null);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(null);	      Option    option    =    options.get(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	13	None	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
14	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	25	1	replace
16	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	25	1	replace
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	6	1	add
18	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	6	1	add
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	6	1	add
20	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	6	1	add
21	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  If(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  If(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    If(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	non-compiled	[CE]  ';'  expected	6	None	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	6	1	add
23	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	6	1	add
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	11	1	add
25	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	11	1	add
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	11	1	add
27	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	11	1	add
28	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	11	1	add
29	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	11	1	add
30	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  If(option!=  null)reset();  if(option!=  null)  {  reset();  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  If(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    If(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	non-compiled	[CE]  ';'  expected	11	None	add
31	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	15	1	add
32	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	15	1	add
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	15	1	add
34	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)reset();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	15	1	add
35	[BUG]  [BUGGY]  if(option!=  null)reset();  If(option!=  null)reset();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  If(option!=  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    If(option!=  null)reset();	  	non-compiled	[CE]  ';'  expected	15	None	add
36	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.next(),  options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)options.get(i.next(),  options);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.next(),  options);	      Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	2	None	replace
37	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.next()  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)options.get(i.next()  -  1);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.next()  -  1);	      Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	2	None	replace
38	[BUG]  [BUGGY]  Option  option  =(Option)options.get(0);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)options.get(0);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(0);	      Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	2	None	replace
39	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	28	1	replace
40	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	28	1	replace
41	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	28	1	replace
42	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  ComparisonFailure  [FE]      IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	28	1	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.getOption(i);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(i);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	14	None	replace
44	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultOption);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.getOption(defaultOption);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(defaultOption);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	14	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(this.options);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	14	None	replace
46	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
47	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
49	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
50	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  If(option!=  null)  {  reset();  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  If(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    If(option!=  null)  {  reset();  }	  	non-compiled	[CE]  ';'  expected	17	None	add
51	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
52	[BUG]  [BUGGY]  Option  option  =(Option)this.options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)this.options.iterator().next();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.iterator().next();	      Option    option    =(Option)options.iterator().next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	replace
53	[BUG]  [BUGGY]  Option  option  =(Option)options.iterator();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)options.iterator();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.iterator();	      Option    option    =(Option)options.iterator().next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	replace
54	[BUG]  [BUGGY]  option  =(Option)options.iterator().next();  [CE]  variable  option  might  already  have  been  assigned  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  option  =(Option)options.iterator().next();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =(Option)options.iterator().next();	      Option    option    =(Option)options.iterator().next();    	non-compiled	[CE]  variable  option  might  already  have  been  assigned	1	None	replace
55	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)this.options.get(i);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(i);	      Option    option    =(Option)options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	5	None	replace
56	[BUG]  [BUGGY]  Option  option  =(Option)allOptions.get(i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)allOptions.get(i);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)allOptions.get(i);	      Option    option    =(Option)options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	5	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.get(i.next(),  options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(i.next(),  options);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next(),  options);	      Option    option    =    options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	4	None	replace
58	[BUG]  [BUGGY]  Option  option  =  options.get(i.next()  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(i.next()  -  1);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next()  -  1);	      Option    option    =    options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	4	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.get(i.next()  +  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(i.next()  +  1);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next()  +  1);	      Option    option    =    options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	4	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.iterator();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.iterator();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.iterator();	      Option    option    =    options.iterator().next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	3	None	replace
61	[BUG]  [BUGGY]  option  =  options.iterator().next();  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  option  =  options.iterator().next();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =  options.iterator().next();	      Option    option    =    options.iterator().next();    	non-compiled	[CE]  incompatible  types	3	None	replace
62	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.iterator().next();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.iterator().next();	      Option    option    =    options.iterator().next();    	compilable	  [FE]  ComparisonFailure  	3	1	replace
63	[BUG]  [BUGGY]  options.iterator().next();  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.iterator().next();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();	      Option    option    =    options.iterator().next();    	compilable	  [FE]  ComparisonFailure  	3	1	replace
64	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	27	1	add
65	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	27	1	add
66	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	27	1	add
67	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	27	1	add
68	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	27	1	add
69	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	27	1	add
70	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	24	1	add
71	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	24	1	add
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	24	1	add
73	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	24	1	add
74	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	24	1	add
75	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	24	1	add
76	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	21	1	add
77	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)reset();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	21	1	add
78	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	21	1	add
79	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	21	1	add
80	[BUG]  [BUGGY]  if(option  ==  null)reset();  If(option  ==  null)reset();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  If(option  ==  null)reset();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    If(option  ==  null)reset();	  	non-compiled	[CE]  ';'  expected	21	None	add
81	[BUG]  [BUGGY]  Option  option  =  options.get(i  +  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(i  +  1);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i  +  1);	      Option    option    =    options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	23	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.get(0);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(0);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(0);	      Option    option    =    options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	23	None	replace
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)  {  reset();  }	  if(option!=    null)    {    reset();    }    	compilable	  [FE]  ComparisonFailure  	18	1	replace
84	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)  {  reset();  }	  if(option!=    null)    {    reset();    }    	compilable	  [FE]  ComparisonFailure  	18	1	replace
85	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)reset();  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option!=  null)reset();  }	  if(option!=    null)reset();    if(option    ==    null)reset();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
86	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)reset();  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(option!=  null)reset();  }	  if(option!=    null)reset();    if(option    ==    null)reset();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  options.clear();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.clear();    options.clear();	  	compilable	  [FE]  ComparisonFailure  	19	1	add
88	[BUG]  [BUGGY]  options.clear();  options.clear();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  options.clear();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    options.clear();	  	compilable	  [FE]  ComparisonFailure  	19	1	add
89	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Option  option  =(Option)options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
90	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Option  option  =(Option)options.get(i.next());  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
91	[BUG]  [BUGGY]  options.clear();  Options  options  =(Option)options.iterator().next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Options  options  =(Option)options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Options  options  =(Option)options.iterator().next();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
92	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	14	None	replace
93	[BUG]  [BUGGY]  Option  option  =  options.getOption(DefaultOptionBuilder.class);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.getOption(DefaultOptionBuilder.class);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(DefaultOptionBuilder.class);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	14	None	replace
94	[BUG]  [BUGGY]  Option  option  =  options.get(options.size()  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(options.size()  -  1);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.size()  -  1);	      Option    option    =    options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	23	None	replace
95	[BUG]  [BUGGY]  else  if(option!=  null)reset();  if(option  ==  null)reset();  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  else  if(option!=  null)reset();  if(option  ==  null)reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option!=  null)reset();  if(option  ==  null)reset();  }	  if(option!=    null)reset();    if(option    ==    null)reset();    }    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
96	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	8	None	add
97	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	8	None	add
98	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	8	None	add
99	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.get(i.next());  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	8	None	add
100	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.intValue());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)options.get(i.intValue());  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.intValue());	      Option    option    =(Option)options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	5	None	replace
101	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	11	None	add
102	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	11	None	add
103	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	11	None	add
104	[BUG]  [BUGGY]  if(option!=  null)opt();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)opt();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)opt();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
105	[BUG]  [BUGGY]  if(option!=  null)reset();  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  Option  option  =  options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	15	None	add
106	[BUG]  [BUGGY]  if(option!=  null)reset();  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  Option  option  =  options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	15	None	add
107	[BUG]  [BUGGY]  option  option  =  options.iterator().next();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  option  option  =  options.iterator().next();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  option  =  options.iterator().next();	      Option    option    =    options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
108	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
109	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
110	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
111	[BUG]  [BUGGY]  options.clear();  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Option  option  =  options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
112	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Option  option  =(Option)options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Option  option  =(Option)options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
113	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.get(option);  options.clear();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Option  option  =(Option)options.get(option);  options.clear();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Option  option  =(Option)options.get(option);  options.clear();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
114	[BUG]  [BUGGY]  Option  option  =  options.get(options.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(options.next());  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.next());	      Option    option    =    options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	4	None	replace
115	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    	compilable	  [FE]  ComparisonFailure  	7	1	replace
116	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    	compilable	  [FE]  ComparisonFailure  	7	1	replace
117	[BUG]  [BUGGY]  if(option!=  null)restart();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)restart();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)restart();	  if(option    ==    null)reset();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
118	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	6	None	add
119	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	6	None	add
120	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	6	None	add
121	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(i.next());  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	6	None	add
122	[BUG]  [BUGGY]  if(option  ==  null)reset();  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  Option  option  =  options.iterator().next();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	21	None	add
123	[BUG]  [BUGGY]  if(option  ==  null)reset();  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  Option  option  =  options.get(option);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	21	None	add
124	[BUG]  [BUGGY]  Option  option  =(Option)options.get(option).next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)options.get(option).next();  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(option).next();	      Option    option    =(Option)options.iterator().next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	replace
125	[BUG]  [BUGGY]  Option  option  =(Option)options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =(Option)options.get(option);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(option);	      Option    option    =(Option)options.iterator().next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	replace
126	[BUG]  [BUGGY]  if(option!=  null)reset();  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  }	  if(option!=    null)reset();    if(option    ==    null)reset();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
127	[BUG]  [BUGGY]  if(option  ==  null)reset();  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  }	  if(option!=    null)reset();    if(option    ==    null)reset();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)return  option;  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)return  option;	  if(option!=    null)reset();    	compilable	  [FE]  ComparisonFailure  	16	1	replace
129	[BUG]  [BUGGY]  if(option!=  null)return  option;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)return  option;  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)return  option;	  if(option!=    null)reset();    	compilable	  [FE]  ComparisonFailure  	16	1	replace
130	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)reset();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option  ==  null)reset();  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	add
131	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    If(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	24	None	add
132	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    reset();    }    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
133	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    reset();    }    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
134	[BUG]  [BUGGY]  options.clear();  Options  options  =  new  DefaultOptionBuilder();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Options  options  =  new  DefaultOptionBuilder();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Options  options  =  new  DefaultOptionBuilder();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
135	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.get(i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Option  option  =(Option)options.get(i);  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Option  option  =(Option)options.get(i);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
136	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.get(i);  options.clear();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  options.clear();  Option  option  =(Option)options.get(i);  options.clear();  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();    Option  option  =(Option)options.get(i);  options.clear();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
137	[BUG]  [BUGGY]  if(option!=  null)this.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)this.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)this.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
138	[BUG]  [BUGGY]  if(option!=  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
139	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }  [CE]  missing  return  value  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }	  	non-compiled	[CE]  missing  return  value	6	None	add
140	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  {  null)  {  reset();  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  {  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  {  null)  {  reset();  }	  	non-compiled	[CE]  ')'  expected	6	None	add
141	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    If(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  	27	None	add
142	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  if(option!=  null)  {  reset();  }  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    Option  option  =  options.get(option);  if(option!=  null)  {  reset();  }	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
143	[BUG]  [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.get(i);  if(option!=  null)  {  reset();  }  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  reset();  }  Option  option  =  options.get(i);  if(option!=  null)  {  reset();  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    reset();    }    Option  option  =  options.get(i);  if(option!=  null)  {  reset();  }	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
144	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	28	1	replace
145	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	28	1	replace
146	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  return;  }  [CE]  missing  return  value  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  return;  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  return;  }	  	non-compiled	[CE]  missing  return  value	8	None	add
147	[BUG]  [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION);  [BUGGY]    reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(Option.OPTIONAL_OPTION);	      Option    option    =    options.get(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	13	None	replace
148	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)return  option;  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)return  option;	  if(option    ==    null)reset();    	compilable	  [FE]  ComparisonFailure  	22	1	replace
149	[BUG]  [BUGGY]  if(option  ==  null)return  option;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option  ==  null)return  option;  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)return  option;	  if(option    ==    null)reset();    	compilable	  [FE]  ComparisonFailure  	22	1	replace
150	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  return;  }  [CE]  missing  return  value  [FE]    ComparisonFailure    [CONTEXT]    option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }    [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  return;  }  [BUGGY]      return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  return;  }	  	non-compiled	[CE]  missing  return  value	11	None	add
