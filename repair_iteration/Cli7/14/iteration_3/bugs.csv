bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  options.add(option.iterator().next());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option.iterator().next());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option.iterator().next());	  option    =    options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
2	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	133	None	replace
3	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsLoggedInException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  aughtExceptionHandler.throwAsLoggedInException( " ");  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	aughtExceptionHandler.throwAsLoggedInException( " ");	  if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	133	None	replace
4	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	133	None	replace
5	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i).next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i).next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i).next();	  Option    option    =(Option)options.get(option).next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	124	None	replace
6	[BUG]  [BUGGY]  Option  option  =(Option)options.get(0).next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(0).next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(0).next();	  Option    option    =(Option)options.get(option).next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	124	None	replace
7	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(option).next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(option).next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(option).next();	  Option    option    =(Option)options.get(option).next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	124	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  null;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)return  null;	  if(option!=    null)return    option;    	compilable	  [FE]  AssertionFailedError  	129	1	replace
9	[BUG]  [BUGGY]  if(option!=  null)return  null;  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  null;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)return  null;	  if(option!=    null)return    option;    	compilable	  [FE]  AssertionFailedError  	129	1	replace
10	[BUG]  [BUGGY]  if(option!=  null)return  Option;  [CE]  cannot  find  symbol  Option  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  Option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)return  Option;	  if(option!=    null)return    option;    	non-compiled	[CE]  cannot  find  symbol  Option	129	None	replace
11	[BUG]  [BUGGY]  Options  options  =(Option)options.iterator().next();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  options  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  options  =(Option)options.iterator().next();	  options.clear();    Options    options    =(Option)options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
12	[BUG]  [BUGGY]  options.clear();  Option  options  =(Option)options.iterator().next();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  Option  options  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  Option  options  =(Option)options.iterator().next();	  options.clear();    Options    options    =(Option)options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	31	1	add
14	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	31	1	add
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	31	1	add
16	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	31	1	add
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	31	1	add
18	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	31	1	add
19	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option  >=  null)reset();  if(option!=  null)reset();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option  >=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=    null)reset();    if(option  >=  null)reset();  if(option!=  null)reset();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	31	None	add
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.remove(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.remove(option);	  if(option!=    null)    {    reset();    }    Option    option    =(Option)options.iterator().next();    	compilable	  [FE]  NullPointerException  	109	1	replace
21	[BUG]  [BUGGY]  options.remove(option);  [FE]  NullPointerException  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.remove(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.remove(option);	  if(option!=    null)    {    reset();    }    Option    option    =(Option)options.iterator().next();    	compilable	  [FE]  NullPointerException  	109	1	replace
22	[BUG]  [BUGGY]  Option  option  =  obuilder.getOption(DefaultOptionBuilder.class);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  obuilder.getOption(DefaultOptionBuilder.class);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  obuilder.getOption(DefaultOptionBuilder.class);	  Option    option    =    options.getOption(DefaultOptionBuilder.class);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	93	None	replace
23	[BUG]  [BUGGY]  Option  option  =  abuilder.getOption(DefaultOptionBuilder.class);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  abuilder.getOption(DefaultOptionBuilder.class);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  abuilder.getOption(DefaultOptionBuilder.class);	  Option    option    =    options.getOption(DefaultOptionBuilder.class);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	93	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(DefaultOptionBuilder.class,  obuilder);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(DefaultOptionBuilder.class,  obuilder);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(DefaultOptionBuilder.class,  obuilder);	  Option    option    =    options.getOption(DefaultOptionBuilder.class);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	93	None	replace
25	[BUG]  [BUGGY]  options.clear();  option  =(Option)options.iterator().next();  [CE]  variable  option  might  already  have  been  assigned  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  option  =(Option)options.iterator().next();	  options.clear();    Option    option    =(Option)options.iterator().next();    	non-compiled	[CE]  variable  option  might  already  have  been  assigned	89	None	replace
26	[BUG]  [BUGGY]  Set  <  Option>  options  =  Sets.newHashSet();  [CE]  cannot  find  symbol  Sets  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Set  <  Option>  options  =  Sets.newHashSet();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Set  <  Option>  options  =  Sets.newHashSet();	  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    If(option    ==    null)reset();    if(option!=    null)    {    reset();    }    	non-compiled	[CE]  cannot  find  symbol  Sets	9	None	replace
27	[BUG]  [BUGGY]  if(option!=  null)reset();  If(option  ==  null)reset();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  If(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  If(option  ==  null)reset();	  if(option    ==    null)reset();    If(option    ==    null)reset();    	non-compiled	[CE]  ';'  expected	80	None	replace
28	[BUG]  [BUGGY]  if(option!=  null)  {  options.clear();  Option  option  =(Option)options.get(option);  options.clear();  }  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.clear();  Option  option  =(Option)options.get(option);  options.clear();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.clear();  Option  option  =(Option)options.get(option);  options.clear();  }	  options.clear();    Option    option    =(Option)options.get(option);    options.clear();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	113	None	replace
29	[BUG]  [BUGGY]  Option  option  =(Option)options.get(option);  options.clear();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(option);  options.clear();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(option);  options.clear();	  options.clear();    Option    option    =(Option)options.get(option);    options.clear();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	113	None	replace
30	[BUG]  [BUGGY]  if(option!=  null)  {  options.clear();  option  =(Option)options.get(option);  options.clear();  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.clear();  option  =(Option)options.get(option);  options.clear();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.clear();  option  =(Option)options.get(option);  options.clear();  }	  options.clear();    Option    option    =(Option)options.get(option);    options.clear();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.add(option);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)  {  options.add(option);  }	  options.add(option);    	compilable	  [FE]  NullPointerException  	2	1	replace
32	[BUG]  [BUGGY]  if(option!=  null)  {  options.add(option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.add(option);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.add(option);  }	  options.add(option);    	compilable	  [FE]  NullPointerException  	2	1	replace
33	[BUG]  [BUGGY]  if(option!=  null)  {  options.add(option);  }  else  {  OptionBuilder  obuilder  =(OptionBuilder)i.next();  if(obuilder.hasOption(option))  {  option  =  obuilder.create();  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.add(option);  }  else  {  OptionBuilder  obuilder  =(OptionBuilder)i.next();  if(obuilder.hasOption(option))  {  option  =  obuilder.create();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.add(option);  }  else  {  OptionBuilder  obuilder  =(OptionBuilder)i.next();  if(obuilder.hasOption(option))  {  option  =  obuilder.create();  }	  options.add(option);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.get(0);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  Option  option  =(Option)options.get(0);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  Option  option  =(Option)options.get(0);	  options.clear();    Option    option    =(Option)options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	135	None	replace
35	[BUG]  [BUGGY]  options.clear();  option  =(Option)options.get(0);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  option  =(Option)options.get(0);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  option  =(Option)options.get(0);	  options.clear();    Option    option    =(Option)options.get(i);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
37	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
39	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
41	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
43	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
44	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
45	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
46	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
47	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
49	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
51	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	46	1	add
52	[BUG]  [BUGGY]  options.put(option,  option);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.put(option,  option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.put(option,  option);	  if(option!=    null)    {    reset();    }    Option    option    =    options.get(option);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
53	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
54	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
55	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
56	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	16	1	replace
58	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	16	1	replace
59	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(0);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(0);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(0);	  Option    option    =(Option)options.get(0);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	38	None	replace
60	[BUG]  [BUGGY]  Option  option  =(Option)options.get(1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(1);	  Option    option    =(Option)options.get(0);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	38	None	replace
61	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(1);	  Option    option    =(Option)options.get(0);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	38	None	replace
62	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	144	1	add
63	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	144	1	add
64	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	144	1	add
65	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	144	1	add
66	[BUG]  [BUGGY]  if(option!=  null)reset();  Options  option  =  options.get(option);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  Options  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  Options  option  =  options.get(option);	  if(option!=    null)reset();    Option    option    =    options.get(option);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
67	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	145	None	replace
68	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
69	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
71	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
72	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
73	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
74	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
75	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
76	[BUG]  [BUGGY]  if(option!=  null)reset();  option  =  options.iterator().next();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  option  =  options.iterator().next();	  if(option!=    null)reset();    Option    option    =    options.iterator().next();    	non-compiled	[CE]  incompatible  types	105	None	replace
77	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	68	1	add
78	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	68	1	add
79	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	68	1	add
80	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	68	1	add
81	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	68	1	add
82	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	68	1	add
83	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.intValue()  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i.intValue()  -  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.intValue()  -  1);	  Option    option    =(Option)options.get(i.intValue());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	100	None	replace
84	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.intValue(),  options.intValue());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i.intValue(),  options.intValue());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.intValue(),  options.intValue());	  Option    option    =(Option)options.get(i.intValue());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	100	None	replace
85	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.intValue(),  options.size());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i.intValue(),  options.size());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.intValue(),  options.size());	  Option    option    =(Option)options.get(i.intValue());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	100	None	replace
86	[BUG]  [BUGGY]  options.clear();  option  =(Option)options.get(i.next());  [CE]  cannot  find  symbol  i  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  option  =(Option)options.get(i.next());	  options.clear();    Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  cannot  find  symbol  i	90	None	replace
87	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  null;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)return  null;	  if(option    ==    null)return    option;    	compilable	  [FE]  ComparisonFailure  	149	1	replace
88	[BUG]  [BUGGY]  if(option  ==  null)return  null;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  null;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)return  null;	  if(option    ==    null)return    option;    	compilable	  [FE]  ComparisonFailure  	149	1	replace
89	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
90	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
91	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
92	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
93	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
94	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
95	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
96	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
97	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
98	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
99	[BUG]  [BUGGY]  if(option!=  null)options.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)options.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)options.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)this.reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
100	[BUG]  [BUGGY]  if(option!=  null)option.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)option.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)option.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)this.reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
101	[BUG]  [BUGGY]  options.clear();  option  =  options.get(option);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  option  =  options.get(option);	  options.clear();    Option    option    =    options.get(option);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
102	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
103	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
105	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
106	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
107	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
109	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
110	[BUG]  [BUGGY]  Option  option  =  options.get(option);  if(option!=  null)  {  reset();  }  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(option);  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(option);  if(option!=  null)  {  reset();  }	  if(option!=    null)    {    reset();    }    Option    option    =    options.get(option);    if(option!=    null)    {    reset();    }    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	142	None	replace
111	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  this.options.getOption(options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  this.options.getOption(options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	45	None	replace
112	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(this.options,  this.options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	45	None	replace
113	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(this.options,  options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(this.options,  options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	45	None	replace
114	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(i.next());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(i.next());	  Option    option    =(Option)this.options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	55	None	replace
115	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(i  +  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(i  +  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(i  +  1);	  Option    option    =(Option)this.options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	55	None	replace
116	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	78	1	add
117	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	78	1	add
118	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	78	1	add
119	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	78	1	add
120	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  >=  null)reset();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  >=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=    null)reset();    if(option  ==  null)reset();  if(option  >=  null)reset();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	78	None	add
121	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  If(option  ==  null)reset();  if(option!=  null)reset();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=  null)reset();  If(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=    null)reset();    If(option  ==  null)reset();  if(option!=  null)reset();	  	non-compiled	[CE]  ';'  expected	78	None	add
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
123	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
124	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
125	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
127	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
129	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
130	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption,  i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(defaultOption,  i);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(defaultOption,  i);	  Option    option    =    options.get(defaultOption);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	11	None	replace
131	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption,  defaultOption);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(defaultOption,  defaultOption);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(defaultOption,  defaultOption);	  Option    option    =    options.get(defaultOption);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	11	None	replace
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	42	1	replace
133	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	42	1	replace
134	[BUG]  [BUGGY]  Option  option  =  options.get(options.next(),  options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.next(),  options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.next(),  options);	  Option    option    =    options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	57	None	replace
135	[BUG]  [BUGGY]  Option  option  =  options.get(i.next(),  null);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(i.next(),  null);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next(),  null);	  Option    option    =    options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	57	None	replace
136	[BUG]  [BUGGY]  Option  option  =  options.get(i.next(),  options,  gbuilder);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(i.next(),  options,  gbuilder);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next(),  options,  gbuilder);	  Option    option    =    options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	57	None	replace
137	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultOptions);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(defaultOptions);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(defaultOptions);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	92	None	replace
138	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	115	1	add
139	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	115	1	add
140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	115	1	add
141	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	115	1	add
142	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	115	1	add
143	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	115	1	add
144	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  If(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  If(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    If(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	non-compiled	[CE]  ';'  expected	115	None	add
145	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(option);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(option);	  Option    option    =(Option)options.get(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	125	None	replace
146	[BUG]  [BUGGY]  Option  option  =(Option)allOptions.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)allOptions.get(option);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)allOptions.get(option);	  Option    option    =(Option)options.get(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	125	None	replace
147	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
148	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
149	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
150	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	41	1	add
151	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  option;  if(option  ==  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)return    option;    if(option  ==  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	148	1	add
152	[BUG]  [BUGGY]  if(option  ==  null)return  option;  if(option  ==  null)return  option;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  option;  if(option  ==  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)return    option;    if(option  ==  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	148	1	add
153	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  option;  if(option!=  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)return    option;    if(option!=  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	148	1	add
154	[BUG]  [BUGGY]  if(option  ==  null)return  option;  if(option!=  null)return  option;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  option;  if(option!=  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)return    option;    if(option!=  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	148	1	add
155	[BUG]  [BUGGY]  if(option  ==  null)return  option;  If(option  ==  null)return  option;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  option;  If(option  ==  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)return    option;    If(option  ==  null)return  option;	  	non-compiled	[CE]  ';'  expected	148	None	add
156	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	74	1	add
157	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	74	1	add
158	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	74	1	add
159	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	74	1	add
160	[BUG]  [BUGGY]  Option  option  =(Option)allOptions.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)allOptions.get(i.next());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)allOptions.get(i.next());	  Option    option    =(Option)allOptions.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	56	None	replace
161	[BUG]  [BUGGY]  Option  option  =(Option)this.allOptions.get(i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.allOptions.get(i);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.allOptions.get(i);	  Option    option    =(Option)allOptions.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	56	None	replace
162	[BUG]  [BUGGY]  option  =(Option)this.options.iterator().next();  [CE]  variable  option  might  already  have  been  assigned  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =(Option)this.options.iterator().next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =(Option)this.options.iterator().next();	  Option    option    =(Option)this.options.iterator().next();    	non-compiled	[CE]  variable  option  might  already  have  been  assigned	52	None	replace
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
164	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
166	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
168	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
169	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
170	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
171	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
172	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
173	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)  {  options.clear();  options.clear();  }	  options.clear();    options.clear();    	compilable	  [FE]  ComparisonFailure  	88	1	replace
174	[BUG]  [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.clear();  options.clear();  }	  options.clear();    options.clear();    	compilable	  [FE]  ComparisonFailure  	88	1	replace
175	[BUG]  [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  else  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  option  =(Option)i.next();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  else  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  option  =(Option)i.next();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.clear();  options.clear();  }  else  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  option  =(Option)i.next();  }	  options.clear();    options.clear();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
176	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultOption,  i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(defaultOption,  i);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(defaultOption,  i);	  Option    option    =    options.getOption(defaultOption);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	44	None	replace
177	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultOption,  defaultOption);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(defaultOption,  defaultOption);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(defaultOption,  defaultOption);	  Option    option    =    options.getOption(defaultOption);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	44	None	replace
178	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.defaultOption);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(this.defaultOption);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(this.defaultOption);	  Option    option    =    options.getOption(defaultOption);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	44	None	replace
179	[BUG]  [BUGGY]  options.put(i.next(),  option);  [CE]  cannot  find  symbol  i  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.put(i.next(),  option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.put(i.next(),  option);	  if(option!=    null)    {    reset();    }    Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  cannot  find  symbol  i	110	None	replace
180	[BUG]  [BUGGY]  options.get(i.next());  [CE]  cannot  find  symbol  i  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.get(i.next());	  if(option!=    null)    {    reset();    }    Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  cannot  find  symbol  i	110	None	replace
181	[BUG]  [BUGGY]  options.remove(i.next());  [CE]  cannot  find  symbol  i  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.remove(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.remove(i.next());	  if(option!=    null)    {    reset();    }    Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  cannot  find  symbol  i	110	None	replace
182	[BUG]  [BUGGY]  if(options!=  null)  {  options.clear();  Option  option  =(Option)options.get(i);  options.clear();  }  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(options!=  null)  {  options.clear();  Option  option  =(Option)options.get(i);  options.clear();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(options!=  null)  {  options.clear();  Option  option  =(Option)options.get(i);  options.clear();  }	  options.clear();    Option    option    =(Option)options.get(i);    options.clear();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	136	None	replace
183	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i);  options.clear();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i);  options.clear();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i);  options.clear();	  options.clear();    Option    option    =(Option)options.get(i);    options.clear();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	136	None	replace
184	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  >=  null)  {  reset();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  >=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option  >=  null)  {  reset();  }	  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    If(option!=    null)reset();    if(option!=    null)    {    reset();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	30	None	replace
185	[BUG]  [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  true);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  true);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(Option.OPTIONAL_OPTION,  true);	  Option    option    =    options.get(Option.OPTIONAL_OPTION);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	147	None	replace
186	[BUG]  [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  null);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  null);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(Option.OPTIONAL_OPTION,  null);	  Option    option    =    options.get(Option.OPTIONAL_OPTION);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	147	None	replace
187	[BUG]  [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  0);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  0);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(Option.OPTIONAL_OPTION,  0);	  Option    option    =    options.get(Option.OPTIONAL_OPTION);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	147	None	replace
188	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	66	1	add
189	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	66	1	add
190	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	66	1	add
191	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	66	1	add
192	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	66	1	add
193	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	66	1	add
194	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  return;  }  [CE]  missing  return  value  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option!=  null)  {  reset();  return;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option!=  null)  {  reset();  return;  }	  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=    null)reset();    if(option!=    null)    {    reset();    return;    }    	non-compiled	[CE]  missing  return  value	150	None	replace
195	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	33	1	add
196	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	33	1	add
197	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	33	1	add
198	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)reset();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	33	1	add
199	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option  >=  null)reset();  if(option  ==  null)reset();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option  >=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option    ==    null)reset();    if(option  >=  null)reset();  if(option  ==  null)reset();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	33	None	add
200	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  If(option!=  null)reset();  if(option  ==  null)reset();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  If(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option    ==    null)reset();    If(option!=  null)reset();  if(option  ==  null)reset();	  	non-compiled	[CE]  ';'  expected	33	None	add
201	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)    {    reset();    }    if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	83	1	add
202	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	83	1	add
203	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	83	1	add
204	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	83	1	add
205	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  If(option  ==  null)  {  reset();  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  If(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    If(option  ==  null)  {  reset();  }	  	non-compiled	[CE]  ';'  expected	83	None	add
206	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	83	None	add
207	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	39	1	add
208	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	39	1	add
209	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	39	1	add
210	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	39	1	add
211	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  option;  if(option!=  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)return    option;    if(option!=  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	128	1	add
212	[BUG]  [BUGGY]  if(option!=  null)return  option;  if(option!=  null)return  option;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  option;  if(option!=  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)return    option;    if(option!=  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	128	1	add
213	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  option;  if(option  ==  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)return    option;    if(option  ==  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	128	1	add
214	[BUG]  [BUGGY]  if(option!=  null)return  option;  if(option  ==  null)return  option;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  option;  if(option  ==  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)return    option;    if(option  ==  null)return  option;	  	compilable	  [FE]  ComparisonFailure  	128	1	add
215	[BUG]  [BUGGY]  if(option!=  null)return  option;  If(option!=  null)return  option;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  option;  If(option!=  null)return  option;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)return    option;    If(option!=  null)return  option;	  	non-compiled	[CE]  ';'  expected	128	None	add
216	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!options.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
217	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(!options.contains(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)reset();  if(!options.contains(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!options.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NullPointerException  	3	1	replace
218	[BUG]  [BUGGY]  if(option!=  null)reset();  if(!options.contains(option))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(!options.contains(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(!options.contains(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!options.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  NullPointerException  	3	1	replace
219	[BUG]  [BUGGY]  if(option  ==  null)  {  if(option!=  null)  {  reset();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)  {  if(option!=  null)  {  reset();  }	  if(option!=    null)    {    reset();    }    If(option!=    null)    {    reset();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
220	[BUG]  [BUGGY]  if(option!=  null)  {  if(option!=  null)  {  reset();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  if(option!=  null)  {  reset();  }	  if(option!=    null)    {    reset();    }    If(option!=    null)    {    reset();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
221	[BUG]  [BUGGY]  if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  Option  option  =(Option)i.next();  if(option!=  null)  {  reset();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  Option  option  =(Option)i.next();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  Option  option  =(Option)i.next();  if(option!=  null)  {  reset();  }	  if(option!=    null)    {    reset();    }    If(option!=    null)    {    reset();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
222	[BUG]  [BUGGY]  if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  option  =(Option)i.next();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  option  =(Option)i.next();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  option  =(Option)i.next();  }	  if(option!=    null)    {    reset();    }    If(option!=    null)    {    reset();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
223	[BUG]  [BUGGY]  if(option!=  null)tryReset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)tryReset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)tryReset();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)tryReset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
224	[BUG]  [BUGGY]  if(option  ==  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)tryReset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
225	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
226	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
227	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
228	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
229	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
230	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
231	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
232	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	26	1	add
233	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	76	1	add
234	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)reset();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	76	1	add
235	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option    ==    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	76	1	add
236	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option    ==    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	76	1	add
237	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	76	1	add
238	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option    ==    null)reset();    if(option!=  null)reset();  if(option  ==  null)reset();	  	compilable	  [FE]  ComparisonFailure  	76	1	add
239	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  If(option  ==  null)reset();  if(option  ==  null)reset();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option  ==  null)reset();  If(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option    ==    null)reset();    If(option  ==  null)reset();  if(option  ==  null)reset();	  	non-compiled	[CE]  ';'  expected	76	None	add
240	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.next(),  options).clone();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i.next(),  options).clone();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.next(),  options).clone();	  Option    option    =(Option)options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	36	None	replace
241	[BUG]  [BUGGY]  option  =(Option)options.get(i.next(),  options);  [CE]  cannot  find  symbol  i  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =(Option)options.get(i.next(),  options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =(Option)options.get(i.next(),  options);	  Option    option    =(Option)options.get(i.next(),    options);    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
242	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.next(),  options).build();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i.next(),  options).build();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.next(),  options).build();	  Option    option    =(Option)options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	36	None	replace
243	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	15	1	add
244	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	15	1	add
245	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	15	1	add
246	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	15	1	add
247	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
248	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
249	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
250	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
251	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
252	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
253	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
254	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
255	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
256	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.next()  +  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i.next()  +  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.next()  +  1);	  Option    option    =(Option)options.get(i.next()    -    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	37	None	replace
257	[BUG]  [BUGGY]  option  =(Option)options.get(i.next());  [CE]  cannot  find  symbol  i  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =(Option)options.get(i.next());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =(Option)options.get(i.next());	  Option    option    =(Option)options.get(i.next()    -    1);    	non-compiled	[CE]  cannot  find  symbol  i	37	None	replace
258	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	64	1	add
259	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	64	1	add
260	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	64	1	add
261	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	64	1	add
262	[BUG]  [BUGGY]  if(option  ==  null)reset();  option  =  options.iterator().next();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  option  =  options.iterator().next();	  if(option    ==    null)reset();    Option    option    =    options.iterator().next();    	non-compiled	[CE]  incompatible  types	122	None	replace
263	[BUG]  [BUGGY]  Option  option  =  options.get(options.next(),  options.size());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.next(),  options.size());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.next(),  options.size());	  Option    option    =    options.get(options.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	114	None	replace
264	[BUG]  [BUGGY]  Option  option  =  options.get(options.next()  +  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.next()  +  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.next()  +  1);	  Option    option    =    options.get(options.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	114	None	replace
265	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  options.iterator().next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.iterator().next();    options.iterator().next();	  	compilable	  [FE]  ComparisonFailure  	62	1	add
266	[BUG]  [BUGGY]  options.iterator().next();  options.iterator().next();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  options.iterator().next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();    options.iterator().next();	  	compilable	  [FE]  ComparisonFailure  	62	1	add
267	[BUG]  [BUGGY]  options.iterator().next();  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  Option  option  =  options.iterator().next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	62	None	add
268	[BUG]  [BUGGY]  options.iterator().next();  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  Option  option  =(Option)options.iterator().next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	62	None	add
269	[BUG]  [BUGGY]  options.iterator().next();  Options  options  =(Option)options.iterator().next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  Options  options  =(Option)options.iterator().next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();    Options  options  =(Option)options.iterator().next();	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
270	[BUG]  [BUGGY]  Options  options  =  new  DefaultOptionBuilder();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  options  =  new  DefaultOptionBuilder();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  options  =  new  DefaultOptionBuilder();	  options.clear();    Options    options    =    new    DefaultOptionBuilder();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
271	[BUG]  [BUGGY]  options.clear();  Option  options  =  new  DefaultOptionBuilder();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  Option  options  =  new  DefaultOptionBuilder();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  Option  options  =  new  DefaultOptionBuilder();	  options.clear();    Options    options    =    new    DefaultOptionBuilder();    	non-compiled	[CE]  incompatible  types	134	None	replace
272	[BUG]  [BUGGY]  option  =  options.iterator();  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =  options.iterator();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =  options.iterator();	  Option    option    =    options.iterator();    	non-compiled	[CE]  incompatible  types	60	None	replace
273	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  options.add(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.add(option);    options.add(option);	  	compilable	  [FE]  NullPointerException  	1	1	add
274	[BUG]  [BUGGY]  options.add(option);  options.add(option);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  options.add(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);    options.add(option);	  	compilable	  [FE]  NullPointerException  	1	1	add
275	[BUG]  [BUGGY]  options.add(option);  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	add
276	[BUG]  [BUGGY]  options.add(option);  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	add
277	[BUG]  [BUGGY]  options.add(option);  Options  options  =(Option)options.iterator().next();  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  Options  options  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);    Options  options  =(Option)options.iterator().next();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
278	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	1	add
279	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	1	add
280	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	1	add
281	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	1	add
282	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();    options.clear();  options.clear();  options.clear();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.clear();        options.clear();    options.clear();  options.clear();	  	compilable	  [FE]  ComparisonFailure  	87	1	add
283	[BUG]  [BUGGY]  options.clear();    options.clear();  options.clear();  options.clear();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();    options.clear();  options.clear();  options.clear();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();        options.clear();    options.clear();  options.clear();	  	compilable	  [FE]  ComparisonFailure  	87	1	add
284	[BUG]  [BUGGY]  options.clear();    options.clear();  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();    options.clear();  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();        options.clear();    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	87	None	add
285	[BUG]  [BUGGY]  options.clear();    options.clear();  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();    options.clear();  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();        options.clear();    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	87	None	add
286	[BUG]  [BUGGY]  options.clear();    options.clear();  Options  options  =(Option)options.get(i.next());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();    options.clear();  Options  options  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();        options.clear();    Options  options  =(Option)options.get(i.next());	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
287	[BUG]  [BUGGY]  Option  option  =(Option)this.options.iterator();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.iterator();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.iterator();	  Option    option    =(Option)options.iterator();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	53	None	replace
288	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	72	1	add
289	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	72	1	add
290	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	72	1	add
291	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	72	1	add
292	[BUG]  [BUGGY]  Option  option  =  options.get(i  +  1  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(i  +  1  -  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i  +  1  -  1);	  Option    option    =    options.get(i    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	81	None	replace
293	[BUG]  [BUGGY]  Option  option  =  options.get(i  +  1L);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(i  +  1L);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i  +  1L);	  Option    option    =    options.get(i    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	81	None	replace
294	[BUG]  [BUGGY]  Option  option  =  options.get(options.size()  +  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.size()  +  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.size()  +  1);	  Option    option    =    options.get(i    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	81	None	replace
295	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	132	1	add
296	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	132	1	add
297	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	132	1	add
298	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	132	1	add
299	[BUG]  [BUGGY]  if(option  ==  null)restart();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)restart();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)restart();	  if(option!=    null)restart();    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
300	[BUG]  [BUGGY]  if(option!=  null)start();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)start();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)start();	  if(option!=    null)restart();    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
301	[BUG]  [BUGGY]  if(option!=  null)rename();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)rename();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)rename();	  if(option!=    null)restart();    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
302	[BUG]  [BUGGY]  if(option!=  null)opt();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)opt();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)opt();  if(!options.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)opt();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
303	[BUG]  [BUGGY]  if(option!=  null)opt();  if(!option.hasArgumentFailure(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)opt();  if(!option.hasArgumentFailure(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)opt();  if(!option.hasArgumentFailure(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)opt();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
304	[BUG]  [BUGGY]  Option  option  =  options.get(options.size());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.size());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.size());	  Option    option    =    options.get(options.size()    -    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	94	None	replace
305	[BUG]  [BUGGY]  Option  option  =  options.getOption(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(i.next());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(i.next());	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	43	None	replace
306	[BUG]  [BUGGY]  Option  option  =  options.getOption(null);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(null);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(null);	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	43	None	replace
307	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.size()  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(options.size()  -  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(options.size()  -  1);	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	43	None	replace
308	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
309	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
310	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
311	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
312	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
313	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
314	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
315	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
316	[BUG]  [BUGGY]  Option  option  =  options.values().iterator();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.values().iterator();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.values().iterator();	  Option    option    =    options.iterator();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	60	None	replace
317	[BUG]  [BUGGY]  else  if(option!=  null)reset();  if(option  ==  null)reset();  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  else  if(option!=  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option!=  null)reset();  if(option  ==  null)reset();	  if(option!=    null)reset();    if(option    ==    null)reset();    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
318	[BUG]  [BUGGY]  Option  option  =  null;  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  null;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  null;	  if(option    ==    null)    {    reset();    }    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	84	None	replace
319	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(defaultOption  -  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(defaultOption  -  1);	  Option    option    =    options.get(defaultOption);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	11	None	replace
320	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	70	None	add
321	[BUG]  [BUGGY]  if(option!=  null)reset();  if(!options.containsOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(!options.containsOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(!options.containsOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!options.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
322	[BUG]  [BUGGY]  if(option!=  null)opt();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)opt();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)opt();	  if(option!=    null)restart();    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
323	[BUG]  [BUGGY]  if(option!=  null)return  options;  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  options;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)return  options;	  if(option    ==    null)return    option;    	non-compiled	[CE]  incompatible  types	149	None	replace
324	[BUG]  [BUGGY]  options.clear();  Options  options  =(Option)options.iterator();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  Options  options  =(Option)options.iterator();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  Options  options  =(Option)options.iterator();	  options.clear();    Options    options    =(Option)options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
325	[BUG]  [BUGGY]  if(option  ==  null)opt();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)opt();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)opt();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)opt();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
326	[BUG]  [BUGGY]  if(option!=  null)opt();  if(!option.hasArgument(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)opt();  if(!option.hasArgument(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)opt();  if(!option.hasArgument(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)opt();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
327	[BUG]  [BUGGY]  Option  option  =(Option)options.get(options.next(),  options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(options.next(),  options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(options.next(),  options);	  Option    option    =(Option)options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	36	None	replace
328	[BUG]  [BUGGY]  Option  option  =(Option)options.get(option.next(),  options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(option.next(),  options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(option.next(),  options);	  Option    option    =(Option)options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	36	None	replace
329	[BUG]  [BUGGY]  else  if(option!=  null)reset();  if(option!=  null)reset();  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  else  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option!=  null)reset();  if(option!=  null)reset();	  if(option!=    null)reset();    if(option!=    null)reset();    	non-compiled	[CE]  'else'  without  'if'	32	None	replace
330	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  >=  null)reset();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  if(option  >=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option    ==    null)reset();    if(option!=  null)reset();  if(option  >=  null)reset();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	33	None	add
331	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  If(option  ==  null)reset();  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option  ==  null)reset();  if(option!=  null)reset();  If(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option    ==    null)reset();    if(option!=  null)reset();  If(option  ==  null)reset();	  	non-compiled	[CE]  ';'  expected	33	None	add
332	[BUG]  [BUGGY]  options.put(i,  option);  [CE]  cannot  find  symbol  i  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.put(i,  option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.put(i,  option);	  if(option!=    null)    {    reset();    }    Option    option    =    options.get(i);    if(option!=    null)    {    reset();    }    	non-compiled	[CE]  cannot  find  symbol  i	143	None	replace
333	[BUG]  [BUGGY]  if(option!=  null)  {  for(final  Option  option  :  options.keySet())  {  reset();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  for(final  Option  option  :  options.keySet())  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  for(final  Option  option  :  options.keySet())  {  reset();  }	  if(option!=    null)    {    reset();    }    Option    option    =    options.get(option);    if(option!=    null)    {    reset();    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
334	[BUG]  [BUGGY]  if(option!=  null)return  option;  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)return  option;  Option  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)return    option;    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	128	None	add
335	[BUG]  [BUGGY]  Option  option  =  options.get(option.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(option.next());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(option.next());	  Option    option    =    options.get(i.next()    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	59	None	replace
336	[BUG]  [BUGGY]  else  if(option!=  null)reset();  if(option!=  null)reset();  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  else  if(option!=  null)reset();  if(option!=  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option!=  null)reset();  if(option!=  null)reset();  }	  if(option    ==    null)reset();    if(option!=    null)reset();    }    	non-compiled	[CE]  'else'  without  'if'	86	None	replace
337	[BUG]  [BUGGY]  Options  option  =(Option)options.get(i);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  option  =(Option)options.get(i);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  option  =(Option)options.get(i);	  options.clear();    Option    option    =(Option)options.get(i);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
338	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	46	None	add
339	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	46	None	add
340	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	46	None	add
341	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option!=    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	46	None	add
342	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
343	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
344	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	19	None	add
345	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	22	None	add
346	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
347	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
348	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	22	None	add
349	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	22	None	add
350	[BUG]  [BUGGY]  if(option  ==  null)reset();  Options  option  =  options.iterator().next();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  Options  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  Options  option  =  options.iterator().next();	  if(option    ==    null)reset();    Option    option    =    options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
351	[BUG]  [BUGGY]  Option  option  =(Option)options.get(optionId);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(optionId);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(optionId);	  Option    option    =(Option)options.get(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	125	None	replace
352	[BUG]  [BUGGY]  Options  option  =(Option)options.get(i.next());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  option  =(Option)options.get(i.next());	  options.clear();    Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
353	[BUG]  [BUGGY]  options.clear();  Option  option  =(Option)options.get(option.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  Option  option  =(Option)options.get(option.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  Option  option  =(Option)options.get(option.next());	  options.clear();    Option    option    =(Option)options.get(i.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	90	None	replace
354	[BUG]  [BUGGY]  Option  option  =  options.get(options.next()  -  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.next()  -  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.next()  -  1);	  Option    option    =    options.get(options.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	114	None	replace
355	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	26	None	add
356	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	26	None	add
357	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
358	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	26	None	add
359	[BUG]  [BUGGY]  Option  option  =  options.getOption(DefaultOptionBuilder.class,  abuilder);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(DefaultOptionBuilder.class,  abuilder);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(DefaultOptionBuilder.class,  abuilder);	  Option    option    =    options.getOption(DefaultOptionBuilder.class);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	93	None	replace
360	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	72	None	add
361	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
362	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
363	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
364	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
365	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
366	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
367	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	17	None	add
368	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
369	[BUG]  [BUGGY]  Option  option  =  options.get(i.next(),  options;  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(i.next(),  options;  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next(),  options;	  Option    option    =    options.get(i.next(),    options);    	non-compiled	[CE]  ')'  expected	57	None	replace
370	[BUG]  [BUGGY]  Option  option  =  options.get(i.next(),  Options.EMPTY);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(i.next(),  Options.EMPTY);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next(),  Options.EMPTY);	  Option    option    =    options.get(i.next(),    options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	57	None	replace
371	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	83	None	add
372	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	83	None	add
373	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	83	None	add
374	[BUG]  [BUGGY]  Options  option  =(Option)options.iterator().next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  option  =(Option)options.iterator().next();	  options.clear();    Option    option    =(Option)options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
375	[BUG]  [BUGGY]  else  if(option  ==  null)reset();  if(option!=  null)reset();  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  else  if(option  ==  null)reset();  if(option!=  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option  ==  null)reset();  if(option!=  null)reset();  }	  else    if(option!=    null)reset();    if(option    ==    null)reset();    }    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
376	[BUG]  [BUGGY]  else  if(option  ==  null)reset();  if(option  ==  null)reset();  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  else  if(option  ==  null)reset();  if(option  ==  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option  ==  null)reset();  if(option  ==  null)reset();  }	  else    if(option!=    null)reset();    if(option    ==    null)reset();    }    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
377	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	7	None	add
378	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	7	None	add
379	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	7	None	add
380	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	74	None	add
381	[BUG]  [BUGGY]  if(option!=  null)  {  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(       "       ");    }    If(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
382	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultOption,  obuilder);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(defaultOption,  obuilder);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(defaultOption,  obuilder);	  Option    option    =    options.getOption(defaultOption);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	44	None	replace
383	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  If(option!=  null)reset();  if(option!=  null)reset();  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  If(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=    null)reset();    If(option!=  null)reset();  if(option!=  null)reset();	  	non-compiled	[CE]  ';'  expected	31	None	add
384	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option  >=  null)reset();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=  null)reset();  if(option!=  null)reset();  if(option  >=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=    null)reset();    if(option!=  null)reset();  if(option  >=  null)reset();	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	31	None	add
385	[BUG]  [BUGGY]  Options  option  =(Option)options.get(option);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  option  =(Option)options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  option  =(Option)options.get(option);	  options.clear();    Option    option    =(Option)options.get(option);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
386	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	5	None	add
387	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	5	None	add
388	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	5	None	add
389	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	39	1	add
390	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( ".   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	39	1	add
391	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  throw  new  IllegalStateException( "   ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(option  ==  null)reset();  if(option!=  null)  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(option  ==  null)reset();  if(option!=  null)  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	add
392	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	28	None	add
393	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	28	None	add
394	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	28	None	add
395	[BUG]  [BUGGY]  if(option  ==  null)reset();  If(option!=  null)reset();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  If(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  If(option!=  null)reset();	  if(option!=    null)reset();    If(option!=    null)reset();    	non-compiled	[CE]  ';'  expected	35	None	replace
396	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
397	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	48	1	add
398	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	48	None	add
399	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	48	None	add
400	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	48	None	add
401	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	115	None	add
402	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	115	None	add
403	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	115	None	add
404	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    Option  option  =  options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	115	None	add
405	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    If(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	132	None	add
406	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	68	None	add
407	[BUG]  [BUGGY]  Options  option  =(Option)options.get(i);  options.clear();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  option  =(Option)options.get(i);  options.clear();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  option  =(Option)options.get(i);  options.clear();	  options.clear();    Option    option    =(Option)options.get(i);    options.clear();    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
408	[BUG]  [BUGGY]  Options  option  =(Option)options.get(option);  options.clear();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  option  =(Option)options.get(option);  options.clear();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  option  =(Option)options.get(option);  options.clear();	  options.clear();    Option    option    =(Option)options.get(option);    options.clear();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
409	[BUG]  [BUGGY]  Option  option  =(Option)options.get(option).clone();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(option).clone();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(option).clone();	  Option    option    =(Option)options.get(option).next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	124	None	replace
410	[BUG]  [BUGGY]  Options  option  =  options.iterator().next();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Options  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Options  option  =  options.iterator().next();	  if(option!=    null)    {    reset();    }    Option    option    =    options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
411	[BUG]  [BUGGY]  options.clear();    options.clear();  Option  option  =(Option)options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();    options.clear();  Option  option  =(Option)options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();        options.clear();    Option  option  =(Option)options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	87	None	add
412	[BUG]  [BUGGY]  options.add(option);  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  Option  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	add
413	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]        IllegalArgumentException      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option  >=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    If(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	131	None	replace
414	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    If(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  	144	None	add
415	[BUG]  [BUGGY]  options.clear();  Option  option  =  new  DefaultOptionBuilder();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  Option  option  =  new  DefaultOptionBuilder();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  Option  option  =  new  DefaultOptionBuilder();	  options.clear();    Options    options    =    new    DefaultOptionBuilder();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	134	None	replace
416	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }  [CE]  missing  return  value  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }	  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=    null)reset();    if(option    ==    null)    {    reset();    return;    }    	non-compiled	[CE]  missing  return  value	139	None	replace
417	[BUG]  [BUGGY]  if(option!=  null)opt.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  opt  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)opt.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)opt.reset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)this.reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  opt	137	None	replace
418	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	66	None	add
419	[BUG]  [BUGGY]  Option  option  =(Option)options.get(i.intValue()  +  1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)options.get(i.intValue()  +  1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)options.get(i.intValue()  +  1);	  Option    option    =(Option)options.get(i.intValue());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	100	None	replace
420	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.addAll(options);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	options.addAll(options);	  options.add(option);    	compilable	  [FE]  ComparisonFailure  	2	1	replace
421	[BUG]  [BUGGY]  options.addAll(options);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.addAll(options);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.addAll(options);	  options.add(option);    	compilable	  [FE]  ComparisonFailure  	2	1	replace
422	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =  options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =  options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	24	None	add
423	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	add
424	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  Option  option  =(Option)options.iterator().next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    Option  option  =(Option)options.iterator().next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	24	None	add
425	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	24	1	add
426	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)reset();	  	compilable	  [FE]  ComparisonFailure  	24	1	add
427	[BUG]  [BUGGY]  if(option  ==  null)return  option;  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  option;  Option  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)return    option;    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	148	None	add
428	[BUG]  [BUGGY]  option  =(Option)options.iterator();  [CE]  variable  option  might  already  have  been  assigned  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =(Option)options.iterator();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =(Option)options.iterator();	  option    =(Option)options.iterator().next();    	non-compiled	[CE]  variable  option  might  already  have  been  assigned	54	None	replace
429	[BUG]  [BUGGY]  if(option!=  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)tryReset();  if(!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ".);  }	  if(option!=    null)tryReset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
430	[BUG]  [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION)+  1;  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION)+  1;  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(Option.OPTIONAL_OPTION)+  1;	  Option    option    =    options.get(Option.OPTIONAL_OPTION);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	147	None	replace
431	[BUG]  [BUGGY]  Option  option  =  options.get(DefaultOptionBuilder.OPTIONAL_OPTION);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(DefaultOptionBuilder.OPTIONAL_OPTION);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(DefaultOptionBuilder.OPTIONAL_OPTION);	  Option    option    =    options.get(Option.OPTIONAL_OPTION);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	147	None	replace
432	[BUG]  [BUGGY]  Option  option  =  options.get(options.size()  -  2);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.size()  -  2);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.size()  -  2);	  Option    option    =    options.get(options.size()    -    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	94	None	replace
433	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "     ");  }  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	64	None	add
434	[BUG]  [BUGGY]  else  if(option  ==  null)reset();  if(option  ==  null)reset();  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  else  if(option  ==  null)reset();  if(option  ==  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option  ==  null)reset();  if(option  ==  null)reset();	  if(option    ==    null)reset();    if(option    ==    null)reset();    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
435	[BUG]  [BUGGY]  else  if(option  ==  null)reset();  if(option!=  null)reset();  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  else  if(option  ==  null)reset();  if(option!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	else  if(option  ==  null)reset();  if(option!=  null)reset();	  if(option    ==    null)reset();    if(option    ==    null)reset();    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
436	[BUG]  [BUGGY]  options.iterator().next();  Options  options  =  options.iterator().next();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  Options  options  =  options.iterator().next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();    Options  options  =  options.iterator().next();	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
437	[BUG]  [BUGGY]  options.iterator().next();  Option  option  =  options.get(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  Option  option  =  options.get(option);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();    Option  option  =  options.get(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	62	None	add
438	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    If(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	15	None	add
439	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
440	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	24	1	add
441	[BUG]  [BUGGY]  timeout  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }	  	compilable	timeout	24	1	add
442	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }  timeout  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }	  	compilable	timeout	24	1	add
443	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  if(option  ==  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=  null)  {  if(option  ==  null)reset();  }	  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    If(option    ==    null)reset();    if(option!=    null)    {    reset();    }    	compilable	  [FE]  ComparisonFailure  	9	1	replace
444	[BUG]  [BUGGY]  if(option!=  null)  {  if(option  ==  null)reset();  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  if(option  ==  null)reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  if(option  ==  null)reset();  }	  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    If(option    ==    null)reset();    if(option!=    null)    {    reset();    }    	compilable	  [FE]  ComparisonFailure  	9	1	replace
445	[BUG]  [BUGGY]  options.put(option.getKey(),  option);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.put(option.getKey(),  option);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.put(option.getKey(),  option);	  options.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
446	[BUG]  [BUGGY]  options.clear();  option  =(Option)options.get(option);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();  option  =(Option)options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();  option  =(Option)options.get(option);	  options.clear();    Option    option    =(Option)options.get(option);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
447	[BUG]  [BUGGY]  Option  option  =(Option)i.next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)i.next();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)i.next();	  options.add(option);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	2	None	replace
448	[BUG]  [BUGGY]  option  =  options.iterator(),  i.next();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =  options.iterator(),  i.next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =  options.iterator(),  i.next();	  option    option    =    options.iterator().next();    	non-compiled	[CE]  ';'  expected	107	None	replace
449	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(i.toString());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                    ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(i.toString());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(i.toString());	  Option    option    =(Option)this.options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	55	None	replace
450	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(i.intValue);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =(Option)this.options.get(i.intValue);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =(Option)this.options.get(i.intValue);	  Option    option    =(Option)this.options.get(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	55	None	replace
451	[BUG]  [BUGGY]  if(option!=  null  ||!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null  ||!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null  ||!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)opt();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
452	[BUG]  [BUGGY]  if(option!=  null  &&!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null  &&!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null  &&!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)opt();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
453	[BUG]  [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(i);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)  {  reset();  }  Option  option  =  options.get(i);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)    {    reset();    }    Option  option  =  options.get(i);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	83	None	add
454	[BUG]  [BUGGY]  Option  option  =  options.getOption(i,  obuilder);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(i,  obuilder);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(i,  obuilder);	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	43	None	replace
455	[BUG]  [BUGGY]  if(option!=  null)  {  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  if(option!=  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    If(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
456	[BUG]  [BUGGY]  Option  option  =  options.get( "option ");  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get( "option ");  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get( "option ");	  if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	145	None	replace
457	[BUG]  [BUGGY]  if(option  ==  null  ||!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null  ||!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null  ||!option.hasOption(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    null)reset();    if(!option.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
458	[BUG]  [BUGGY]  options.add(option);  Option  option  =(Option)options.get(i.next());  options.add(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  Option  option  =(Option)options.get(i.next());  options.add(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);    Option  option  =(Option)options.get(i.next());  options.add(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	add
459	[BUG]  [BUGGY]  options.add(option);  Option  option  =(Option)this.options.get(i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]      NullPointerException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.add(option);  Option  option  =(Option)this.options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.add(option);    Option  option  =(Option)this.options.get(i.next());	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	1	None	add
460	[BUG]  [BUGGY]  Option  option  =  options.get(option).next();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(option).next();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(option).next();	  Option    option    =(Option)options.get(option).next();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	124	None	replace
461	[BUG]  [BUGGY]  Option  option  =  options.get(options.next(),  options.cloneTree());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(options.next(),  options.cloneTree());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(options.next(),  options.cloneTree());	  Option    option    =    options.get(options.next());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	114	None	replace
462	[BUG]  [BUGGY]  Option  option  =  options.get(i.next(),  i.next());  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                      ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(i.next(),  i.next());  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(i.next(),  i.next());	  Option    option    =    options.get(i.next()    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	59	None	replace
463	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
464	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "   ");    }    If(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  	39	None	add
465	[BUG]  [BUGGY]  if(option!=  null)reset();  option  =  options.get(option);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  option  =  options.get(option);	  if(option!=    null)reset();    Option    option    =    options.get(option);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
466	[BUG]  [BUGGY]  if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  Option  option  =(Option)i.next();  reset();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  Option  option  =(Option)i.next();  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  Option  option  =(Option)i.next();  reset();  }	  if(option!=    null)    {    reset();    }    Option    option    =    options.get(i);    if(option!=    null)    {    reset();    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
467	[BUG]  [BUGGY]  Option  option  =  options.get(null,  null);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(null,  null);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(null,  null);	  Option    option    =    options.get(null);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	12	None	replace
468	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
469	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	17	1	add
470	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
471	[BUG]  [BUGGY]  if(option!=  null)reset();  if(!options.containsKey(option))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(!options.containsKey(option))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(!options.containsKey(option))  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)reset();    if(!options.hasOption(option))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
472	[BUG]  [BUGGY]  if(opt!=  null)reset();  [CE]  cannot  find  symbol  opt  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(opt!=  null)reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(opt!=  null)reset();	  if(option    ==    null)reset();    if(option!=    null)reset();    	non-compiled	[CE]  cannot  find  symbol  opt	79	None	replace
473	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  return  options;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  return  options;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  return  options;  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	add
474	[BUG]  [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  return  option;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)    {    reset();    }    if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  return  option;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)        {        reset();        }        if(option    ==    null)    {    reset();    }    if(option!=  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  return  option;  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	add
475	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  return;  }  [CE]  missing  return  value  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)reset();  if(option  ==  null)  {  reset();  return;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  return;  }	  	non-compiled	[CE]  missing  return  value	115	None	add
476	[BUG]  [BUGGY]  option  =  options.get(option);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =  options.get(option);  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =  options.get(option);	  if(option!=    null)    {    reset();    }    Option    option    =    options.get(option);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
477	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
478	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
479	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
480	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
481	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
482	[BUG]  [BUGGY]  options.clear();    options.clear();  Option  option  =  obuilder.create();  [CE]  variable  option  is  already  defined  in  method  create()  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.clear();    options.clear();  Option  option  =  obuilder.create();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.clear();        options.clear();    Option  option  =  obuilder.create();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	87	None	add
483	[BUG]  [BUGGY]  Option  option  =  options.getOption(Option.OPTIONAL_OPTION);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]            ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.getOption(Option.OPTIONAL_OPTION);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.getOption(Option.OPTIONAL_OPTION);	  Option    option    =    options.get(Option.OPTIONAL_OPTION);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	147	None	replace
484	[BUG]  [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  options);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(Option.OPTIONAL_OPTION,  options);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(Option.OPTIONAL_OPTION,  options);	  Option    option    =    options.get(Option.OPTIONAL_OPTION);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	147	None	replace
485	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)reset();    if(option!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    If(option  ==  null)reset();  if(option!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	13	None	add
486	[BUG]  [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  else  {  Option  option  =(Option)options.get(option);  if(option!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  else  {  Option  option  =(Option)options.get(option);  if(option!=  null)  {  continue;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.clear();  options.clear();  }  else  {  Option  option  =(Option)options.get(option);  if(option!=  null)  {  continue;  }	  options.clear();    options.clear();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
487	[BUG]  [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  else  {  Option  option  =(Option)options.get(option);  if(option!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  options.clear();  options.clear();  }  else  {  Option  option  =(Option)options.get(option);  if(option!=  null)  {  return  option;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  options.clear();  options.clear();  }  else  {  Option  option  =(Option)options.get(option);  if(option!=  null)  {  return  option;  }	  options.clear();    options.clear();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
488	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
489	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
490	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [CE]  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  If(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    If(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  	41	None	add
491	[BUG]  [BUGGY]  if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }  [CE]  missing  return  value  [FE]        ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)reset();  if(option!=  null)reset();  if(option  ==  null)  {  reset();  return;  }	  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=    null)reset();    if(option    ==    null)    {    reset();    return;    }    	non-compiled	[CE]  missing  return  value	139	None	replace
492	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
493	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
494	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
495	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
496	[BUG]  [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  }  if(option!=  null)  {  reset();  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option  ==  null)reset();  if(option!=  null)reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option        ==        null)reset();        if(option!=        null)        {        reset();        }        if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)reset();  }  if(option!=  null)  {  reset();  }	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
497	[BUG]  [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)reset();  if(option  ==  null)  {  throw  new  IllegalStateException( " ".);  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(option!=    null)reset();    if(option    ==    null)    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
498	[BUG]  [BUGGY]  if(option  ==  null)return  option;  if(option  ==  null)return  option;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  option;  if(option  ==  null)return  option;  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option    ==    null)return    option;    if(option  ==  null)return  option;  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	148	None	add
499	[BUG]  [BUGGY]  Option  option  =  options.get(1);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  options.get(1);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  options.get(1);	  Option    option    =    options.get(0);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	82	None	replace
500	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(option);  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  Option  option  =  this.options.getOption(option);  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	Option  option  =  this.options.getOption(option);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	45	None	replace
501	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
502	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
503	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
504	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	19	1	add
505	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option    ==    null)    {    reset();    }    if(option  ==  null)reset();  if(option  ==  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option        ==        null)        {        reset();        }        if(option    ==    null)reset();    if(option    ==    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();  }  if(option  ==  null)  {  reset();	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
506	[BUG]  [BUGGY]  if(option  ==  null)return  options;  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option  ==  null)return  options;  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option  ==  null)return  options;	  if(option    ==    null)return    option;    	non-compiled	[CE]  incompatible  types	149	None	replace
507	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
508	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
509	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
510	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option  ==  null)reset();  if(option!=  null)  {  reset();  }	  	compilable	  [FE]  ComparisonFailure  	28	1	add
511	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	add	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }	  	compilable	timeout	28	1	add
512	[BUG]  [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }  timeout  [FE]        ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=    null)reset();    if(option!=    null)    {    reset();    }    if(option  ==  null)reset();  if(option!=  null)  {  reset();  }  if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=        null)reset();        if(option!=        null)        {        reset();        }        if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    if(option!=  null)reset();  if(option!=  null)  {  reset();  }  while(option!=  null)  {  reset();  }	  	compilable	timeout	28	1	add
513	[BUG]  [BUGGY]  if(option!=  null)  {  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  if(option!=  null)  {  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	if(option!=  null)  {  if(option!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(       "       ");    }    If(option!=    null)reset();    if(option!=    null)    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
514	[BUG]  [BUGGY]  option  =  options.get(i.next());  [CE]  cannot  find  symbol  i  [FE]              ComparisonFailure      [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  option  =  options.get(i.next());  [BUGGY]        return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	option  =  options.get(i.next());	  if(option    ==    null)reset();    if(option!=    null)    {    reset();    }    Option    option    =    options.get(i.next());    	non-compiled	[CE]  cannot  find  symbol  i	99	None	replace
515	[BUG]  [BUGGY]  options.iterator().next();  Options  options  =  options.iterator();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();  for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }      [BUGGY]  options.iterator().next();  Options  options  =  options.iterator();  [BUGGY]      reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	87	87	1	replace	options.iterator().next();    Options  options  =  options.iterator();	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
