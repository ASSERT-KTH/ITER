bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
2	[BUG]  [BUGGY]  For(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
3	[BUG]  [BUGGY]  Option  i  =(Option)options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =(Option)options.get(1);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)options.get(1);	  Option    i    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
4	[BUG]  [BUGGY]  Option  i  =(Option)this.options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =(Option)this.options.get(0);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)this.options.get(0);	  Option    i    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
5	[BUG]  [BUGGY]  Option  options  =  abuilder.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  abuilder.getOptions();  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  abuilder.getOptions();	  Option    options    =    obuilder.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
6	[BUG]  [BUGGY]  Option  options  =  obuilder.getOptions(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  obuilder.getOptions(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  obuilder.getOptions(option);	  Option    options    =    obuilder.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
7	[BUG]  [BUGGY]  for(final  Option  option  =  options.getOption(option);  option.hasNext();)  {  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  =  options.getOption(option);  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  =  options.getOption(option);  option.hasNext();)  {	  for(final    Option    i    =    options.getOption(option);    i.hasNext();)    {    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	72	None	replace
8	[BUG]  [BUGGY]  for(final  Option  option  :  options.getOption(option);  option.hasNext();)  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  :  options.getOption(option);  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  :  options.getOption(option);  option.hasNext();)  {	  for(final    Option    i    =    options.getOption(option);    i.hasNext();)    {    	non-compiled	[CE]  ')'  expected	72	None	replace
9	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption((  Option)option,  options);  }	  if(option    ==    null)    {    gbuilder.withOption((    Option)option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
10	[BUG]  [BUGGY]  for(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  i  [FE]        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  i	33	None	replace
11	[BUG]  [BUGGY]  Option  options  =  abuilder.getOptions(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  abuilder.getOptions(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  abuilder.getOptions(option);	  Option    options    =    abuilder.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
12	[BUG]  [BUGGY]  Option  options  =  abuilder.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  abuilder.getOption(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  abuilder.getOption(option);	  Option    options    =    abuilder.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
13	[BUG]  [BUGGY]  gbuilder.setOption(this.option,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(this.option,  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(this.option,  option);	  gbuilder.setOption(this.option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
14	[BUG]  [BUGGY]  if(this.option!=  null)  {  gbuilder.setOption(this.option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(this.option!=  null)  {  gbuilder.setOption(this.option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(this.option!=  null)  {  gbuilder.setOption(this.option);  }	  gbuilder.setOption(this.option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
15	[BUG]  [BUGGY]  gbuilder.setOption(this.option,  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(this.option,  options);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(this.option,  options);	  gbuilder.setOption(this.option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
16	[BUG]  [BUGGY]  for(final  Option  option  =  options.keySet().iterator();  option.hasNext();)  {  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  =  options.keySet().iterator();  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  =  options.keySet().iterator();  option.hasNext();)  {	  for(final    Option    i    =    options.keySet().iterator();    i.hasNext();)    {    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	20	None	replace
17	[BUG]  [BUGGY]  For(final  Option  i  =  options.keySet().iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.keySet().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.keySet().iterator();  i.hasNext();)  {	  for(final    Option    i    =    options.keySet().iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
18	[BUG]  [BUGGY]  gbuilder.setOption(option,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(option,  null);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  null);	  gbuilder.setOption(null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
19	[BUG]  [BUGGY]  gbuilder.setOption(null,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(null,  null);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(null,  null);	  gbuilder.setOption(null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
20	[BUG]  [BUGGY]  option  =(Option)options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  option  =(Option)options.get(1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	option  =(Option)options.get(1);	  option    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
21	[BUG]  [BUGGY]  gbuilder.setOption(option,  options.clone());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(option,  options.clone());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  options.clone());	  gbuilder.setOption(option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
22	[BUG]  [BUGGY]  gbuilder.setOption(option,  options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(option,  options.size());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  options.size());	  gbuilder.setOption(option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
23	[BUG]  [BUGGY]  gbuilder.setOption(option,  options.toArray(options));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(option,  options.toArray(options));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  options.toArray(options));	  gbuilder.setOption(option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
24	[BUG]  [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option,  options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option,  options);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option,  options);  }	  if(option    instanceof    Option)    {    gbuilder.withOption((    Option)option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
25	[BUG]  [BUGGY]  Option  options  =  gbuilder.getOptions(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  gbuilder.getOptions(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  gbuilder.getOptions(option);	  Option    options    =    gbuilder.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
26	[BUG]  [BUGGY]  Option  options  =  gbuilder.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  gbuilder.getOption(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  gbuilder.getOption(option);	  Option    options    =    gbuilder.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
27	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.setOption(option;  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.setOption(option;  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.setOption(option;  }	  gbuilder.setOption(option;    	non-compiled	[CE]  ')'  expected	49	None	replace
28	[BUG]  [BUGGY]  if(option  ==  null)  {  gbuilder.setOption(option;  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option  ==  null)  {  gbuilder.setOption(option;  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  ==  null)  {  gbuilder.setOption(option;  }	  gbuilder.setOption(option;    	non-compiled	[CE]  ')'  expected	49	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.size()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.getOption(options.size()  -  1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOption(options.size()  -  1);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.getOption(null);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOption(null);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
33	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size()  -  1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.size()  -  1);	  gbuilder.withOption((    Option)options.get(0),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
34	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size()  +  1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.size()  +  1);	  gbuilder.withOption((    Option)options.get(0),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
35	[BUG]  [BUGGY]  gbuilder.withOption(options.get(0),  options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(options.get(0),  options.size());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(options.get(0),  options.size());	  gbuilder.withOption((    Option)options.get(0),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
36	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }	  if(option    instanceof    Option)    {    gbuilder.withOption((    Option)option);    }    else    {    gbuilder.setOption((    Option)option);    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
37	[BUG]  [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option,  (Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option,  (Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option,  (Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }	  if(option    instanceof    Option)    {    gbuilder.withOption((    Option)option);    }    else    {    gbuilder.setOption((    Option)option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
38	[BUG]  [BUGGY]  for(final  Option  i  =  options.list().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  i  =  options.list().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.list().iterator();  i.hasNext();)  {	  for(final    Option    i    =    options.entrySet().iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
39	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.iterator();  i.hasNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  i  =  options.iterator();  i.hasNext())  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.iterator();  i.hasNext())  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext());)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
40	[BUG]  [BUGGY]  For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext());)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext());)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext());)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext());)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
41	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option,  options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option,  options);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption(option,  options);  }	  if(option!=    null)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
42	[BUG]  [BUGGY]  if(option!=  null  ||  options.size()  ==  1)  {  gbuilder.withOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null  ||  options.size()  ==  1)  {  gbuilder.withOption(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null  ||  options.size()  ==  1)  {  gbuilder.withOption(option);  }	  if(option!=    null)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
43	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option,  options.clone());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option,  options.clone());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option,  options.clone());	  gbuilder.withOption((    Option)option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
44	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option,  options.cloneTree());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option,  options.cloneTree());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option,  options.cloneTree());	  gbuilder.withOption((    Option)option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
45	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option,  options.toArray(new  Option[options.size()  ]));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option,  options.toArray(new  Option[options.size()  ]));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option,  options.toArray(new  Option[options.size()  ]));	  gbuilder.withOption((    Option)option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
46	[BUG]  [BUGGY]  if(option.hasNext())  {  gbuilder.withOption((  Option)option.next());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.hasNext())  {  gbuilder.withOption((  Option)option.next());  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.hasNext())  {  gbuilder.withOption((  Option)option.next());  }	  gbuilder.withOption((    Option)option.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
47	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option.getValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option.getValue());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option.getValue());	  gbuilder.withOption((    Option)option.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
48	[BUG]  [BUGGY]  if(option.hasNext())  {  gbuilder.withOption((  Option)option.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.hasNext())  {  gbuilder.withOption((  Option)option.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.hasNext())  {  gbuilder.withOption((  Option)option.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  gbuilder.withOption((    Option)option.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
49	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    null)    {    gbuilder.withOption((    Option)option);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
50	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    null)    {    gbuilder.withOption((    Option)option);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
51	[BUG]  [BUGGY]  Option  options  =(Option)this.options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)this.options.get(1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)this.options.get(1);	  Option    options    =(Option)options.get(1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
52	[BUG]  [BUGGY]  Option  options  =(Option)options.get(2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)options.get(2);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)options.get(2);	  Option    options    =(Option)options.get(1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
53	[BUG]  [BUGGY]  gbuilder.withOption((  Option)this.options.get(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)this.options.get(0));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)this.options.get(0));	  gbuilder.withOption((    Option)this.options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
54	[BUG]  [BUGGY]  gbuilder.withOption((  Option)this.options.get(0),  options.get(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)this.options.get(0),  options.get(1));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)this.options.get(0),  options.get(1));	  gbuilder.withOption((    Option)this.options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
55	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)this.options.get(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)this.options.get(1));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)this.options.get(1));	  gbuilder.withOption((    Option)this.options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
56	[BUG]  [BUGGY]  gbuilder.withOption((  Option)this.options.get(0),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)this.options.get(0),  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)this.options.get(0),  option);	  gbuilder.withOption((    Option)this.options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
57	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =(Option)this.options.get(2);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)this.options.get(2);	  Option    option    =(Option)options.get(2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
58	[BUG]  [BUGGY]  if(opt!=  null)  {  gbuilder.setOption(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(opt!=  null)  {  gbuilder.setOption(opt);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(opt!=  null)  {  gbuilder.setOption(opt);  }	  gbuilder.setOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
59	[BUG]  [BUGGY]  if(opt!=  null)  {  gbuilder.setOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(opt!=  null)  {  gbuilder.setOption(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(opt!=  null)  {  gbuilder.setOption(option);  }	  gbuilder.setOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
60	[BUG]  [BUGGY]  Option  options  =  options.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  options.getOption(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  options.getOption(option);	  Option    options    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.get(options.size()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.get(options.size()  +  1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(options.size()  +  1);	  Option    option    =    options.get(options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
62	[BUG]  [BUGGY]  for(final  Iterator  it  =  options.iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  i  [FE]        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Iterator  it  =  options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  it  =  options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final    Iterator    it    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  i	67	None	replace
63	[BUG]  [BUGGY]  For(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final    Iterator    it    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
64	[BUG]  [BUGGY]  if(options.size()!=  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.size()!=  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()!=  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
65	[BUG]  [BUGGY]  if(options.size()  >  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.size()  >  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()  >  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
66	[BUG]  [BUGGY]  if(option.size()  ==  1)  {  gbuilder.withOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.size()  ==  1)  {  gbuilder.withOption(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.size()  ==  1)  {  gbuilder.withOption(option);  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
67	[BUG]  [BUGGY]  if(options.size()  ==  2)  {  gbuilder.withOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.size()  ==  2)  {  gbuilder.withOption(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()  ==  2)  {  gbuilder.withOption(option);  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
68	[BUG]  [BUGGY]  if(i.hasNext())  {  gbuilder.withOption((  Option)i.next());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(i.hasNext())  {  gbuilder.withOption((  Option)i.next());  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(i.hasNext())  {  gbuilder.withOption((  Option)i.next());  }	  gbuilder.withOption((    Option)i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
69	[BUG]  [BUGGY]  if(i.hasNext())  {  gbuilder.withOption((  Option)i.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(i.hasNext())  {  gbuilder.withOption((  Option)i.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(i.hasNext())  {  gbuilder.withOption((  Option)i.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  gbuilder.withOption((    Option)i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
70	[BUG]  [BUGGY]  for(final  Option  option  :  options.get(options.size()  -  1);  option.hasNext();)  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  :  options.get(options.size()  -  1);  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  :  options.get(options.size()  -  1);  option.hasNext();)  {	  for(final    Option    i    =    options.get(options.size()    -    1);    i.hasNext();)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
71	[BUG]  [BUGGY]  for(final  Option  option  =  options.get(options.size()  -  1);  option.hasNext();)  {  [CE]  variable  option  is  already  defined  in  method  create()  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  =  options.get(options.size()  -  1);  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  =  options.get(options.size()  -  1);  option.hasNext();)  {	  for(final    Option    i    =    options.get(options.size()    -    1);    i.hasNext();)    {    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	21	None	replace
72	[BUG]  [BUGGY]  For(final  Option  i  =  options.get(options.size()  -  1);  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.get(options.size()  -  1);  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.get(options.size()  -  1);  i.hasNext();)  {	  for(final    Option    i    =    options.get(options.size()    -    1);    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
73	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =(Option)this.options.get(1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)this.options.get(1);	  Option    option    =(Option)this.options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
74	[BUG]  [BUGGY]  option  =(Option)this.options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  option  =(Option)this.options.get(0);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	option  =(Option)this.options.get(0);	  Option    option    =(Option)this.options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
75	[BUG]  [BUGGY]  For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext())  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext())  {	  For(final    Iterator    <    Option>    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
76	[BUG]  [BUGGY]  For(final  Option  option  =  options.iterator();  option.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  option  =  options.iterator();  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  option  =  options.iterator();  option.hasNext();)  {	  For(final    Iterator    <    Option>    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
77	[BUG]  [BUGGY]  if(option.get()!=  null)  {  gbuilder.withOption((  Option)option.get());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.get()!=  null)  {  gbuilder.withOption((  Option)option.get());  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.get()!=  null)  {  gbuilder.withOption((  Option)option.get());  }	  gbuilder.withOption((    Option)option.get());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
78	[BUG]  [BUGGY]  if(option.get()  instanceof  Option)  {  gbuilder.withOption((  Option)option.get());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.get()  instanceof  Option)  {  gbuilder.withOption((  Option)option.get());  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.get()  instanceof  Option)  {  gbuilder.withOption((  Option)option.get());  }	  gbuilder.withOption((    Option)option.get());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
79	[BUG]  [BUGGY]  if(option.get()  ==  null)  {  gbuilder.withOption((  Option)option.get());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.get()  ==  null)  {  gbuilder.withOption((  Option)option.get());  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.get()  ==  null)  {  gbuilder.withOption((  Option)option.get());  }	  gbuilder.withOption((    Option)option.get());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
80	[BUG]  [BUGGY]  gbuilder.withOption(options.get(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(options.get(0));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(options.get(0));	  gbuilder.withOption((    Option)options.get(2));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
81	[BUG]  [BUGGY]  if(options.get(0)!=  null)  {  gbuilder.withOption((  Option)options.get(1));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.get(0)!=  null)  {  gbuilder.withOption((  Option)options.get(1));  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.get(0)!=  null)  {  gbuilder.withOption((  Option)options.get(1));  }	  gbuilder.withOption((    Option)options.get(2));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
82	[BUG]  [BUGGY]  if(options.get(0)!=  null)  {  gbuilder.withOption((  Option)options.get(2));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.get(0)!=  null)  {  gbuilder.withOption((  Option)options.get(2));  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.get(0)!=  null)  {  gbuilder.withOption((  Option)options.get(2));  }	  gbuilder.withOption((    Option)options.get(2));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
83	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(1),  options.size()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(1),  options.size()  -  1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(1),  options.size()  -  1);	  gbuilder.withOption((    Option)options.get(1),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
84	[BUG]  [BUGGY]  gBuilder.setOption(option,  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gBuilder.setOption(option,  options);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gBuilder.setOption(option,  options);	  gBuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
85	[BUG]  [BUGGY]  gBuilder.setOption(option,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gBuilder.setOption(option,  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gBuilder.setOption(option,  option);	  gBuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
86	[BUG]  [BUGGY]  gBuilder.setOption(option,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gBuilder.setOption(option,  true);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gBuilder.setOption(option,  true);	  gBuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
87	[BUG]  [BUGGY]  Option  options  =(Option)this.allOptions.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)this.allOptions.get(0);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)this.allOptions.get(0);	  Option    options    =(Option)allOptions.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
88	[BUG]  [BUGGY]  Option  i  =  options.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  options.getOption();  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  options.getOption();	  Option    i    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
89	[BUG]  [BUGGY]  option  i  =  option.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  option  i  =  option.getOption();  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	option  i  =  option.getOption();	  Option    i    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
90	[BUG]  [BUGGY]  Option  i  =  option.getOption(this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  option.getOption(this);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  option.getOption(this);	  Option    i    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
91	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption,  gbuilder);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.get(defaultOption,  gbuilder);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(defaultOption,  gbuilder);	  Option    option    =    options.get(defaultOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.get(defaultOption,  0);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(defaultOption,  0);	  Option    option    =    options.get(defaultOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
93	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.get(defaultOption  +  1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(defaultOption  +  1);	  Option    option    =    options.get(defaultOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
94	[BUG]  [BUGGY]  for(final  Option  option  :  options.iterator();  option.hasNext())  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  :  options.iterator();  option.hasNext())  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  :  options.iterator();  option.hasNext())  {	  for(final    Option    option    :    options.iterator();    option.hasNext();)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
95	[BUG]  [BUGGY]  for(final  Option  option  :  options.values();  option.hasNext();)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  :  options.values();  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  :  options.values();  option.hasNext();)  {	  for(final    Option    option    :    options.iterator();    option.hasNext();)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
96	[BUG]  [BUGGY]  for(final  Option  option  :  options.values().iterator();  option.hasNext();)  {  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  :  options.values().iterator();  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  :  options.values().iterator();  option.hasNext();)  {	  for(final    Option    option    :    options.iterator();    option.hasNext();)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
97	[BUG]  [BUGGY]  for(final  Option  option  :  options.values());  option.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  :  options.values());  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  :  options.values());  option.hasNext();)  {	  for(final    Option    option    :    options.iterator();    option.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
98	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.get(2));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.get(2));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.get(2));	  gbuilder.withOption((    Option)options.get(0),    options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
99	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.get(1),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.get(1),  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.get(1),  option);	  gbuilder.withOption((    Option)options.get(0),    options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
100	[BUG]  [BUGGY]  gbuilder.withOption(options.get(0),  options.get(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(options.get(0),  options.get(1));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(options.get(0),  options.get(1));	  gbuilder.withOption((    Option)options.get(0),    options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
101	[BUG]  [BUGGY]  Option  i  =(Option)options.get(option.next());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =(Option)options.get(option.next());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)options.get(option.next());	  Option    i    =(Option)options.get(i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
102	[BUG]  [BUGGY]  Option  i  =(Option)options.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =(Option)options.get(option);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)options.get(option);	  Option    i    =(Option)options.get(i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
103	[BUG]  [BUGGY]  Option  i  =(Option)options.get(option.next()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =(Option)options.get(option.next()  -  1);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)options.get(option.next()  -  1);	  Option    i    =(Option)options.get(i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
104	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option);  }  else  {  options.remove(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option);  }  else  {  options.remove(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption(option);  }  else  {  options.remove(option);  }	  if(option!=    null)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
105	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  option);	  gbuilder.withOption((    Option)options.get(0),    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
106	[BUG]  [BUGGY]  gbuilder.withOption(options.get(0),  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(options.get(0),  options);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(options.get(0),  options);	  gbuilder.withOption((    Option)options.get(0),    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
107	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.clone());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.clone());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.clone());	  gbuilder.withOption((    Option)options.get(0),    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
108	[BUG]  [BUGGY]  Option  option  =(Option)this.allOptions.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =(Option)this.allOptions.get(0);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)this.allOptions.get(0);	  Option    option    =(Option)allOptions.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
109	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  i  =  options.iterator();  it.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.iterator();  it.hasNext();)  {	  For(final    Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
110	[BUG]  [BUGGY]  For(final  Option  i  =  options.iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.iterator();  it.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.iterator();  it.hasNext();)  {	  For(final    Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
111	[BUG]  [BUGGY]  For(final  Iterator  it  =  options.iterator();  it.hasNext()  &&  option.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  it  =  options.iterator();  it.hasNext()  &&  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  it  =  options.iterator();  it.hasNext()  &&  option.hasNext();)  {	  For(final    Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
112	[BUG]  [BUGGY]  Option  i  =  options.get(option  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  options.get(option  +  1);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  options.get(option  +  1);	  Option    i    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
113	[BUG]  [BUGGY]  Option  i  =  options.get(option.cloneTree());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  options.get(option.cloneTree());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  options.get(option.cloneTree());	  Option    i    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
114	[BUG]  [BUGGY]  For(final  Option  i  =  options.values().iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.values().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.values().iterator();  i.hasNext();)  {	  For(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
115	[BUG]  [BUGGY]  options  =(Option)this.options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  options  =(Option)this.options.get(0);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	options  =(Option)this.options.get(0);	  Option    options    =(Option)this.options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
116	[BUG]  [BUGGY]  Options  options  =(Option)this.options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Options  options  =(Option)this.options.get(0);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Options  options  =(Option)this.options.get(0);	  Option    options    =(Option)this.options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
117	[BUG]  [BUGGY]  Option  options  =(Option)gbuilder.getObject();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)gbuilder.getObject();  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)gbuilder.getObject();	  Option    options    =(Option)gbuilder.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
118	[BUG]  [BUGGY]  Option  options  =(Option)gbuilder.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)gbuilder.get(1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)gbuilder.get(1);	  Option    options    =(Option)gbuilder.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
119	[BUG]  [BUGGY]  Option  options  =  obuilder.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  obuilder.getOption(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  obuilder.getOption(option);	  Option    options    =    obuilder.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
120	[BUG]  [BUGGY]  Option  option  =  options.create();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.create();  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.create();	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
121	[BUG]  [BUGGY]  options.add(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  options.add(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	options.add(option);	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
122	[BUG]  [BUGGY]  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
123	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)i.next());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)i.next());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)i.next());	  gbuilder.withOption((    Option)i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
124	[BUG]  [BUGGY]  gBuilder.setOption(option;  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gBuilder.setOption(option;  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gBuilder.setOption(option;	  gBuilder.setOption(option);    	non-compiled	[CE]  ')'  expected	74	None	replace
125	[BUG]  [BUGGY]  For(final  Iterator  <  Option>  i  =  options.values().iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  <  Option>  i  =  options.values().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  <  Option>  i  =  options.values().iterator();  i.hasNext();)  {	  For(final    Iterator    <    Option>    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
126	[BUG]  [BUGGY]  For(final  Iterator  <  Option>  i  =  option.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  <  Option>  i  =  option.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  <  Option>  i  =  option.options.iterator();  i.hasNext();)  {	  For(final    Iterator    <    Option>    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
127	[BUG]  [BUGGY]  Option  option  =  options.withOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.withOption(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.withOption(option);	  if(option    ==    null)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
128	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.size()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.size()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.size()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    null)    {    gbuilder.withOption((    Option)option);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
129	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.next());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    null)    {    gbuilder.withOption((    Option)option);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
130	[BUG]  [BUGGY]  Option  option  =(Option)options.get(option.next());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =(Option)options.get(option.next());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)options.get(option.next());	  Option    i    =(Option)options.get(i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
131	[BUG]  [BUGGY]  Option  i  =  options.get(option.next());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  options.get(option.next());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  options.get(option.next());	  Option    i    =(Option)options.get(i.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
132	[BUG]  [BUGGY]  if(option.hasOption(option))  {  gbuilder.withOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.hasOption(option))  {  gbuilder.withOption(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.hasOption(option))  {  gbuilder.withOption(option);  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
133	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)options.get(1),  options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)options.get(1),  options.size());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)options.get(1),  options.size());	  gbuilder.withOption((    Option)options.get(1),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
134	[BUG]  [BUGGY]  For(final  Iterator  it  =  options.values().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  it  =  options.values().iterator();  it.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  it  =  options.values().iterator();  it.hasNext();)  {	  For(final    Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
135	[BUG]  [BUGGY]  For(final  Iterator  it  =  option.options.iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  it  =  option.options.iterator();  it.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  it  =  option.options.iterator();  it.hasNext();)  {	  For(final    Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
136	[BUG]  [BUGGY]  gbuilder.setOption(option,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(option,  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  option);	  gbuilder.setOption(option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
137	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)options.get(0),  options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)options.get(0),  options.size());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)options.get(0),  options.size());	  gbuilder.withOption((    Option)options.get(0),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
138	[BUG]  [BUGGY]  Option  option  =  option.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  option.getOption();  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  option.getOption();	  Option    i    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
139	[BUG]  [BUGGY]  Option  i  =  option.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  option.getOption(option);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  option.getOption(option);	  Option    i    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
140	[BUG]  [BUGGY]  if(option  instanceof  Option)  {  gbuilder.setOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option  instanceof  Option)  {  gbuilder.setOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  instanceof  Option)  {  gbuilder.setOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }	  if(option    instanceof    Option)    {    gbuilder.withOption((    Option)option);    }    else    {    gbuilder.setOption((    Option)option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
141	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption,  obuilder);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.get(defaultOption,  obuilder);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(defaultOption,  obuilder);	  Option    option    =    options.get(defaultOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
142	[BUG]  [BUGGY]  for(final  Option  i  =  option.keySet().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  i  =  option.keySet().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  option.keySet().iterator();  i.hasNext();)  {	  for(final    Option    i    =    options.keySet().iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
143	[BUG]  [BUGGY]  Option  i  =  options.get(options.size()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  options.get(options.size()  -  1);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  options.get(options.size()  -  1);	  Option    i    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
144	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)option);	  gbuilder.withOption((    Option)option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
145	[BUG]  [BUGGY]  Option  options  =  obuilder.createOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  obuilder.createOptions();  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  obuilder.createOptions();	  Option    options    =    obuilder.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
146	[BUG]  [BUGGY]  For(final  Option  i  =  options.getOption(option);  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.getOption(option);  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.getOption(option);  i.hasNext();)  {	  for(final    Option    i    =    options.getOption(option);    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
147	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.getOption(defaultOption);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOption(defaultOption);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
148	[BUG]  [BUGGY]  for(final  Option  i  =  options.getOptions().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  i  =  options.getOptions().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.getOptions().iterator();  i.hasNext();)  {	  for(final    Option    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
149	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  i  =  options.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.options.iterator();  i.hasNext();)  {	  For(final    Iterator    i    =    option.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
150	[BUG]  [BUGGY]  for(final  Iterator  i  =  allOptions.iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  allOptions  [FE]        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Iterator  i  =  allOptions.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  i  =  allOptions.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  allOptions	33	None	replace
151	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)options.get(2));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)options.get(2));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)options.get(2));	  gbuilder.withOption((    Option)options.get(2));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
152	[BUG]  [BUGGY]  gbuilder.withOption(option.get());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option.get());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option.get());	  gbuilder.withOption((    Option)option.get());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
153	[BUG]  [BUGGY]  if(option.get()!=  null)  {  gbuilder.withOption((  Option)option.get());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.get()!=  null)  {  gbuilder.withOption((  Option)option.get());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.get()!=  null)  {  gbuilder.withOption((  Option)option.get());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  gbuilder.withOption((    Option)option.get());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
154	[BUG]  [BUGGY]  Option  options  =  options.getOptions(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  options.getOptions(option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  options.getOptions(option);	  Option    options    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
155	[BUG]  [BUGGY]  Option  option  =  options.get(options.size()  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.get(options.size()  -  2);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(options.size()  -  2);	  Option    option    =    options.get(options.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
156	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.values().iterator();  i.hasNext());)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  i  =  options.values().iterator();  i.hasNext());)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.values().iterator();  i.hasNext());)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext());)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
157	[BUG]  [BUGGY]  if(option.hasOption(option))  {  gbuilder.withOption((  Option)option.next());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option.hasOption(option))  {  gbuilder.withOption((  Option)option.next());  }  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option.hasOption(option))  {  gbuilder.withOption((  Option)option.next());  }	  gbuilder.withOption((    Option)option.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
158	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option.clone());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option.clone());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option.clone());	  gbuilder.withOption((    Option)option.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
159	[BUG]  [BUGGY]  Option  options  =(Option)gbuilder.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)gbuilder.getOptions();  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)gbuilder.getOptions();	  Option    options    =(Option)gbuilder.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
160	[BUG]  [BUGGY]  Option  i  =(Option)options.get(option.size()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =(Option)options.get(option.size()  -  1);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)options.get(option.size()  -  1);	  Option    i    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
161	[BUG]  [BUGGY]  gbuilder.withOption(options,(Option)options.get(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(options,(Option)options.get(0));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(options,(Option)options.get(0));	  gbuilder.withOption((    Option)options.get(0),    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
162	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)options.get(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)options.get(0));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)options.get(0));	  gbuilder.withOption((    Option)options.get(0),    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
163	[BUG]  [BUGGY]  For(final  Option  i  =  options.get(option);  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.get(option);  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.get(option);  i.hasNext();)  {	  For(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
164	[BUG]  [BUGGY]  gbuilder.withOption(option,(Option)options.get(0),  options.get(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption(option,(Option)options.get(0),  options.get(1));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption(option,(Option)options.get(0),  options.get(1));	  gbuilder.withOption((    Option)options.get(0),    options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
165	[BUG]  [BUGGY]  gbuilder.setOption(options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(options);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(options);	  gbuilder.setOption(null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
166	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option,  option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption(option,  option);  }	  if(option!=    null)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
167	[BUG]  [BUGGY]  gbuilder.withOption((  Option)this.options.get(0),  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)this.options.get(0),  options);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)this.options.get(0),  options);	  gbuilder.withOption((    Option)this.options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
168	[BUG]  [BUGGY]  Option  options  =(Option)gbuilder.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)gbuilder.clone();  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)gbuilder.clone();	  Option    options    =(Option)gbuilder.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
169	[BUG]  [BUGGY]  Option  options  =(Option)gbuilder.getObject(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)gbuilder.getObject(0);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)gbuilder.getObject(0);	  Option    options    =(Option)gbuilder.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
170	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(option    ==    null)    {    gbuilder.withOption((    Option)option);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
171	[BUG]  [BUGGY]  for(final  Option  i  =  options.options.iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  options  [FE]        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  i  =  options.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.options.iterator();  i.hasNext();)  {	  for(final    Option    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  options	32	None	replace
172	[BUG]  [BUGGY]  Option  options  =(Option)allOptions.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =(Option)allOptions.get(1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)allOptions.get(1);	  Option    options    =(Option)allOptions.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
173	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size()  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size()  -  2);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.size()  -  2);	  gbuilder.withOption((    Option)options.get(0),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
174	[BUG]  [BUGGY]  For(final  Iterator  <  Option>  i  =  options.entrySet().iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  <  Option>  i  =  options.entrySet().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  <  Option>  i  =  options.entrySet().iterator();  i.hasNext();)  {	  For(final    Iterator    <    Option>    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
175	[BUG]  [BUGGY]  For(final  Iterator  <  Option>  i  =  option.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  <  Option>  i  =  option.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  <  Option>  i  =  option.iterator();  i.hasNext();)  {	  For(final    Iterator    <    Option>    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
176	[BUG]  [BUGGY]  for(final  Option  option  =  options.values().iterator();  option.hasNext();)  {  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  =  options.values().iterator();  option.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  =  options.values().iterator();  option.hasNext();)  {	  for(final    Option    i    =    options.values().iterator();    i.hasNext();)    {    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	55	None	replace
177	[BUG]  [BUGGY]  gbuilder.withOption((  Option)i.get());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)i.get());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)i.get());	  gbuilder.withOption((    Option)option.get());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
178	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.toArray(new  Option[options.size()  ]));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.toArray(new  Option[options.size()  ]));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.toArray(new  Option[options.size()  ]));	  gbuilder.withOption((    Option)options.get(0),    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
179	[BUG]  [BUGGY]  gbuilder.setOption(null,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(null,  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(null,  option);	  gbuilder.setOption(null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
180	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Iterator  <  Option>  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	add	for(final  Iterator  <  Option>  i  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final    Iterator    it    =    this.options.iterator();    i.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	67	1	replace
181	[BUG]  [BUGGY]  for(final  Iterator  <  Option>  i  =  this.options.iterator();  i.hasNext();)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Iterator  <  Option>  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  <  Option>  i  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final    Iterator    it    =    this.options.iterator();    i.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	67	1	replace
182	[BUG]  [BUGGY]  Option  option  =  gbuilder.withOption((  Option)option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  gbuilder.withOption((  Option)option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  gbuilder.withOption((  Option)option);	  if(option    instanceof    Option)    {    gbuilder.withOption((    Option)option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
183	[BUG]  [BUGGY]  For(final  Option  i  =  options.get(0);  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.get(0);  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.get(0);  i.hasNext();)  {	  For(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
184	[BUG]  [BUGGY]  For(final  Option  i  =  options.size();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Option  i  =  options.size();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.size();  i.hasNext();)  {	  For(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
185	[BUG]  [BUGGY]  if(option  ==  null)  {  gbuilder.withOption((  Option)option,  options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option  ==  null)  {  gbuilder.withOption((  Option)option,  options);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  ==  null)  {  gbuilder.withOption((  Option)option,  options);  }	  if(option    ==    null)    {    gbuilder.withOption((    Option)option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
186	[BUG]  [BUGGY]  Option  option  =  options.get(2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.get(2);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(2);	  Option    option    =    options.get(1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
187	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option,  option);  }  else  {  options.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option,  option);  }  else  {  options.add(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption(option,  option);  }  else  {  options.add(option);  }	  if(option!=    null)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
188	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(2),  options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)options.get(2),  options.size());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(2),  options.size());	  gbuilder.withOption((    Option)options.get(1),    options.size());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
189	[BUG]  [BUGGY]  gbuilder.setOption(option,  options.toArray(new  Option[options.size()  ]));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(option,  options.toArray(new  Option[options.size()  ]));  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  options.toArray(new  Option[options.size()  ]));	  gbuilder.setOption(option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
190	[BUG]  [BUGGY]  gbuilder.setOption(option,  options.cloneTree());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(option,  options.cloneTree());  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  options.cloneTree());	  gbuilder.setOption(option,    options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
191	[BUG]  [BUGGY]  Option  option  =(Option)allOptions.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =(Option)allOptions.get(1);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)allOptions.get(1);	  Option    option    =(Option)allOptions.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
192	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.withOption((  Option)option.getKey());  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option.getKey());	  gbuilder.withOption((    Option)option.next());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
193	[BUG]  [BUGGY]  if(option  ==  null)  {  gbuilder.withOption(option,  options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option  ==  null)  {  gbuilder.withOption(option,  options);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  ==  null)  {  gbuilder.withOption(option,  options);  }	  if(option    ==    null)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
194	[BUG]  [BUGGY]  Option  options  =  gbuilder.create();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  options  =  gbuilder.create();  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  gbuilder.create();	  Option    options    =    gbuilder.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
195	[BUG]  [BUGGY]  if(options.size()  ==  2)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.size()  ==  2)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()  ==  2)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
196	[BUG]  [BUGGY]  if(options.size()  ==  0)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.size()  ==  0)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()  ==  0)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    else    {    options.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
197	[BUG]  [BUGGY]  for(final  Option  option  =  options.getOption(option);  i.hasNext();)  {  [CE]  variable  option  is  already  defined  in  method  create()  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Option  option  =  options.getOption(option);  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  =  options.getOption(option);  i.hasNext();)  {	  for(final    Option    i    =    options.getOption(option);    i.hasNext();)    {    	non-compiled	[CE]  variable  option  is  already  defined  in  method  create()	72	None	replace
198	[BUG]  [BUGGY]  gBuilder.setOption(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gBuilder.setOption(opt);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gBuilder.setOption(opt);	  gBuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
199	[BUG]  [BUGGY]  gBuilder.setOptions(options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gBuilder.setOptions(options);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gBuilder.setOptions(options);	  gBuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
200	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.size());  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption((  Option)option,  options.size());  }	  if(option!=    null)    {    gbuilder.withOption((    Option)option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
201	[BUG]  [BUGGY]  For(final  Iterator  it  =  options.entrySet().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  For(final  Iterator  it  =  options.entrySet().iterator();  it.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  it  =  options.entrySet().iterator();  it.hasNext();)  {	  For(final    Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
202	[BUG]  [BUGGY]  for(final  Iterator  i  =  option.keySet().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  for(final  Iterator  i  =  option.keySet().iterator();  i.hasNext();)  {  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  i  =  option.keySet().iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    options.keySet().iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
203	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.setOption(option;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(option!=  null)  {  gbuilder.setOption(option;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.setOption(option;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  gbuilder.setOption(option;    	non-compiled	[CE]  	49	None	replace
204	[BUG]  [BUGGY]  Option  option  =  options.getOption( "option ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.getOption( "option ");  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOption( "option ");	  Option    option    =    options.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
205	[BUG]  [BUGGY]  gbuilder.setOption(opt,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  gbuilder.setOption(opt,  option);  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(opt,  option);	  gbuilder.setOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
206	[BUG]  [BUGGY]  if(options.size()  ==  1)  {  gbuilder.withOption(option,  options.iterator());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  if(options.size()  ==  1)  {  gbuilder.withOption(option,  options.iterator());  }  [BUGGY]      for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()  ==  1)  {  gbuilder.withOption(option,  options.iterator());  }	  if(options.size()    ==    1)    {    gbuilder.withOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
207	[BUG]  [BUGGY]  Option  option  =  options.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  option  =  options.getOption();  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOption();	  Option    i    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
208	[BUG]  [BUGGY]  Option  i  =  options.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();      [BUGGY]  Option  i  =  options.getOption(option);  [BUGGY]      gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  options.getOption(option);	  Option    i    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
