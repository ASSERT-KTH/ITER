bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option);  }	      gbuilder.withOption((    Option)option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
2	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option!=  null)  {  gbuilder.withOption((  Option)option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption((  Option)option);  }	      gbuilder.withOption((    Option)option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
3	[BUG]  [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  instanceof  Option)  {  gbuilder.withOption((  Option)option);  }  else  {  gbuilder.setOption((  Option)option);  }	      gbuilder.withOption((    Option)option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.get(options.size()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =  options.get(options.size()  -  1);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(options.size()  -  1);	      Option    option    =    options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =  options.get(1);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(1);	      Option    option    =    options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.get(defaultOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =  options.get(defaultOption);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(defaultOption);	      Option    option    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.get(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =  options.get(i);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(i);	      Option    option    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
8	[BUG]  [BUGGY]  gbuilder.setOption(this.option);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.setOption(this.option);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(this.option);	      gbuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
9	[BUG]  [BUGGY]  gbuilder.setOption(option,  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.setOption(option,  options);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option,  options);	      gbuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
10	[BUG]  [BUGGY]  gbuilder.setOption(null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.setOption(null);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(null);	      gbuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
11	[BUG]  [BUGGY]  For(final  Option  i  =  options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Option  i  =  options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Option  i  =  options.iterator();  i.hasNext();)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  For(final  Iterator  it  =  options.iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Iterator  it  =  options.iterator();  it.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  it  =  options.iterator();  it.hasNext();)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
13	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.iterator();  i.hasNext());)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Iterator  i  =  options.iterator();  i.hasNext());)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.iterator();  i.hasNext());)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
14	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(2));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)options.get(2));  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(2));	      gbuilder.withOption((    Option)options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
15	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(1),  options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)options.get(1),  options.size());  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(1),  options.size());	      gbuilder.withOption((    Option)options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
16	[BUG]  [BUGGY]  gbuilder.withOption((  Option)i.next());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)i.next());  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)i.next());	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
17	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option.next());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)option.next());  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option.next());	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
18	[BUG]  [BUGGY]  Option  i  =(Option)options.get(i.next());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  i  =(Option)options.get(i.next());  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)options.get(i.next());	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
19	[BUG]  [BUGGY]  Option  i  =  options.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  i  =  options.get(option);  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  options.get(option);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
20	[BUG]  [BUGGY]  for(final  Option  i  =  options.keySet().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Option  i  =  options.keySet().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.keySet().iterator();  i.hasNext();)  {	  for(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
21	[BUG]  [BUGGY]  for(final  Option  i  =  options.get(options.size()  -  1);  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Option  i  =  options.get(options.size()  -  1);  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.get(options.size()  -  1);  i.hasNext();)  {	  for(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  for(final  Option  option  :  options.iterator();  option.hasNext();)  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Option  option  :  options.iterator();  option.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  option  :  options.iterator();  option.hasNext();)  {	  for(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
23	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  options.getOptions();	      Option    options    =    option.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
24	[BUG]  [BUGGY]  Option  options  =  gbuilder.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =  gbuilder.getOptions();  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  gbuilder.getOptions();	      Option    options    =    option.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
25	[BUG]  [BUGGY]  Option  options  =  obuilder.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =  obuilder.getOptions();  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  obuilder.getOptions();	      Option    options    =    option.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
26	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption(option);  }	      gbuilder.withOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
27	[BUG]  [BUGGY]  if(options.size()  ==  1)  {  gbuilder.withOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(options.size()  ==  1)  {  gbuilder.withOption(option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()  ==  1)  {  gbuilder.withOption(option);  }	      gbuilder.withOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
28	[BUG]  [BUGGY]  if(options.size()  ==  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(options.size()  ==  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(options.size()  ==  1)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }	      gbuilder.withOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
29	[BUG]  [BUGGY]  Option  options  =(Option)this.options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =(Option)this.options.get(0);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)this.options.get(0);	      Option    options    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
30	[BUG]  [BUGGY]  Option  options  =(Option)gbuilder.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =(Option)gbuilder.get(0);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)gbuilder.get(0);	      Option    options    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
31	[BUG]  [BUGGY]  Option  options  =(Option)allOptions.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =(Option)allOptions.get(0);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)allOptions.get(0);	      Option    options    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
32	[BUG]  [BUGGY]  for(final  Option  i  =  this.options.iterator();  i.hasNext();)  {  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Option  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  this.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  incompatible  types	2	None	replace
33	[BUG]  [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
34	[BUG]  [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  For(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  For(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    For(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
35	[BUG]  [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
36	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.size());  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.size());	      gbuilder.withOption((    Option)options.get(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
37	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.get(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options.get(1));  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options.get(1));	      gbuilder.withOption((    Option)options.get(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
38	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =(Option)this.options.get(0);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)this.options.get(0);	      Option    option    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
39	[BUG]  [BUGGY]  Option  option  =(Option)options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =(Option)options.get(1);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)options.get(1);	      Option    option    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
40	[BUG]  [BUGGY]  Option  option  =(Option)allOptions.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =(Option)allOptions.get(0);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)allOptions.get(0);	      Option    option    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
41	[BUG]  [BUGGY]  Option  options  =  gbuilder.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =  gbuilder.get(option);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  gbuilder.get(option);	      Option    options    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
42	[BUG]  [BUGGY]  Option  options  =  abuilder.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =  abuilder.get(option);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  abuilder.get(option);	      Option    options    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
43	[BUG]  [BUGGY]  Option  options  =  obuilder.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =  obuilder.get(option);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  obuilder.get(option);	      Option    options    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
44	[BUG]  [BUGGY]  for(final  Iterator  i  =  options.keySet().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  options.keySet().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  i  =  options.keySet().iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    options.values().iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
45	[BUG]  [BUGGY]  for(final  Iterator  i  =  options.entrySet().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  options.entrySet().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  i  =  options.entrySet().iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    options.values().iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.get(options.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =  options.get(options.size());  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.get(options.size());	      Option    option    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
47	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =  options.getOptions();	      Option    options    =    option.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
48	[BUG]  [BUGGY]  for(final  Iterator  i  =  options.options.iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  options  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  options.options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Iterator  i  =  options.options.iterator();  i.hasNext();)  {	  for(final    Iterator    i    =    option.options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  options	11	None	replace
49	[BUG]  [BUGGY]  gbuilder.setOption(option;  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.setOption(option;  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(option;	      gbuilder.setOption(option);    	non-compiled	[CE]  ')'  expected	16	None	replace
50	[BUG]  [BUGGY]  gbuilder.setOption(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.setOption(opt);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.setOption(opt);	      gbuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
51	[BUG]  [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final  Iterator  i  =  options.iterator();  i.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
52	[BUG]  [BUGGY]  Option  option  =(Option)options.get(2);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  option  =(Option)options.get(2);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  option  =(Option)options.get(2);	      Option    option    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
53	[BUG]  [BUGGY]  option  =(Option)options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  option  =(Option)options.get(0);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	option  =(Option)options.get(0);	      Option    option    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
54	[BUG]  [BUGGY]  Option  options  =(Option)options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =(Option)options.get(1);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =(Option)options.get(1);	      Option    options    =(Option)options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
55	[BUG]  [BUGGY]  for(final  Option  i  =  options.values().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Option  i  =  options.values().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.values().iterator();  i.hasNext();)  {	  for(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
56	[BUG]  [BUGGY]  for(final  Option  i  =  options.entrySet().iterator();  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Option  i  =  options.entrySet().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.entrySet().iterator();  i.hasNext();)  {	  for(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
57	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.values().iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Iterator  i  =  options.values().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.values().iterator();  i.hasNext();)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
58	[BUG]  [BUGGY]  For(final  Iterator  i  =  option.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Iterator  i  =  option.options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  option.options.iterator();  i.hasNext();)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.keySet().iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Iterator  i  =  options.keySet().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.keySet().iterator();  i.hasNext();)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
60	[BUG]  [BUGGY]  Option  i  =  option.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  i  =  option.getOption();  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =  option.getOption();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
61	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option.get());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)option.get());  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option.get());	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
62	[BUG]  [BUGGY]  if(option  ==  null)  {  gbuilder.withOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option  ==  null)  {  gbuilder.withOption(option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  ==  null)  {  gbuilder.withOption(option);  }	      gbuilder.withOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
63	[BUG]  [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option!=  null)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option!=  null)  {  gbuilder.withOption(option);  }  else  {  options.add(option);  }	      gbuilder.withOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
64	[BUG]  [BUGGY]  if(option  ==  null)  {  gbuilder.withOption((  Option)option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option  ==  null)  {  gbuilder.withOption((  Option)option);  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  ==  null)  {  gbuilder.withOption((  Option)option);  }	      gbuilder.withOption((    Option)option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
65	[BUG]  [BUGGY]  gbuilder.withOption((  Option)option,  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)option,  options);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)option,  options);	      gbuilder.withOption((    Option)option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
66	[BUG]  [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)options.get(0),  options);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)options.get(0),  options);	      gbuilder.withOption((    Option)options.get(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
67	[BUG]  [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  for(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Iterator  i  =  this.options.iterator();  i.hasNext();)  {  for(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final    Iterator    i    =    this.options.iterator();    i.hasNext();)    {    for(final  Iterator  it  =  this.options.iterator();  i.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
68	[BUG]  [BUGGY]  gbuilder.withOption((  Option)this.options.get(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gbuilder.withOption((  Option)this.options.get(1));  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gbuilder.withOption((  Option)this.options.get(1));	      gbuilder.withOption((    Option)options.get(1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
69	[BUG]  [BUGGY]  For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  <  Option>  i  =  options.iterator();  i.hasNext();)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  For(final  Iterator  i  =  options.entrySet().iterator();  i.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  For(final  Iterator  i  =  options.entrySet().iterator();  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	For(final  Iterator  i  =  options.entrySet().iterator();  i.hasNext();)  {	  For(final    Iterator    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
71	[BUG]  [BUGGY]  Option  options  =  option.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  options  =  option.get(option);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  options  =  option.get(option);	      Option    options    =    options.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
72	[BUG]  [BUGGY]  for(final  Option  i  =  options.getOption(option);  i.hasNext();)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  for(final  Option  i  =  options.getOption(option);  i.hasNext();)  {  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	for(final  Option  i  =  options.getOption(option);  i.hasNext();)  {	  for(final    Option    i    =    options.iterator();    i.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
73	[BUG]  [BUGGY]  Option  i  =(Option)options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  Option  i  =(Option)options.get(0);  [BUGGY]    gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	Option  i  =(Option)options.get(0);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
74	[BUG]  [BUGGY]  gBuilder.setOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  gBuilder.setOption(option);  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	gBuilder.setOption(option);	      gbuilder.setOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
75	[BUG]  [BUGGY]  if(option  ==  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Option  create()  {  final  Option  option;  if  (options.size()  ==  1)  {  option  =  (Option)options.iterator().next();  }  else  {  gbuilder.reset();    [BUGGY]  if(option  ==  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (final  Iterator  i  =  options.iterator();  i.hasNext();)  {  gbuilder.withOption((Option)i.next());  }  option  =  gbuilder.create();  }  reset();  return  option;  }  [CLASS]  PatternBuilder  [METHOD]  create  [RETURN_TYPE]  Option  [VARIABLES]  Set  options  boolean  ArgumentBuilder  abuilder  GroupBuilder  gbuilder  Iterator  i  DefaultOptionBuilder  obuilder  Option  option  	projects/Cli7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java	1.0	81	81	1	replace	if(option  ==  null)  {  gbuilder.withOption((  Option)option);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      gbuilder.withOption((    Option)option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
