bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  isInfinite  ==  other.isInfinite())  {  return  isInfinite;  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  ||  isInfinite  ==  other.isInfinite())  {  return  isInfinite;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  isInfinite  ==  other.isInfinite())  {  return  isInfinite;	      &&    isInfinite    ==    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  &&  isInfinite  ==  other.isInfinite())  {  return  isNaN;  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  &&  isInfinite  ==  other.isInfinite())  {  return  isNaN;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  isInfinite  ==  other.isInfinite())  {  return  isNaN;	      &&    isInfinite    ==    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  &&  other.isInfinite())  {  return  isNaN  ||  isInfinite;  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  &&  other.isInfinite())  {  return  isNaN  ||  isInfinite;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  other.isInfinite())  {  return  isNaN  ||  isInfinite;	      &&    other.isInfinite())    {    return    isInfinite    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
4	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isInfinite  ||  isNaN;  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  ||  other.isInfinite())  {  return  isInfinite  ||  isNaN;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isInfinite  ||  isNaN;	      &&    other.isInfinite())    {    return    isInfinite    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  Complex  c  =  this.get(other);  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  Complex  c  =  this.get(other);  [BUGGY]    if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	Complex  c  =  this.get(other);	  Complex    c    =    other.get(this);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
6	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  [CE]  ';'  expected  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  if(other  instanceof  Complex)  {  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  instanceof  Complex)  {	      if(other    instanceof    Complex)    {    Complex    c    =(Complex)other;    if(isNaN    ||    isInfinite)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  if(!(other  instanceof  Complex))  {  if(other  instanceof  Complex)  {  return  false;  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  if(!(other  instanceof  Complex))  {  if(other  instanceof  Complex)  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(!(other  instanceof  Complex))  {  if(other  instanceof  Complex)  {  return  false;  }	      if(other    instanceof    Complex)    {    Complex    c    =(Complex)other;    if(isNaN    ||    isInfinite)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  ((  Complex)other).getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  ((  Complex)other).getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	((  Complex)other).getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }	      if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	2	None	replace
9	[BUG]  [BUGGY]  if(other.getClass()  ==  getClass())  {  return  false;  }  [CE]  cannot  find  symbol  c  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  if(other.getClass()  ==  getClass())  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other.getClass()  ==  getClass())  {  return  false;  }	      if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  c	4	None	replace
10	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "   ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	1	2	add
11	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "   ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "   ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	1	2	add
12	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "   ");  }  if(other.getClass()  >=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "   ");  }  if(other.getClass()  >=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ");    }    if(other.getClass()  >=  getClass())  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	1	None	add
13	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	5	1	add
14	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	5	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	5	2	add
16	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [FE]  AssertionError  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	5	2	add
17	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  >=  getClass())  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  >=  getClass())  {  return  true;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  >=  getClass())  {  return  true;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	add
18	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	3	2	add
19	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	3	2	add
20	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	3	16	add
21	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	3	16	add
22	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  >=  getClass())  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  >=  getClass())  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  >=  getClass())  {  return  false;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	add
23	[BUG]  [BUGGY]  &&  other.isInfinite())  {  return  isNaN;  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  &&  other.isInfinite())  {  return  isNaN;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  other.isInfinite())  {  return  isNaN;	      &&    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isNaN;  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  ||  other.isInfinite())  {  return  isNaN;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isNaN;	      &&    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
25	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(!isInfinite)  {  return  isNaN;  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(!isInfinite)  {  return  isNaN;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(!isInfinite)  {  return  isNaN;  }	      if(other    instanceof    Complex)    {    Complex    c    =(Complex)other;    if(isInfinite)    {    return    isNaN;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite  ||  isNaN)  {  return  false;  }  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite  ||  isNaN)  {  return  false;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite  ||  isNaN)  {  return  false;  }	      if(other    instanceof    Complex)    {    Complex    c    =(Complex)other;    if(isNaN    ||    isInfinite)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
27	[BUG]  [BUGGY]  &&  isInfinite.isInfinite())  {  return  isInfinite  ||  isInfinite;  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  &&  isInfinite.isInfinite())  {  return  isInfinite  ||  isInfinite;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  isInfinite.isInfinite())  {  return  isInfinite  ||  isInfinite;	      &&    other.isInfinite())    {    return    isInfinite    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isInfinite;  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  ||  other.isInfinite())  {  return  isInfinite;  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isInfinite;	      &&    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]      if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "   ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]      if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "   ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	1	None	add
30	[BUG]  [BUGGY]  if(other.getClass()  ==  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  c  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  if(other.getClass()  ==  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other.getClass()  ==  getClass())  {  throw  new  IllegalArgumentException( " ");  }	      if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  c	2	None	replace
31	[BUG]  [BUGGY]  if(other.getClass()  ==  getClass())  {  return  true;  }  [CE]  cannot  find  symbol  c  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){    [BUGGY]  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]    Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other.getClass()  ==  getClass())  {  return  true;  }	      if(other.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  c	6	None	replace
