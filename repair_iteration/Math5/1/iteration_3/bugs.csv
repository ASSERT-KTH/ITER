bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.checkState(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Context.checkState(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Context.checkState(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
2	[BUG]  [BUGGY]  Context.checkState(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Context.checkState(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Context.checkState(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=    0.0)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
3	[BUG]  [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected	  return    ONE;    java.lang.AssertionError:    expected    	non-compiled	[CE]  not  a  statement	8	None	replace
4	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(1.0  [FE]          java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary  ==  0.0)  {  return  ONE;  }  else  if(imaginary  ==  0.0)  {  return  NaN;  }	  return    ONE;    java.lang.AssertionError:    expected    	compilable	  [FE]  java.lang.AssertionError:  expected:<(1.0  	8	1	replace
5	[BUG]  [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  if(imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(1.0  [FE]          java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0)  {  return  ONE;  }  else  if(imaginary  ==  0.0)  {  return  NaN;  }	  return    ONE;    java.lang.AssertionError:    expected    	compilable	  [FE]  java.lang.AssertionError:  expected:<(1.0  	8	1	replace
6	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  double  denominator  =  Math.abs(imaginary  -  1);  [CE]  variable  denominator  is  already  defined  in  method  reciprocal()  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  double  denominator  =  Math.abs(imaginary  -  1);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double    denominator    =    Math.abs(imaginary    -    1);    double  denominator  =  Math.abs(imaginary  -  1);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  reciprocal()	16	None	add
7	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  Double  denominator  =  Math.abs(imaginary  -  1);  [CE]  variable  denominator  is  already  defined  in  method  reciprocal()  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  Double  denominator  =  Math.abs(imaginary  -  1);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double    denominator    =    Math.abs(imaginary    -    1);    Double  denominator  =  Math.abs(imaginary  -  1);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  reciprocal()	16	None	add
8	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  java.lang.AssertionError:  expected  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  java.lang.AssertionError:  expected  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double    denominator    =    Math.abs(imaginary    -    1);    java.lang.AssertionError:  expected	  	non-compiled	[CE]  not  a  statement	16	None	add
9	[BUG]  [BUGGY]  double  denominator  =  getDenominator()  /  imaginary;  [CE]  cannot  find  symbol  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  getDenominator()  /  imaginary;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator()  /  imaginary;	  double    denominator    =    getDenominator()    -    imaginary;    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
10	[BUG]  [BUGGY]  double  denominator  =  getDenominator()  *  imaginary;  [CE]  cannot  find  symbol  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  getDenominator()  *  imaginary;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator()  *  imaginary;	  double    denominator    =    getDenominator()    -    imaginary;    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
11	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  /  1);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	double  denominator  =  Math.abs(imaginary  /  1);	  double    denominator    =    Math.abs(imaginary    +    1);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	31	1	replace
12	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  /  1);  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  /  1);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary  /  1);	  double    denominator    =    Math.abs(imaginary    +    1);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	31	1	replace
13	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	add
14	[BUG]  [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	add
15	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	add
16	[BUG]  [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	add
17	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  ||  imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	add
18	[BUG]  [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary  >=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  ||  imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  ||  imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	add
19	[BUG]  [BUGGY]  Real  =  divisor.evaluate(Divisor.NaN);  [CE]  cannot  find  symbol  Real  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Real  =  divisor.evaluate(Divisor.NaN);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  divisor.evaluate(Divisor.NaN);	  Real    =    real.evaluate(Divisor.NaN);    	non-compiled	[CE]  cannot  find  symbol  Real	38	None	replace
20	[BUG]  [BUGGY]  Real  =  imaginary.evaluate(Divisor.NaN);  [CE]  cannot  find  symbol  Real  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Real  =  imaginary.evaluate(Divisor.NaN);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  imaginary.evaluate(Divisor.NaN);	  Real    =    real.evaluate(Divisor.NaN);    	non-compiled	[CE]  cannot  find  symbol  Real	38	None	replace
21	[BUG]  [BUGGY]  if(divisor  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  divisor  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(divisor  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(divisor  ==  0.0)  {  return  NaN;  }	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(Imaginary    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol  divisor	35	None	replace
22	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	25	1	add
23	[BUG]  [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	25	1	add
24	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	25	1	add
25	[BUG]  [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	25	1	add
26	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  &&  imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	25	1	add
27	[BUG]  [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary  >=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0  &&  imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0  &&  imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	25	1	add
28	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  double  denominator  =  Math.abs(imaginary  +  1);  [CE]  variable  denominator  is  already  defined  in  method  reciprocal()  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  double  denominator  =  Math.abs(imaginary  +  1);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double    denominator    =    Math.abs(imaginary    +    1);    double  denominator  =  Math.abs(imaginary  +  1);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  reciprocal()	30	None	add
29	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  Double  denominator  =  Math.abs(imaginary  +  1);  [CE]  variable  denominator  is  already  defined  in  method  reciprocal()  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  Double  denominator  =  Math.abs(imaginary  +  1);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double    denominator    =    Math.abs(imaginary    +    1);    Double  denominator  =  Math.abs(imaginary  +  1);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  reciprocal()	30	None	add
30	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  java.lang.AssertionError:  expected  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  java.lang.AssertionError:  expected  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double    denominator    =    Math.abs(imaginary    +    1);    java.lang.AssertionError:  expected	  	non-compiled	[CE]  not  a  statement	30	None	add
31	[BUG]  [BUGGY]  double  denominator  =  getDenominator().denominator()  -  1;  [CE]  cannot  find  symbol  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  getDenominator().denominator()  -  1;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator().denominator()  -  1;	  double    denominator    =    getDenominator().denominator();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
32	[BUG]  [BUGGY]  Context.checkState(imaginary  ==  0.0);  [CE]  cannot  find  symbol  Context  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Context.checkState(imaginary  ==  0.0);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Context.checkState(imaginary  ==  0.0);	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary    {    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol  Context	27	None	replace
33	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	19	1	add
34	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	19	1	add
35	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	19	1	add
36	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	19	1	add
37	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  Imaginary  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(Imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Imaginary	19	None	add
38	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
39	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
40	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
41	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
42	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
43	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
44	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(isNaN)  {  return  NaN;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(isNaN)  {  return  NaN;  }	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	36	1	replace
45	[BUG]  [BUGGY]  if(isNaN)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(isNaN)  {  return  NaN;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(isNaN)  {  return  NaN;  }	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	36	1	replace
46	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]          java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(isNaN)  {  return  ONE;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(isNaN)  {  return  ONE;  }	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	36	1	replace
47	[BUG]  [BUGGY]  if(isNaN)  {  return  ONE;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]          java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(isNaN)  {  return  ONE;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(isNaN)  {  return  ONE;  }	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	36	1	replace
48	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Double  denominator  =  Math.abs(imaginary);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	Double  denominator  =  Math.abs(imaginary);	          double    denominator    =    Math.abs(imaginary);    Double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	7	1	replace
49	[BUG]  [BUGGY]  Double  denominator  =  Math.abs(imaginary);  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Double  denominator  =  Math.abs(imaginary);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Double  denominator  =  Math.abs(imaginary);	          double    denominator    =    Math.abs(imaginary);    Double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	7	1	replace
50	[BUG]  [BUGGY]  return  NaN;  expected  =  true;  [CE]  cannot  find  symbol  expected  [FE]            java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  return  NaN;  expected  =  true;  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return  NaN;  expected  =  true;	  return    ONE;    java.lang.AssertionError:    expected    =    true;    	non-compiled	[CE]  cannot  find  symbol  expected	10	None	replace
51	[BUG]  [BUGGY]  if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  }	          double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:    expected    	non-compiled	[CE]  not  a  statement	6	None	replace
52	[BUG]  [BUGGY]  if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  }  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  }	          double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:    expected    	non-compiled	[CE]  not  a  statement	6	None	replace
53	[BUG]  [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(Divisor.NaN))  {  return  NaN;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(Divisor.NaN))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null  ||  imaginary.equals(Divisor.NaN))  {  return  NaN;  }	  if(imaginary    ==    null    ||    imaginary.equals(NaN))    {    return    NaN;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	40	None	replace
54	[BUG]  [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(divisor))  {  return  NaN;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(divisor))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null  ||  imaginary.equals(divisor))  {  return  NaN;  }	  if(imaginary    ==    null    ||    imaginary.equals(NaN))    {    return    NaN;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	40	None	replace
55	[BUG]  [BUGGY]  Real  =  divisor.evaluate(real);  [CE]  cannot  find  symbol  Real  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Real  =  divisor.evaluate(real);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  divisor.evaluate(real);	  Real    =    real.evaluate(divisor);    	non-compiled	[CE]  cannot  find  symbol  Real	2	None	replace
56	[BUG]  [BUGGY]  NegativeAssertionError  e  =  new  NegativeAssertionError();  [CE]  cannot  find  symbol  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  NegativeAssertionError  e  =  new  NegativeAssertionError();  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	NegativeAssertionError  e  =  new  NegativeAssertionError();	  if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
57	[BUG]  [BUGGY]  NegativeAssertionError  e  =  new  NegativeAssertionError( "NaN  is  not  an  infinite  type ");  [CE]  cannot  find  symbol  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  NegativeAssertionError  e  =  new  NegativeAssertionError( "NaN  is  not  an  infinite  type ");  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	NegativeAssertionError  e  =  new  NegativeAssertionError( "NaN  is  not  an  infinite  type ");	  if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
58	[BUG]  [BUGGY]  double  denominator  =  getDenominator(),  imaginary.denominator;  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  getDenominator(),  imaginary.denominator;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator(),  imaginary.denominator;	  double    denominator    =    getDenominator().denominator;    	non-compiled	[CE]  ';'  expected	14	None	replace
59	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	1	add
60	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	1	add
61	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	1	add
62	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	1	add
63	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >>  0.0)  {  return  NaN;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >>  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >>  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
64	[BUG]  [BUGGY]  double  divisor  =  Math.abs(imaginary)/  scale;  [CE]  cannot  find  symbol  scale  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  divisor  =  Math.abs(imaginary)/  scale;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  divisor  =  Math.abs(imaginary)/  scale;	  double    denominator    =    Math.abs(imaginary)/    divisor;    	non-compiled	[CE]  cannot  find  symbol  scale	3	None	replace
65	[BUG]  [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected;  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected;  }	  return    ONE;    java.lang.AssertionError:    expected;    	non-compiled	[CE]  not  a  statement	9	None	replace
66	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  divisor  =  Math.abs(imaginary);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	double  divisor  =  Math.abs(imaginary);	  double    denominator    =    Math.abs(divisor);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	1	replace
67	[BUG]  [BUGGY]  double  divisor  =  Math.abs(imaginary);  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  divisor  =  Math.abs(imaginary);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  divisor  =  Math.abs(imaginary);	  double    denominator    =    Math.abs(divisor);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	1	replace
68	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  divisor  =  Math.abs(real);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	double  divisor  =  Math.abs(real);	  double    denominator    =    Math.abs(divisor);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	1	replace
69	[BUG]  [BUGGY]  double  divisor  =  Math.abs(real);  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  divisor  =  Math.abs(real);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  divisor  =  Math.abs(real);	  double    denominator    =    Math.abs(divisor);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	1	replace
70	[BUG]  [BUGGY]  if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected;  }  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected;  }	          double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:    expected;    	non-compiled	[CE]  not  a  statement	34	None	replace
71	[BUG]  [BUGGY]  if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected;  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected;  }	          double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:    expected;    	non-compiled	[CE]  not  a  statement	34	None	replace
72	[BUG]  [BUGGY]  return  Negative.NaN  ||  imaginary;  [CE]  cannot  find  symbol  Negative  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  return  Negative.NaN  ||  imaginary;  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return  Negative.NaN  ||  imaginary;	  return    Negative.NaN;    	non-compiled	[CE]  cannot  find  symbol  Negative	15	None	replace
73	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary)/  ONE;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary)/  ONE;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary)/  ONE;	  double    denominator    =    Math.abs(imaginary)/    ZERO;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	28	None	replace
74	[BUG]  [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected  =  true;  }  [CE]  cannot  find  symbol  expected  [FE]            java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected  =  true;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected  =  true;  }	  return    ONE;    java.lang.AssertionError:    expected    =    true;    	non-compiled	[CE]  cannot  find  symbol  expected	10	None	replace
75	[BUG]  [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  ASSERT  =  expected  =  true;  }  [CE]  cannot  find  symbol  ASSERT  [FE]              java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  ASSERT  =  expected  =  true;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0)  {  return  ONE;  }  else  {  ASSERT  =  expected  =  true;  }	  return    ONE;    java.lang.AssertionError:    expected    =    true;    	non-compiled	[CE]  cannot  find  symbol  ASSERT	10	None	replace
76	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	22	1	replace
77	[BUG]  [BUGGY]  if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0  ||  imaginary!=  0.0)  {  return  NaN;  }	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	22	1	replace
78	[BUG]  [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  Imaginary  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(Imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Imaginary	25	None	add
79	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(0.0  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  return  ZERO;  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	return  ZERO;	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(0.0  	36	1	replace
80	[BUG]  [BUGGY]  return  ZERO;  [FE]  java.lang.AssertionError:  expected:<(0.0  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  return  ZERO;  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return  ZERO;	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(0.0  	36	1	replace
81	[BUG]  [BUGGY]  NegativeMap.this.add(real);  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  NegativeMap.this.add(real);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	NegativeMap.this.add(real);	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary    {    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
82	[BUG]  [BUGGY]  Annotation  <?>  real  =  imaginary;  [CE]  cannot  find  symbol  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Annotation  <?>  real  =  imaginary;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Annotation  <?>  real  =  imaginary;	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary    {    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
83	[BUG]  [BUGGY]  double  divisor  =  Math.abs(imaginary)/  addend;  [CE]  cannot  find  symbol  addend  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  divisor  =  Math.abs(imaginary)/  addend;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  divisor  =  Math.abs(imaginary)/  addend;	  double    denominator    =    Math.abs(imaginary)/    divisor;    	non-compiled	[CE]  cannot  find  symbol  addend	3	None	replace
84	[BUG]  [BUGGY]  if(imaginary!=  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected;  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary!=  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary!=  0.0)  {  return  ONE;  }  else  {  AssertionError:  expected;  }	  return    ONE;    java.lang.AssertionError:    expected;    	non-compiled	[CE]  not  a  statement	9	None	replace
85	[BUG]  [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  Imaginary  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Imaginary	11	None	add
86	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(real  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(real  ==  0.0)  {  return  NaN;  }	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(Imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	35	1	replace
87	[BUG]  [BUGGY]  if(real  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(real  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(real  ==  0.0)  {  return  NaN;  }	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(Imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	35	1	replace
88	[BUG]  [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(real))  {  return  NaN;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(real))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null  ||  imaginary.equals(real))  {  return  NaN;  }	  if(imaginary    ==    null    ||    imaginary.equals(NaN))    {    return    NaN;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	40	None	replace
89	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
90	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
91	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  real  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary  ==  0.0  &&  real  ==  0.0)  {  return  NaN;  }	  if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	26	1	replace
92	[BUG]  [BUGGY]  if(imaginary  ==  0.0  &&  real  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  0.0  &&  real  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0  &&  real  ==  0.0)  {  return  NaN;  }	  if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	26	1	replace
93	[BUG]  [BUGGY]  double  denominator  =  getDenominator(),  imaginary.denominator();  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  getDenominator(),  imaginary.denominator();  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator(),  imaginary.denominator();	  double    denominator    =    getDenominator().denominator();    	non-compiled	[CE]  ';'  expected	37	None	replace
94	[BUG]  [BUGGY]  if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary!=  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected	          double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:    expected    	non-compiled	[CE]  not  a  statement	6	None	replace
95	[BUG]  [BUGGY]  if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null)  {  double  denominator  =  Math.abs(imaginary);  AssertionError:  expected	          double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:    expected    	non-compiled	[CE]  not  a  statement	6	None	replace
96	[BUG]  [BUGGY]  Real  =  imaginary.evaluate(imaginary);  [CE]  cannot  find  symbol  Real  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Real  =  imaginary.evaluate(imaginary);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  imaginary.evaluate(imaginary);	  Real    =    imaginary.evaluate(real);    	non-compiled	[CE]  cannot  find  symbol  Real	1	None	replace
97	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  Imaginary  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Imaginary	19	None	add
98	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	1	add
99	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	1	add
100	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >>  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >>  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    >=    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >>  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
101	[BUG]  [BUGGY]  return  INF;  expected  =  true;  [CE]  cannot  find  symbol  expected  [FE]            java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  return  INF;  expected  =  true;  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return  INF;  expected  =  true;	  return    ONE;    java.lang.AssertionError:    expected    =    true;    	non-compiled	[CE]  cannot  find  symbol  expected	10	None	replace
102	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary)+  1;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	double  denominator  =  Math.abs(imaginary)+  1;	  double    denominator    =    Math.abs(imaginary    +    1);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	31	1	replace
103	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary)+  1;  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary)+  1;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary)+  1;	  double    denominator    =    Math.abs(imaginary    +    1);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	31	1	replace
104	[BUG]  [BUGGY]  if(imaginary  ==  null  ||  imaginary.isNaN())  {  return  INF;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null  ||  imaginary.isNaN())  {  return  INF;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null  ||  imaginary.isNaN())  {  return  INF;  }	  if(imaginary    ==    null)    {    return    INF;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	33	None	replace
105	[BUG]  [BUGGY]  Neighbor  <?>  real  =  imaginary;  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Neighbor  <?>  real  =  imaginary;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Neighbor  <?>  real  =  imaginary;	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary    {    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
106	[BUG]  [BUGGY]  Annotation  <?>  real  =  imaginary.next();  [CE]  cannot  find  symbol  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Annotation  <?>  real  =  imaginary.next();  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Annotation  <?>  real  =  imaginary.next();	          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary    {    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
107	[BUG]  [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(NaN)||  imaginary.equals(NaN))  {  return  NaN;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(NaN)||  imaginary.equals(NaN))  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null  ||  imaginary.equals(NaN)||  imaginary.equals(NaN))  {  return  NaN;  }	  if(imaginary    ==    null    ||    imaginary.equals(NaN))    {    return    NaN;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	40	None	replace
108	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(isInfinite)  {  return  ONE;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(isInfinite)  {  return  ONE;  }	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	36	1	replace
109	[BUG]  [BUGGY]  if(isInfinite)  {  return  ONE;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(1.0      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  if(isInfinite)  {  return  ONE;  }  [BUGGY]      }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(isInfinite)  {  return  ONE;  }	  return    ONE;    if(isInfinite)    {    return    ONE;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	36	1	replace
110	[BUG]  [BUGGY]  Real  =  imaginary.evaluate(divisor);  [CE]  cannot  find  symbol  Real  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Real  =  imaginary.evaluate(divisor);  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  imaginary.evaluate(divisor);	  Real    =    real.evaluate(divisor);    	non-compiled	[CE]  cannot  find  symbol  Real	2	None	replace
111	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary)/  2.0;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	double  denominator  =  Math.abs(imaginary)/  2.0;	          double    denominator    =    Math.abs(imaginary);    double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	5	1	replace
112	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary)/  2.0;  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  double  denominator  =  Math.abs(imaginary)/  2.0;  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary)/  2.0;	          double    denominator    =    Math.abs(imaginary);    double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	5	1	replace
113	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  Imaginary  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(Imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Imaginary	21	None	add
114	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(real  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(real  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
115	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(real  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }  if(real  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary!=    0.0)    {    return    NaN;    }    if(real  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	1	add
116	[BUG]  [BUGGY]  Annotation  <  N,  E>  imaginary  =  annotations.iterator().next();  [CE]  cannot  find  symbol  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]  Annotation  <  N,  E>  imaginary  =  annotations.iterator().next();  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Annotation  <  N,  E>  imaginary  =  annotations.iterator().next();	  if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
117	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	19	1	add
118	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	19	1	add
119	[BUG]  [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  Imaginary  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {      [BUGGY]          if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	                if(imaginary        ==        0.0)        {        return        NaN;        }        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Imaginary	19	None	add
