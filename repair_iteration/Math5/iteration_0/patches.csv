bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]    super();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super();  [BUGGY]  public  Complex(double  real,  double  imaginary)  {  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	    super();		non-compiled	[CE]  illegal  start  of  type	20	None
2	[BUG]  [BUGGY]    super();  isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isNaN(imaginary));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super();  isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isNaN(imaginary));  [BUGGY]  public  Complex(double  real,  double  imaginary)  {  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	    super();  isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isNaN(imaginary));		non-compiled	[CE]  illegal  start  of  type	20	None
3	[BUG]  [BUGGY]    super();  this.isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isNaN(imaginary));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super();  this.isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isNaN(imaginary));  [BUGGY]  public  Complex(double  real,  double  imaginary)  {  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	    super();  this.isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isNaN(imaginary));		non-compiled	[CE]  illegal  start  of  type	20	None
4	[BUG]  [BUGGY]    super();  isNaN  =!isNaN  &&(Double.isInfinite(real)||  Double.isInfinite(imaginary));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super();  isNaN  =!isNaN  &&(Double.isInfinite(real)||  Double.isInfinite(imaginary));  [BUGGY]  public  Complex(double  real,  double  imaginary)  {  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	    super();  isNaN  =!isNaN  &&(Double.isInfinite(real)||  Double.isInfinite(imaginary));		non-compiled	[CE]  illegal  start  of  type	20	None
5	[BUG]  [BUGGY]    super();  isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isInfinite(imaginary));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super();  isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isInfinite(imaginary));  [BUGGY]  public  Complex(double  real,  double  imaginary)  {  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	    super();  isNaN  =!isNaN  &&(Double.isNaN(real)||  Double.isInfinite(imaginary));		non-compiled	[CE]  illegal  start  of  type	20	None
11	[BUG]  [BUGGY]    Complex  <?>  isNaN  :  null;  [CE]  ';'  expected  [CONTEXT]  public  Complex  reciprocal()  {  [BUGGY]    Complex  <?>  isNaN  :  null;  [BUGGY]  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4082482904638631	300	300	1	replace	    Complex  <?>  isNaN  :  null;		non-compiled	[CE]  ';'  expected	8	None
12	[BUG]  [BUGGY]    Complex  <?>  real  =  getReciprocal();  [CE]  type  Complex  does  not  take  parameters  [CONTEXT]  public  Complex  reciprocal()  {  [BUGGY]    Complex  <?>  real  =  getReciprocal();  [BUGGY]  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4082482904638631	300	300	1	replace	    Complex  <?>  real  =  getReciprocal();		non-compiled	[CE]  type  Complex  does  not  take  parameters	8	None
13	[BUG]  [BUGGY]    Complex  <?>  real  =  getReciprocalDenominator();  [CE]  type  Complex  does  not  take  parameters  [CONTEXT]  public  Complex  reciprocal()  {  [BUGGY]    Complex  <?>  real  =  getReciprocalDenominator();  [BUGGY]  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4082482904638631	300	300	1	replace	    Complex  <?>  real  =  getReciprocalDenominator();		non-compiled	[CE]  type  Complex  does  not  take  parameters	8	None
14	[BUG]  [BUGGY]    Complex  <?>  isNaN  :  getReciprocalIndex();  [CE]  ';'  expected  [CONTEXT]  public  Complex  reciprocal()  {  [BUGGY]    Complex  <?>  isNaN  :  getReciprocalIndex();  [BUGGY]  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4082482904638631	300	300	1	replace	    Complex  <?>  isNaN  :  getReciprocalIndex();		non-compiled	[CE]  ';'  expected	8	None
15	[BUG]  [BUGGY]    Complex  <?>  isNaN  :  getReciprocal();  [CE]  ';'  expected  [CONTEXT]  public  Complex  reciprocal()  {  [BUGGY]    Complex  <?>  isNaN  :  getReciprocal();  [BUGGY]  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4082482904638631	300	300	1	replace	    Complex  <?>  isNaN  :  getReciprocal();		non-compiled	[CE]  ';'  expected	8	None
22	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(1.0  testReciprocalZero  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  [BUGGY]  return  ONE;  [BUGGY]  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	return  ONE;	return  NaN;  	compilable	  [FE]  java.lang.AssertionError:  expected:<(1.0  testReciprocalZero	1	1
23	[BUG]  [BUGGY]  return  ONE;  [FE]  java.lang.AssertionError:  expected:<(1.0  testReciprocalZero  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  [BUGGY]  return  ONE;  [BUGGY]  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return  ONE;	return  NaN;  	compilable	  [FE]  java.lang.AssertionError:  expected:<(1.0  testReciprocalZero	1	1
23	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(0.0  testReciprocalZero  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  [BUGGY]  return  ZERO;  [BUGGY]  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	return  ZERO;	return  NaN;  	compilable	  [FE]  java.lang.AssertionError:  expected:<(0.0  testReciprocalZero	1	1
24	[BUG]  [BUGGY]  return  ZERO;  [FE]  java.lang.AssertionError:  expected:<(0.0  testReciprocalZero  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  [BUGGY]  return  ZERO;  [BUGGY]  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return  ZERO;	return  NaN;  	compilable	  [FE]  java.lang.AssertionError:  expected:<(0.0  testReciprocalZero	1	1
25	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  [BUGGY]    [BUGGY]  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	  	return  NaN;  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	1	1
26	[BUG]  [BUGGY]    [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  [BUGGY]    [BUGGY]  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	  	return  NaN;  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	1	1
41	[BUG]  [BUGGY]    if(isImaginary)  {  if(scale  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  [BUGGY]    if(isImaginary)  {  if(scale  ==  0.0)  {  return  NaN;  }  [BUGGY]  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	    if(isImaginary)  {  if(scale  ==  0.0)  {  return  NaN;  }		non-compiled	[CE]  ';'  expected	6	None
42	[BUG]  [BUGGY]    Complex  <?>  real  =  Math.abs(real)+  Math.abs(imaginary)*  scale;  [CE]  type  Complex  does  not  take  parameters  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  [BUGGY]    Complex  <?>  real  =  Math.abs(real)+  Math.abs(imaginary)*  scale;  [BUGGY]  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	    Complex  <?>  real  =  Math.abs(real)+  Math.abs(imaginary)*  scale;		non-compiled	[CE]  type  Complex  does  not  take  parameters	6	None
43	[BUG]  [BUGGY]    Complex  <?>  real  =  Math.abs(real)/  scale;  [CE]  type  Complex  does  not  take  parameters  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  [BUGGY]    Complex  <?>  real  =  Math.abs(real)/  scale;  [BUGGY]  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	    Complex  <?>  real  =  Math.abs(real)/  scale;		non-compiled	[CE]  type  Complex  does  not  take  parameters	6	None
44	[BUG]  [BUGGY]    Complex  <?>  real  =  Math.sqrt(real)/  scale;  [CE]  type  Complex  does  not  take  parameters  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  [BUGGY]    Complex  <?>  real  =  Math.sqrt(real)/  scale;  [BUGGY]  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	    Complex  <?>  real  =  Math.sqrt(real)/  scale;		non-compiled	[CE]  type  Complex  does  not  take  parameters	6	None
45	[BUG]  [BUGGY]    Complex  <?>  real  =  Math.abs(real)+  Math.abs(imaginary));  [CE]  ';'  expected  [CONTEXT]  public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  [BUGGY]    Complex  <?>  real  =  Math.abs(real)+  Math.abs(imaginary));  [BUGGY]  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	    Complex  <?>  real  =  Math.abs(real)+  Math.abs(imaginary));		non-compiled	[CE]  ';'  expected	6	None
51	[BUG]  [BUGGY]    if(isInfinite)  {  if(!isInfinite)  {  return "( "  +  real  +   ", "  +  imaginary  +   ") ";  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  String  toString()  {  [BUGGY]    if(isInfinite)  {  if(!isInfinite)  {  return "( "  +  real  +   ", "  +  imaginary  +   ") ";  }  [BUGGY]  return   "( "  +  real  +   ",   "  +  imaginary  +   ") ";  }  [CLASS]  Complex  [METHOD]  toString  [RETURN_TYPE]  String  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  expReal  factor  imaginary  imaginary2  imaginaryPart  innerPart  nthPhi  nthRootOfAbs  q  real  real2  realPart  scale  slice  subtrahend  t  x  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  subtrahend  x  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	1228	1228	1	replace	    if(isInfinite)  {  if(!isInfinite)  {  return "( "  +  real  +   ", "  +  imaginary  +   ") ";  }		non-compiled	[CE]  reached  end  of  file  while  parsing	4	None
52	[BUG]  [BUGGY]    if(isInfinite)  {  if(!isInfinite)  {  break;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  String  toString()  {  [BUGGY]    if(isInfinite)  {  if(!isInfinite)  {  break;  }  [BUGGY]  return   "( "  +  real  +   ",   "  +  imaginary  +   ") ";  }  [CLASS]  Complex  [METHOD]  toString  [RETURN_TYPE]  String  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  expReal  factor  imaginary  imaginary2  imaginaryPart  innerPart  nthPhi  nthRootOfAbs  q  real  real2  realPart  scale  slice  subtrahend  t  x  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  subtrahend  x  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	1228	1228	1	replace	    if(isInfinite)  {  if(!isInfinite)  {  break;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	4	None
53	[BUG]  [BUGGY]    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  break;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  String  toString()  {  [BUGGY]    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  break;  }  [BUGGY]  return   "( "  +  real  +   ",   "  +  imaginary  +   ") ";  }  [CLASS]  Complex  [METHOD]  toString  [RETURN_TYPE]  String  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  expReal  factor  imaginary  imaginary2  imaginaryPart  innerPart  nthPhi  nthRootOfAbs  q  real  real2  realPart  scale  slice  subtrahend  t  x  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  subtrahend  x  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	1228	1228	1	replace	    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  break;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	4	None
54	[BUG]  [BUGGY]    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  double  divisor  =  real.toString();  if(divisor!=  scale)  {  break;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  String  toString()  {  [BUGGY]    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  double  divisor  =  real.toString();  if(divisor!=  scale)  {  break;  }  [BUGGY]  return   "( "  +  real  +   ",   "  +  imaginary  +   ") ";  }  [CLASS]  Complex  [METHOD]  toString  [RETURN_TYPE]  String  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  expReal  factor  imaginary  imaginary2  imaginaryPart  innerPart  nthPhi  nthRootOfAbs  q  real  real2  realPart  scale  slice  subtrahend  t  x  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  subtrahend  x  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	1228	1228	1	replace	    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  double  divisor  =  real.toString();  if(divisor!=  scale)  {  break;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	4	None
55	[BUG]  [BUGGY]    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  double  divisor  =  getDivisor();  if(d  >  real)  {  scale  +=  imaginary2;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  String  toString()  {  [BUGGY]    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  double  divisor  =  getDivisor();  if(d  >  real)  {  scale  +=  imaginary2;  }  [BUGGY]  return   "( "  +  real  +   ",   "  +  imaginary  +   ") ";  }  [CLASS]  Complex  [METHOD]  toString  [RETURN_TYPE]  String  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  expReal  factor  imaginary  imaginary2  imaginaryPart  innerPart  nthPhi  nthRootOfAbs  q  real  real2  realPart  scale  slice  subtrahend  t  x  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  subtrahend  x  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	1228	1228	1	replace	    if(isInfinite)  {  for(int  i  =  0;  i  <  divisor;  i++)  {  double  divisor  =  getDivisor();  if(d  >  real)  {  scale  +=  imaginary2;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	4	None
61	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isInfinite;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isInfinite;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isInfinite;  }		non-compiled	[CE]  ';'  expected	12	None
62	[BUG]  [BUGGY]    Complex  c  =(Complex)other.getComplex();  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    Complex  c  =(Complex)other.getComplex();  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    Complex  c  =(Complex)other.getComplex();		non-compiled	[CE]  cannot  find  symbol	12	None
63	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isNaN;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isNaN;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isNaN;  }		non-compiled	[CE]  ';'  expected	12	None
64	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(isNaN)  {  return  isNaN;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other  instanceof  Complex)  {  if(isNaN)  {  return  isNaN;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other  instanceof  Complex)  {  if(isNaN)  {  return  isNaN;  }		non-compiled	[CE]  ';'  expected	12	None
65	[BUG]  [BUGGY]    Complex  c  =(Complex)other.complex;  [CE]  cannot  find  symbol  complex  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    Complex  c  =(Complex)other.complex;  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    Complex  c  =(Complex)other.complex;		non-compiled	[CE]  cannot  find  symbol  complex	12	None
71	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	add	    boolean  isInfinite  =  c.isInfinite;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
72	[BUG]  [BUGGY]    boolean  isInfinite  =  c.isInfinite;  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	replace	    boolean  isInfinite  =  c.isInfinite;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
72	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite  &&  c.isNaN;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	add	    boolean  isInfinite  =  c.isInfinite  &&  c.isNaN;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
73	[BUG]  [BUGGY]    boolean  isInfinite  =  c.isInfinite  &&  c.isNaN;  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite  &&  c.isNaN;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	replace	    boolean  isInfinite  =  c.isInfinite  &&  c.isNaN;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
73	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite  &&  c.isInfinite;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	add	    boolean  isInfinite  =  c.isInfinite  &&  c.isInfinite;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
74	[BUG]  [BUGGY]    boolean  isInfinite  =  c.isInfinite  &&  c.isInfinite;  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite  &&  c.isInfinite;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	replace	    boolean  isInfinite  =  c.isInfinite  &&  c.isInfinite;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
74	[BUG]  [BUGGY]    if(c.isInfinite)  {  if(isInfinite)  {  return  isInfinite;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    if(c.isInfinite)  {  if(isInfinite)  {  return  isInfinite;  }  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	replace	    if(c.isInfinite)  {  if(isInfinite)  {  return  isInfinite;  }		non-compiled	[CE]  ';'  expected	14	None
75	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite  ||  c.isInfinite;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	add	    boolean  isInfinite  =  c.isInfinite  ||  c.isInfinite;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
76	[BUG]  [BUGGY]    boolean  isInfinite  =  c.isInfinite  ||  c.isInfinite;  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  [BUGGY]    boolean  isInfinite  =  c.isInfinite  ||  c.isInfinite;  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	345	345	1	replace	    boolean  isInfinite  =  c.isInfinite  ||  c.isInfinite;		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  testReciprocalZero	14	1
82	[BUG]  [BUGGY]  public  Complex(real,  double  imaginary)  {  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]  public  Complex(real,  double  imaginary)  {  [BUGGY]  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	public  Complex(real,  double  imaginary)  {	public  Complex(double  real,  double  imaginary)  {  	non-compiled	[CE]  <identifier>  expected	19	None
83	[BUG]  [BUGGY]  public  Complex(double,  double  real,  double  imaginary)  {  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]  public  Complex(double,  double  real,  double  imaginary)  {  [BUGGY]  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	public  Complex(double,  double  real,  double  imaginary)  {	public  Complex(double  real,  double  imaginary)  {  	non-compiled	[CE]  <identifier>  expected	19	None
84	[BUG]  [BUGGY]  public  Complex(0.0,  0.0)  {  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]  public  Complex(0.0,  0.0)  {  [BUGGY]  this.real  =  real;  this.imaginary  =  imaginary;  isNaN  =  Double.isNaN(real)  ||  Double.isNaN(imaginary);  isInfinite  =  !isNaN  &&  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary));  }  [CLASS]  Complex  [METHOD]  <init>  [RETURN_TYPE]  Complex(double,double)  double  real  double  imaginary  [VARIABLES]  boolean  isInfinite  isNaN  double  imaginary  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.09016696346674323	98	98	1	replace	public  Complex(0.0,  0.0)  {	public  Complex(double  real,  double  imaginary)  {  	non-compiled	[CE]  illegal  start  of  type	19	None
91	[BUG]  [BUGGY]    if(this  ==  other)  {  if(isInfinite)  {  return  isInfinite;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  [BUGGY]    if(this  ==  other)  {  if(isInfinite)  {  return  isInfinite;  }  [BUGGY]  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.17149858514250882	340	340	1	replace	    if(this  ==  other)  {  if(isInfinite)  {  return  isInfinite;  }		non-compiled	[CE]  ';'  expected	18	None
92	[BUG]  [BUGGY]    if(this  ==  other)  {  if(isInfinite)  {  return  false;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  [BUGGY]    if(this  ==  other)  {  if(isInfinite)  {  return  false;  }  [BUGGY]  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.17149858514250882	340	340	1	replace	    if(this  ==  other)  {  if(isInfinite)  {  return  false;  }		non-compiled	[CE]  ';'  expected	18	None
93	[BUG]  [BUGGY]    if(this  ==  other)  {  if(isNaN)  {  return  false;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  [BUGGY]    if(this  ==  other)  {  if(isNaN)  {  return  false;  }  [BUGGY]  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.17149858514250882	340	340	1	replace	    if(this  ==  other)  {  if(isNaN)  {  return  false;  }		non-compiled	[CE]  ';'  expected	18	None
94	[BUG]  [BUGGY]    if(this  ==  other)  {  if(isInfinite)  {  return  true;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  [BUGGY]    if(this  ==  other)  {  if(isInfinite)  {  return  true;  }  [BUGGY]  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.17149858514250882	340	340	1	replace	    if(this  ==  other)  {  if(isInfinite)  {  return  true;  }		non-compiled	[CE]  ';'  expected	18	None
95	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isInfinite;  }  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  [BUGGY]    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isInfinite;  }  [BUGGY]  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.17149858514250882	340	340	1	replace	    if(other  instanceof  Complex)  {  if(isInfinite)  {  return  isInfinite;  }		non-compiled	[CE]  ';'  expected	18	None
