bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Real  real  =  ZERO.doubleValue();  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  ZERO.doubleValue();  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  ZERO.doubleValue();	      Real    real    =    real.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    if  (real  ==  0.0  ||  imaginary  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
3	[BUG]  [BUGGY]  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  if  (real  >=  0.0  ||  imaginary  ==  0.0)  {  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  if  (real  >=  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    if  (real  >=  0.0  ||  imaginary  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
4	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if  (imaginary  ==  0.0  ||  real  ==  0.0)  {	  if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	5	3	replace
7	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if  (imaginary  ==  0.0  ||  real  ==  0.0)  {	  if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	5	3	replace
8	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {	  if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	7	2	replace
9	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {	  if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	7	2	replace
10	[BUG]  [BUGGY]  Real  real  =  imaginary.evaluate(real);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  imaginary.evaluate(real);  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.evaluate(real);	      Real    real    =    real.evaluate(imaginary);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  Real  real  =  denominator.evaluate(real);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  denominator.evaluate(real);  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.evaluate(real);	      Real    real    =    real.evaluate(imaginary);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  Real  real  =  divisor.doubleValue();  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  divisor.doubleValue();  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  divisor.doubleValue();	      Real    real    =    imaginary.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	      if(isNaN)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	14	2	replace
16	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	      if(isNaN)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	14	2	replace
17	[BUG]  [BUGGY]  if(isInfinite  ||  isNaN)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if(isInfinite  ||  isNaN)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite  ||  isNaN)  {  return  NaN;  }	      if(isNaN    ||    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
18	[BUG]  [BUGGY]  if(isInfinite)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)  {  return  NaN;  }	      if(isNaN    ||    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
19	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	3	None	replace
20	[BUG]  [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]              java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	3	None	replace
21	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]      if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	2	add
22	[BUG]  [BUGGY]      if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]      if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	2	add
23	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  &&  real  ==  0.0)  {  if  (imaginary  ==  0.0  &&  real  ==  0.0)  {  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (imaginary  ==  0.0  &&  real  ==  0.0)  {  if  (imaginary  ==  0.0  &&  real  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    if  (imaginary  ==  0.0  &&  real  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
24	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  &&  real  ==  0.0)  {  if  (Imaginary  ==  0.0  &&  real  ==  0.0)  {  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (imaginary  ==  0.0  &&  real  ==  0.0)  {  if  (Imaginary  ==  0.0  &&  real  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    if  (Imaginary  ==  0.0  &&  real  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
25	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	3	None	replace
26	[BUG]  [BUGGY]  Real  real  =  realistic.evaluate(real);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  realistic.evaluate(real);  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  realistic.evaluate(real);	      Real    real    =    real.evaluate(imaginary);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  Real  real  =  real.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  real.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  real.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	      if(isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	2	replace
29	[BUG]  [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	      if(isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	2	replace
30	[BUG]  [BUGGY]  Real  real  =  isNaN.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  isNaN.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  isNaN.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN;	      Real    real    =    real.equals(imaginary)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  If  (real  ==  0.0  ||  imaginary  ==  0.0)  {  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  if  (real  ==  0.0  ||  imaginary  ==  0.0)  {  If  (real  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    If  (real  ==  0.0  ||  imaginary  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
32	[BUG]  [BUGGY]  Real  real  =  imaginaryNaN.evaluate(real);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }    [BUGGY]  Real  real  =  imaginaryNaN.evaluate(real);  [BUGGY]    if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginaryNaN.evaluate(real);	      Real    real    =    real.evaluate(imaginary);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
