bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); [FE] UnsupportedOperationException [CONTEXT] public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { [BUGGY] Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); [BUGGY] Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } [CLASS] TypeInfoFactory [METHOD] getTypeInfoForField [RETURN_TYPE] TypeInfo  Field f Type typeDefiningF [VARIABLES] Field f Type actualType type typeDefiningF boolean Class classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	
2	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { [BUGGY] [BUGGY] Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } [CLASS] TypeInfoFactory [METHOD] getTypeInfoForField [RETURN_TYPE] TypeInfo  Field f Type typeDefiningF [VARIABLES] Field f Type actualType type typeDefiningF boolean Class classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	add	
3	[BUG] [BUGGY] Type type = f.getGenericType(); [FE] UnsupportedOperationException [CONTEXT] public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); [BUGGY] Type type = f.getGenericType(); [BUGGY] Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } [CLASS] TypeInfoFactory [METHOD] getTypeInfoForField [RETURN_TYPE] TypeInfo  Field f Type typeDefiningF [VARIABLES] Field f Type actualType type typeDefiningF boolean Class classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	
4	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); [BUGGY] [BUGGY] Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } [CLASS] TypeInfoFactory [METHOD] getTypeInfoForField [RETURN_TYPE] TypeInfo  Field f Type typeDefiningF [VARIABLES] Field f Type actualType type typeDefiningF boolean Class classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	
5	[BUG] [BUGGY] Type actualType = getActualType(type, typeDefiningF, classDefiningF); [FE] UnsupportedOperationException [CONTEXT] public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); [BUGGY] Type actualType = getActualType(type, typeDefiningF, classDefiningF); [BUGGY] return new TypeInfo(actualType); } [CLASS] TypeInfoFactory [METHOD] getTypeInfoForField [RETURN_TYPE] TypeInfo  Field f Type typeDefiningF [VARIABLES] Field f Type actualType type typeDefiningF boolean Class classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	54	54	1	replace	
6	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); [BUGGY] [BUGGY] Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } [CLASS] TypeInfoFactory [METHOD] getTypeInfoForField [RETURN_TYPE] TypeInfo  Field f Type typeDefiningF [VARIABLES] Field f Type actualType type typeDefiningF boolean Class classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	54	54	1	add	
7	[BUG] [BUGGY] if (typeToEvaluate instanceof Class<?>) { [FE] UnsupportedOperationException [CONTEXT] Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { [BUGGY] if (typeToEvaluate instanceof Class<?>) { [BUGGY] return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	60	60	1	replace	
8	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { [BUGGY] [BUGGY] if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	60	60	1	add	
9	[BUG] [BUGGY] } else if (typeToEvaluate instanceof ParameterizedType) { [FE] UnsupportedOperationException [CONTEXT] Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; [BUGGY] } else if (typeToEvaluate instanceof ParameterizedType) { [BUGGY] ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	62	62	1	replace	
10	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; [BUGGY] [BUGGY] } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	62	62	1	add	
11	[BUG] [BUGGY] } else if (typeToEvaluate instanceof GenericArrayType) { [FE] UnsupportedOperationException [CONTEXT] Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); [BUGGY] } else if (typeToEvaluate instanceof GenericArrayType) { [BUGGY] GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	69	69	1	replace	
12	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); [BUGGY] [BUGGY] } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	69	69	1	add	
13	[BUG] [BUGGY] } else if (typeToEvaluate instanceof TypeVariable<?>) { [FE] UnsupportedOperationException [CONTEXT] } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); [BUGGY] } else if (typeToEvaluate instanceof TypeVariable<?>) { [BUGGY] if (parentType instanceof ParameterizedType) {       TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	
14	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); [BUGGY] [BUGGY] } else if (typeToEvaluate instanceof TypeVariable<?>) { if (parentType instanceof ParameterizedType) {       TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	
15	[BUG] [BUGGY] if (parentType instanceof ParameterizedType) { [FE] UnsupportedOperationException [CONTEXT] GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { [BUGGY] if (parentType instanceof ParameterizedType) { [BUGGY]       TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	80	80	1	replace	
16	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { [BUGGY] [BUGGY] if (parentType instanceof ParameterizedType) {       TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	80	80	1	add	
17	[BUG] [BUGGY] throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType + ".\n Are you missing the use of TypeToken idiom?\n See "  + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"); [FE] UnsupportedOperationException [CONTEXT] TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument];  } [BUGGY] throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType   + ".\n Are you missing the use of TypeToken idiom?\n See "     + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"); [BUGGY] + ".\n Are you missing the use of TypeToken idiom?\n See " + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"); } else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate; return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, " + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type."); } } [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	97	99	1	replace	
18	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument];  } [BUGGY] [BUGGY] throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType   + ".\n Are you missing the use of TypeToken idiom?\n See "     + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"); + ".\n Are you missing the use of TypeToken idiom?\n See " + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"); } else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate; return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, " + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type."); } } [CLASS] TypeInfoFactory [METHOD] getActualType [RETURN_TYPE] Type  Type typeToEvaluate Type parentType Class<?> rawParentClass [VARIABLES] ParameterizedType castedType objParameterizedType Type actualType componentType owner parentType rawType typeToEvaluate WildcardType castedType boolean TypeVariable fieldTypeVariable Type[] actualTypeArguments actualTypeParameters Class rawParentClass GenericArrayType castedType TypeVariable[] classTypeVariables int indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	97	99	1	add	
