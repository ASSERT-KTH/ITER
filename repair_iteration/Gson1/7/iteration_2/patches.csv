bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	67	None	add
2	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	67	None	add
3	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	67	None	add
4	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]          UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	67	None	add
5	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]            UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	67	None	add
6	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	39	None	add
7	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	39	None	add
8	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
9	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	39	None	add
10	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  not  a  statement	39	None	add
11	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	39	None	add
12	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
13	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	39	None	add
14	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  rawParentClass.getParameterTypes();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  rawParentClass.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  rawParentClass.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
15	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  objParameterizedType.getParameterTypes();  [CE]  cannot  find  symbol  objParameterizedType  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  objParameterizedType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  objParameterizedType.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	110	None	replace
16	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  actualType.getParameterTypes();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  actualType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  actualType.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
17	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  componentType.getParameterTypes();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  componentType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  componentType.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
18	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  currentType.getParameterTypes();  [CE]  cannot  find  symbol  currentType  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  currentType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  currentType.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol  currentType	110	None	replace
19	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getRawParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getRawParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getRawParameters();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
20	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClassParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getRawClassParameters();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
21	[BUG]  [BUGGY]  Type[]  rawParentClass  =  actualType.getGenericParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  actualType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  actualType.getGenericParameters();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
22	[BUG]  [BUGGY]  Type[]  rawParentClass  =  objParameterizedType.getGenericParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  objParameterizedType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  objParameterizedType.getGenericParameters();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
23	[BUG]  [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getGenericParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  typeToEvaluate.getGenericParameters();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
24	[BUG]  [BUGGY]  Type[]  rawParentClass  =  parentType.getGenericParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  parentType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  parentType.getGenericParameters();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
25	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getActualParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getActualParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getActualParameters();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
26	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	74	1	replace
27	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	74	1	replace
28	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	23	1	replace
29	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	23	1	replace
30	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  typeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
31	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeParentClass  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeParentClass  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  typeParentClass  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
32	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  actualType  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  actualType	42	None	replace
33	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <!>)  {  [CE]  illegal  start  of  type  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <!>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <!>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <!>)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
34	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <!>)  {  [CE]  illegal  start  of  type  [FE]                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <!>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <!>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <!>)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
35	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	85	1	replace
36	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	85	1	replace
37	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	85	1	replace
38	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	85	1	replace
39	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	58	None	add
40	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	58	None	add
41	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
42	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	58	None	add
43	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	58	None	add
44	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	58	None	add
45	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	58	None	add
46	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
47	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
48	[BUG]  [BUGGY]  }  else  if(classTypeVariables!=  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables!=  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables!=  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
49	[BUG]  [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  ==  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
50	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
51	[BUG]  [BUGGY]  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [CE]  unreachable  statement  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	non-compiled	[CE]  unreachable  statement	138	None	replace
52	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [CE]  unreachable  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	non-compiled	[CE]  unreachable  statement	138	None	replace
53	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
54	[BUG]  [BUGGY]  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
55	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [CE]  unreachable  statement  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	non-compiled	[CE]  unreachable  statement	138	None	replace
56	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
57	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	53	1	replace
58	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	53	1	replace
59	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	53	1	replace
60	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	53	1	replace
61	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	103	1	replace
62	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	103	1	replace
63	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
64	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	94	None	replace
65	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
66	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
67	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	94	None	replace
68	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePar  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePar  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePar	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	94	None	replace
69	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
70	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
71	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
72	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(rawParentClass  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(rawParentClass  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(rawParentClass  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
73	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  if(parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  if(parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  if(parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
74	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getClassParameters();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rawParentClass.getClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
75	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  parentType.getClassParameters();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  parentType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  parentType.getClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
76	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  actualType.getClassParameters();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  actualType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  actualType.getClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
77	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  as.getClassParameters();  [CE]  cannot  find  symbol  as  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  as.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  as.getClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol  as	6	None	replace
78	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	73	1	replace
79	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	73	1	replace
80	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	49	1	replace
81	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	49	1	replace
82	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	3	None	add
83	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	3	None	add
84	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	3	None	add
85	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  typeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  typeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  typeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
86	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(actualType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  actualType  [FE]            UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(actualType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(actualType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  actualType	3	None	add
87	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]              UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	3	None	add
88	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(classTypeVariables    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	15	None	replace
89	[BUG]  [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  objParameterizedType  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(objParameterizedType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(classTypeVariables    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	15	None	replace
90	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
91	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	86	1	replace
92	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	86	1	replace
93	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	1	None	add
94	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
95	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  not  a  statement	1	None	add
96	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	1	None	add
97	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	1	None	add
98	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	1	None	add
99	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	1	None	add
100	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  actualType  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  actualType	1	None	add
101	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	60	None	add
102	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	60	None	add
103	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
104	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	60	None	add
105	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	60	None	add
106	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
107	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	60	None	add
108	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  classTypeVariables  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  classTypeVariables  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  Class  <?>  ||  classTypeVariables  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    Class    <?>    ||    groupTypeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	143	None	replace
109	[BUG]  [BUGGY]  }  else  if(castedType  instanceof  Class  <?>  ||  castedType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  castedType  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(castedType  instanceof  Class  <?>  ||  castedType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(castedType  instanceof  Class  <?>  ||  castedType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    Class    <?>    ||    groupTypeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  castedType	143	None	replace
110	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  componentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  componentType  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  componentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  componentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    actualType    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  componentType	62	None	replace
111	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    actualType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	62	1	replace
112	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    actualType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	62	1	replace
113	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClasses();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getRawClasses();	  Type[]    rawParentClass    =    castedType.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	128	None	replace
114	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClass(),  actualType);  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClass(),  actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getRawClass(),  actualType);	  Type[]    rawParentClass    =    castedType.getRawClass();    	non-compiled	[CE]  ';'  expected	128	None	replace
115	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClass(actualType);  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getRawClass(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getRawClass(actualType);	  Type[]    rawParentClass    =    castedType.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	128	None	replace
116	[BUG]  [BUGGY]  Type[]  rawParentClass  =  actualType.getRawClass();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  actualType.getRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  actualType.getRawClass();	  Type[]    rawParentClass    =    castedType.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	128	None	replace
117	[BUG]  [BUGGY]  Type[]  rawParentClass  =  objParameterizedType.getRawClass();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  objParameterizedType.getRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  objParameterizedType.getRawClass();	  Type[]    rawParentClass    =    castedType.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	128	None	replace
118	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	56	1	replace
119	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	56	1	replace
120	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	14	1	replace
121	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	14	1	replace
122	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	14	1	replace
123	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	14	1	replace
124	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rawParentClass.getRawClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
125	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  objParameterizedType.getRawClassParameters();  [CE]  cannot  find  symbol  objParameterizedType  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  objParameterizedType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  objParameterizedType.getRawClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	8	None	replace
126	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  parentType.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  parentType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  parentType.getRawClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
127	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rootType.getRawClassParameters();  [CE]  cannot  find  symbol  rootType  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rootType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rootType.getRawClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol  rootType	8	None	replace
128	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  actualType.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  actualType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  actualType.getRawClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
129	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	44	1	replace
130	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	44	1	replace
131	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Type  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  type  Type  does  not  take  parameters  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Type  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Type  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  type  Type  does  not  take  parameters	44	None	replace
132	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
133	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	148	None	replace
134	[BUG]  [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	148	None	replace
135	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	120	None	add
136	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	120	None	add
137	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	120	None	add
138	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(groupTypeVariable  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  groupTypeVariable  [FE]          UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(groupTypeVariable  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(groupTypeVariable  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  groupTypeVariable	120	None	add
139	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]            UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	120	None	add
140	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]              UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	120	None	add
141	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
142	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
143	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
144	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
145	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
146	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
147	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
148	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	134	1	replace
149	[BUG]  [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	134	1	replace
150	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	134	1	replace
151	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	134	1	replace
152	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getClasses();  [CE]  variable  classTypeVariables  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rawParentClass.getClasses();	  Type[]    classTypeVariables    =    castedType.getClasses();    	non-compiled	[CE]  variable  classTypeVariables  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	126	None	replace
153	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  parentType.getClasses();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  parentType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  parentType.getClasses();	  Type[]    classTypeVariables    =    castedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
154	[BUG]  [BUGGY]  Type[]  castedTypeVariables  =  castedType.getClasses();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  castedTypeVariables  =  castedType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  castedTypeVariables  =  castedType.getClasses();	  Type[]    classTypeVariables    =    castedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
155	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  componentType.getClasses();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  componentType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  componentType.getClasses();	  Type[]    classTypeVariables    =    castedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
156	[BUG]  [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  castedType  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(castedType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(groupTypeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  castedType	139	None	replace
157	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	146	None	replace
158	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	146	None	replace
159	[BUG]  [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  castedType  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(castedType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(actualType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  castedType	57	None	replace
160	[BUG]  [BUGGY]  Type  parentType  =  actualType.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  actualType.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  actualType.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
161	[BUG]  [BUGGY]  Type  parentType  =  rawParentClass.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  rawParentClass.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  rawParentClass.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
162	[BUG]  [BUGGY]  Type  parentType  =  castedType.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  castedType.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  castedType.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
163	[BUG]  [BUGGY]  Type  parentType  =  objParameterizedType.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  objParameterizedType.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  objParameterizedType.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
164	[BUG]  [BUGGY]  Type  parentType  =  typeToEvaluate.getParentClass(),  rawParentClass);  [CE]  ';'  expected  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  typeToEvaluate.getParentClass(),  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  typeToEvaluate.getParentClass(),  rawParentClass);	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  ';'  expected	112	None	replace
165	[BUG]  [BUGGY]  Type  parentType  =  componentType.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  componentType.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  componentType.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
166	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
167	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
168	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
169	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  FieldType  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  FieldType  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  FieldType  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
170	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	41	None	add
171	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	41	None	add
172	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	41	None	add
173	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]          UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	41	None	add
174	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  >=?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  >=?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  Class  >=?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
175	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(actualType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  actualType  [FE]              UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(actualType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(actualType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  actualType	41	None	add
176	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  typeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
177	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeParentClass  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  typeParentClass  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  typeParentClass  ||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
178	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	48	1	replace
179	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>||  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	48	1	replace
180	[BUG]  [BUGGY]  }  else  if(groupType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  groupType  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(groupType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(groupType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  groupType	141	None	replace
181	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	59	1	replace
182	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	59	1	replace
183	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	37	None	add
184	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
185	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  not  a  statement	37	None	add
186	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  fieldTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  fieldTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  fieldTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
187	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getRawClass();  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getRawClass();	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
188	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  	non-compiled	[CE]  ';'  expected	37	None	add
189	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
190	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
191	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	136	1	replace
192	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	136	1	replace
193	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	136	1	replace
194	[BUG]  [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	136	1	replace
195	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	136	1	replace
196	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	136	1	replace
197	[BUG]  [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  objParameterizedType  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(objParameterizedType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	108	None	replace
198	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
199	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
200	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
201	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(actualType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  actualType  [FE]          UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(actualType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(actualType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  actualType	97	None	add
202	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]            UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
203	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]              UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
204	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]                UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
205	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]                  UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
206	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	142	1	replace
207	[BUG]  [BUGGY]  }  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	142	1	replace
208	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  actualType  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  actualType	78	None	replace
209	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  actualType  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  actualType  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  actualType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  actualType  instanceof  ParameterizedType)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  actualType	117	None	replace
210	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  SortedType)  {  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  SortedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  SortedType)  {	  }    else    if(typeToEvaluate    instanceof    SortedType)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
211	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
212	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  &&  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  &&  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
213	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
214	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  objParameterizedType.getRawClassParameters();  [CE]  cannot  find  symbol  objParameterizedType  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  objParameterizedType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  objParameterizedType.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	129	None	replace
215	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  typeToEvaluate.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  typeToEvaluate.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  typeToEvaluate.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
216	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  actualType.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  actualType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  actualType.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
217	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  parentType.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  parentType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  parentType.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
218	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  currentType.getRawClassParameters();  [CE]  cannot  find  symbol  currentType  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  currentType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  currentType.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol  currentType	129	None	replace
219	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  componentType.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  componentType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  componentType.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
220	[BUG]  [BUGGY]  Type  parentType  =  getActualType(componentType,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(componentType,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(componentType,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
221	[BUG]  [BUGGY]  Type  parentType  =  getActualType(rawParentClass,  parentType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(rawParentClass,  parentType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(rawParentClass,  parentType);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
222	[BUG]  [BUGGY]  Type  parentType  =  getActualType(objParameterizedType,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(objParameterizedType,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(objParameterizedType,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
223	[BUG]  [BUGGY]  Type  parentType  =  getActualType(typeToEvaluate,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(typeToEvaluate,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(typeToEvaluate,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
224	[BUG]  [BUGGY]  Type  parentType  =  getActualType(objParentClass,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(objParentClass,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(objParentClass,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
225	[BUG]  [BUGGY]  Type  parentType  =  getActualType(castedType,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(castedType,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(castedType,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
226	[BUG]  [BUGGY]  Type  parentType  =  getActualType(typeToEvaluate,  parentType,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(typeToEvaluate,  parentType,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(typeToEvaluate,  parentType,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
227	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  actualType.getClasses();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  actualType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  actualType.getClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
228	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
229	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ')'  expected	123	None	replace
230	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>[])typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>[])typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>[])typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
231	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>[])typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>[])typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>[])typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	123	None	replace
232	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
233	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables)  {  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
234	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>[])  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>[])  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  TypeVariable  <?>[])  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	30	None	replace
235	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>[]  typeToEvaluate)  {  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>[]  typeToEvaluate)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  TypeVariable  <?>[]  typeToEvaluate)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
236	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables)  {  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
237	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>[]  classTypeVariables)  {  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>[]  classTypeVariables)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>[]  classTypeVariables)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
238	[BUG]  [BUGGY]  }  else  if(!(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables))  {  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(!(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(!(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables))  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
239	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
240	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
241	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
242	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
243	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ')'  expected	149	None	replace
244	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
245	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
246	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	140	1	replace
247	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	140	1	replace
248	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	140	1	replace
249	[BUG]  [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	140	1	replace
250	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	140	1	replace
251	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	140	1	replace
252	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
253	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  [CE]  inconvertible  types  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[])    {    	non-compiled	[CE]  inconvertible  types	27	None	replace
254	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>[])  {  [CE]  inconvertible  types  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>[])  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>[])  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[])    {    	non-compiled	[CE]  inconvertible  types	27	None	replace
255	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>[])  {  [CE]  inconvertible  types  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>[])  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>[])  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[])    {    	non-compiled	[CE]  inconvertible  types	27	None	replace
256	[BUG]  [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>[])  {  [CE]  cannot  find  symbol  objParameterizedType  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>[])  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(objParameterizedType  instanceof  TypeVariable  <?>[])  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[])    {    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	27	None	replace
257	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>[])  {  [CE]  inconvertible  types  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>[])  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>[])  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[])    {    	non-compiled	[CE]  inconvertible  types	27	None	replace
258	[BUG]  [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>[])  {  [CE]  cannot  find  symbol  castedType  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>[])  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(castedType  instanceof  TypeVariable  <?>[])  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[])    {    	non-compiled	[CE]  cannot  find  symbol  castedType	27	None	replace
259	[BUG]  [BUGGY]  Type[]  actualTypeArguments  =  castedType.getParameterTypes();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  actualTypeArguments  =  castedType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  actualTypeArguments  =  castedType.getParameterTypes();	  Type[]    parentTypeArguments    =    castedType.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
260	[BUG]  [BUGGY]  Type[]  castedTypeArguments  =  castedType.getParameterTypes();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  castedTypeArguments  =  castedType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  castedTypeArguments  =  castedType.getParameterTypes();	  Type[]    parentTypeArguments    =    castedType.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
261	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	118	None	add
262	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	118	None	add
263	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
264	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	118	None	add
265	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
266	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	118	None	add
267	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  missing  return  statement	118	None	add
268	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  componentType.getClassParameters();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  componentType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  componentType.getClassParameters();	  Type[]    classTypeVariables    =    objParameterizedType.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
269	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
270	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
271	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
272	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
273	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	93	1	replace
274	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	93	1	replace
275	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
276	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
277	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
278	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ')'  expected	109	None	replace
279	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
280	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
281	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
282	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
283	[BUG]  [BUGGY]  if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ')'  expected	147	None	replace
284	[BUG]  [BUGGY]  if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
285	[BUG]  [BUGGY]  if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(objParameterizedType!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
286	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	40	1	replace
287	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	40	1	replace
288	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  actualType  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  actualType	40	None	replace
289	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
290	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
291	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  SortedType  <?>)  {  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  SortedType  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  SortedType  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
292	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    }    else    if(parentType.equals(typeToEvaluate))    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	145	1	replace
293	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    }    else    if(parentType.equals(typeToEvaluate))    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	145	1	replace
294	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    }    else    if(parentType.equals(typeToEvaluate))    {    	compilable	  [FE]  UnsupportedOperationException  	145	1	replace
295	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {  [FE]  UnsupportedOperationException  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType.equals(typeToEvaluate))  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    }    else    if(parentType.equals(typeToEvaluate))    {    	compilable	  [FE]  UnsupportedOperationException  	145	1	replace
296	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	65	None	add
297	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	65	None	add
298	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
299	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
300	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	65	None	add
301	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	65	None	add
302	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	51	None	add
303	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
304	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  not  a  statement	51	None	add
305	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	51	None	add
306	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	51	None	add
307	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	51	None	add
308	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	51	None	add
309	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  actualType  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  actualType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  cannot  find  symbol  actualType	51	None	add
310	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	43	None	add
311	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
312	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  not  a  statement	43	None	add
313	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
314	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  	non-compiled	[CE]  ';'  expected	43	None	add
315	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getRawClass();  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getRawClass();	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
316	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  missing  return  statement	43	None	add
317	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
318	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  objParentClass.getClasses();  [CE]  cannot  find  symbol  objParentClass  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  objParentClass.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  objParentClass.getClasses();	  Type[]    classTypeVariables    =    typeToEvaluate.getClasses();    	non-compiled	[CE]  cannot  find  symbol  objParentClass	7	None	replace
319	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  typesToEvaluate.getClasses();  [CE]  cannot  find  symbol  typesToEvaluate  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  typesToEvaluate.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  typesToEvaluate.getClasses();	  Type[]    classTypeVariables    =    typeToEvaluate.getClasses();    	non-compiled	[CE]  cannot  find  symbol  typesToEvaluate	7	None	replace
320	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  castedType.getGenericParameters();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  castedType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  castedType.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
321	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  rawParentClass.getGenericParameters();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  rawParentClass.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  rawParentClass.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
322	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  objParameterizedType.getGenericParameters();  [CE]  cannot  find  symbol  objParameterizedType  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  objParameterizedType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  objParameterizedType.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	111	None	replace
323	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  actualType.getGenericParameters();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  actualType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  actualType.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
324	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  componentType.getGenericParameters();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  componentType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  componentType.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
325	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  as.getGenericParameters();  [CE]  cannot  find  symbol  as  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  as.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  as.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol  as	111	None	replace
326	[BUG]  [BUGGY]  }  else  if(classTypeVariables!=  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables!=  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables!=  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
327	[BUG]  [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  ==  null)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
328	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	63	None	add
329	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	63	None	add
330	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	63	None	add
331	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]          UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	63	None	add
332	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]            UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	63	None	add
333	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]              UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	63	None	add
334	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]                UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	63	None	add
335	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <!>)  {  [CE]  illegal  start  of  type  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <!>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <!>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <!>)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
336	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	116	None	add
337	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	116	None	add
338	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	116	None	add
339	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  'else'  without  'if'  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  'else'  without  'if'	116	None	add
340	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
341	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  missing  return  statement	116	None	add
342	[BUG]  [BUGGY]  Type  parentType  =  actualType.getParameterType(typeToEvaluate);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  actualType.getParameterType(typeToEvaluate);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  actualType.getParameterType(typeToEvaluate);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
343	[BUG]  [BUGGY]  Type  parentType  =  typeToEvaluate.getParameterType(actualType,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  typeToEvaluate.getParameterType(actualType,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  typeToEvaluate.getParameterType(actualType,  rawParentClass);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
344	[BUG]  [BUGGY]  Type  actualType  =  typeToEvaluate.getParameterType(actualType);  [CE]  variable  actualType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  actualType  =  typeToEvaluate.getParameterType(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  actualType  =  typeToEvaluate.getParameterType(actualType);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  actualType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
345	[BUG]  [BUGGY]  Type  parentType  =  objParameterizedType.getParameterType(actualType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  objParameterizedType.getParameterType(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  objParameterizedType.getParameterType(actualType);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
346	[BUG]  [BUGGY]  Type  parentType  =  castedType.getParameterType(actualType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  castedType.getParameterType(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  castedType.getParameterType(actualType);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
347	[BUG]  [BUGGY]  Type  currentType  =  typeToEvaluate.getParameterType(actualType);  [CE]  cannot  find  symbol  [FE]                                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  currentType  =  typeToEvaluate.getParameterType(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  currentType  =  typeToEvaluate.getParameterType(actualType);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
348	[BUG]  [BUGGY]  Type  parentType  =  typeToEvaluate.getParameterType(rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  typeToEvaluate.getParameterType(rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  typeToEvaluate.getParameterType(rawParentClass);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
349	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>[])  {  if(typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
350	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	64	1	replace
351	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	64	1	replace
352	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  castedType.getRawClasses();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  castedType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  castedType.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
353	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  typeToEvaluate.getRawClasses();  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  typeToEvaluate.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  typeToEvaluate.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
354	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getRawClasses();  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rawParentClass.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rawParentClass.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
355	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  parentType.getRawClasses();  [CE]  cannot  find  symbol  [FE]                                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  parentType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  parentType.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
356	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  actualType.getRawClasses();  [CE]  cannot  find  symbol  [FE]                                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  actualType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  actualType.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
357	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  componentType.getRawClasses();  [CE]  cannot  find  symbol  [FE]                                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  componentType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  componentType.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
358	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  FieldType  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  FieldType  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  FieldType  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
359	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  classTypeVariables  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  classTypeVariables  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  classTypeVariables  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluated    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	17	None	replace
360	[BUG]  [BUGGY]  }  else  if(componentType  instanceof  TypeVariable  <?>  ||  componentType  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  componentType  [FE]                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(componentType  instanceof  TypeVariable  <?>  ||  componentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(componentType  instanceof  TypeVariable  <?>  ||  componentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluated    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  componentType	17	None	replace
361	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  classTypeVariables  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  classTypeVariables  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  classTypeVariables  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	137	None	replace
362	[BUG]  [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>  ||  castedType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  castedType  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(castedType  instanceof  TypeVariable  <?>  ||  castedType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(castedType  instanceof  TypeVariable  <?>  ||  castedType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  castedType	137	None	replace
363	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
364	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	compilable	  [FE]  UnsupportedOperationException  	95	1	replace
365	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [FE]  UnsupportedOperationException  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	compilable	  [FE]  UnsupportedOperationException  	95	1	replace
366	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
367	[BUG]  [BUGGY]  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  variable  classTypeVariables  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  variable  classTypeVariables  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	95	None	replace
368	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  not  a  statement	95	None	replace
369	[BUG]  [BUGGY]  Type[]  rawParentClass  =  parentType.getRawClass();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  parentType.getRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  parentType.getRawClass();	  Type[]    rawParentClass    =    typeToEvaluate.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	131	None	replace
370	[BUG]  [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getRawClass(),  actualType);  [CE]  ';'  expected  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getRawClass(),  actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  typeToEvaluate.getRawClass(),  actualType);	  Type[]    rawParentClass    =    typeToEvaluate.getRawClass();    	non-compiled	[CE]  ';'  expected	131	None	replace
371	[BUG]  [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getRawClass(actualType);  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getRawClass(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  typeToEvaluate.getRawClass(actualType);	  Type[]    rawParentClass    =    typeToEvaluate.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	131	None	replace
372	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Serializable)  {  [CE]  cannot  find  symbol  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Serializable)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Serializable)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
373	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(classTypeVariables    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	34	None	replace
374	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	121	1	replace
375	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	121	1	replace
376	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	121	1	replace
377	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	121	1	replace
378	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  castedType.getRawClassParameters(),  rawParentClass);  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  castedType.getRawClassParameters(),  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  castedType.getRawClassParameters(),  rawParentClass);	  Type[]    classTypeVariables    =    castedType.getRawClassParameters();    	non-compiled	[CE]  ';'  expected	127	None	replace
379	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	106	None	replace
380	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    }    else    if(actualType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  missing  return  statement	80	None	replace
381	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    }    else    if(actualType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	80	None	replace
382	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
383	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
384	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
385	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
386	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  castedType.getClassParameters(),  rawParentClass);  [CE]  ';'  expected  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  castedType.getClassParameters(),  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  castedType.getClassParameters(),  rawParentClass);	  Type[]    classTypeVariables    =    castedType.getClassParameters();    	non-compiled	[CE]  ';'  expected	9	None	replace
387	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	133	1	replace
388	[BUG]  [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	133	1	replace
389	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    CategoryVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
390	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    CategoryVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
391	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  as.getClasses();  [CE]  cannot  find  symbol  as  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  as.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  as.getClasses();	  Type[]    classTypeVariables    =    typeToEvaluate.getClasses();    	non-compiled	[CE]  cannot  find  symbol  as	7	None	replace
392	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
393	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
394	[BUG]  [BUGGY]  Type  parentType  =  getActualType(rawParentClass,  typeToEvaluate.getParentClass());  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(rawParentClass,  typeToEvaluate.getParentClass());  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(rawParentClass,  typeToEvaluate.getParentClass());	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
395	[BUG]  [BUGGY]  Type  parentType  =  owner.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  owner.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  owner.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
396	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	142	1	replace
397	[BUG]  [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	142	1	replace
398	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	compilable	  [FE]  UnsupportedOperationException  	138	1	replace
399	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [FE]  UnsupportedOperationException  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	compilable	  [FE]  UnsupportedOperationException  	138	1	replace
400	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	compilable	  [FE]  UnsupportedOperationException  	138	1	replace
401	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [FE]  UnsupportedOperationException  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	compilable	  [FE]  UnsupportedOperationException  	138	1	replace
402	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	138	1	replace
403	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    typeToEvaluate    =(TypeVariable    <?>)typeToEvaluate;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	138	1	replace
404	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getRawParameterTypes();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getRawParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getRawParameterTypes();	  Type[]    rawParentClass    =    castedType.getGenericParameters();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	130	None	replace
405	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	94	None	replace
406	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	94	None	replace
407	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
408	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
409	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	94	None	replace
410	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
411	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  	non-compiled	[CE]  ';'  expected	118	None	add
412	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  missing  return  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  	non-compiled	[CE]  missing  return  statement	118	None	add
413	[BUG]  [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getTypeParameters();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  typeToEvaluate.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  typeToEvaluate.getTypeParameters();	  Type[]    rawParentClass    =    typeToEvaluate.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	131	None	replace
414	[BUG]  [BUGGY]  Type[]  rawParentClass  =  currentType.getRawClass();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  currentType.getRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  currentType.getRawClass();	  Type[]    rawParentClass    =    typeToEvaluate.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	131	None	replace
415	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class	  	non-compiled	[CE]  not  a  statement	37	None	add
416	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
417	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  >=?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  >=?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  >=?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
418	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  	non-compiled	[CE]  ';'  expected	37	None	add
419	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
420	[BUG]  [BUGGY]  }  else  if(rawParentClass  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  inconvertible  types  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(rawParentClass  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(rawParentClass  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  inconvertible  types	132	None	replace
421	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
422	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  actualType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
423	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
424	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
425	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
426	[BUG]  [BUGGY]  Type[]  castedTypeVariables  =  castedType.getClassParameters();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  castedTypeVariables  =  castedType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  castedTypeVariables  =  castedType.getClassParameters();	  Type[]    classTypeVariables    =    castedType.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
427	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  this.castedType.getClassParameters();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  this.castedType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  this.castedType.getClassParameters();	  Type[]    classTypeVariables    =    castedType.getClassParameters();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	9	None	replace
428	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  currentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  currentType  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  currentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  currentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    actualType    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  currentType	62	None	replace
429	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
430	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class	  	non-compiled	[CE]  not  a  statement	43	None	add
431	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
432	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  	non-compiled	[CE]  ';'  expected	43	None	add
433	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
434	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
435	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
436	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
437	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
438	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  ')'  expected	67	None	add
439	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  this.castedType.getClasses();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  this.castedType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  this.castedType.getClasses();	  Type[]    classTypeVariables    =    castedType.getClasses();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	126	None	replace
440	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	40	1	replace
441	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	40	1	replace
442	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  rawParentClass  instanceof  TypeVariable  <?>)  {  [CE]  inconvertible  types  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  rawParentClass  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  rawParentClass  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  inconvertible  types	40	None	replace
443	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  ')'  expected	63	None	add
444	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typetoEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  typetoEvaluate  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(typetoEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(typetoEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  typetoEvaluate	63	None	add
445	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	106	None	replace
446	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
447	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
448	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	106	None	replace
449	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
450	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
451	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
452	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  	non-compiled	[CE]  ';'  expected	58	None	add
453	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  	non-compiled	[CE]  ';'  expected	58	None	add
454	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(parentType  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
455	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
456	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  not  a  statement	39	None	add
457	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
458	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  cfgParameterizedType.getClasses();  [CE]  cannot  find  symbol  cfgParameterizedType  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  cfgParameterizedType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  cfgParameterizedType.getClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol  cfgParameterizedType	5	None	replace
459	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rootType.getClasses();  [CE]  cannot  find  symbol  rootType  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rootType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rootType.getClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol  rootType	5	None	replace
460	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
461	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
462	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
463	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
464	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
465	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
466	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
467	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	125	None	replace
468	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  CategoryVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  CategoryVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  CategoryVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    CategoryVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
469	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(classTypeVariables    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	34	None	replace
470	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
471	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
472	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
473	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  not  a  statement	123	None	replace
474	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
475	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  fieldTypeVariable  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  not  a  statement	123	None	replace
476	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  castedType.getGenericParameterTypes();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  castedType.getGenericParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  castedType.getGenericParameterTypes();	  Type[]    parentTypeArguments    =    castedType.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
477	[BUG]  [BUGGY]  Type[]  rootTypeArguments  =  castedType.getParameterTypes();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rootTypeArguments  =  castedType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rootTypeArguments  =  castedType.getParameterTypes();	  Type[]    parentTypeArguments    =    castedType.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
478	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  not  a  statement	146	None	replace
479	[BUG]  [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>  ||  objParameterizedType)  {  [CE]  cannot  find  symbol  objParameterizedType  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(objParameterizedType  instanceof  TypeVariable  <?>  ||  objParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(objParameterizedType  instanceof  TypeVariable  <?>  ||  objParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluated    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  objParameterizedType	17	None	replace
480	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rootType.getClassParameters();  [CE]  cannot  find  symbol  rootType  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rootType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rootType.getClassParameters();	  Type[]    classTypeVariables    =    objParameterizedType.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol  rootType	10	None	replace
481	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  contextType.getClassParameters();  [CE]  cannot  find  symbol  contextType  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  contextType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  contextType.getClassParameters();	  Type[]    classTypeVariables    =    objParameterizedType.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol  contextType	10	None	replace
482	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  typeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  typeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  typeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
483	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instancesof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instancesof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instancesof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  ')'  expected	41	None	add
484	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  castedType.getRawClassArguments();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  castedType.getRawClassArguments();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  castedType.getRawClassArguments();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
485	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  rootType.getRawClassParameters();  [CE]  cannot  find  symbol  rootType  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  rootType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  rootType.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol  rootType	129	None	replace
486	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  as.getRawClassParameters();  [CE]  cannot  find  symbol  as  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  as.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  as.getRawClassParameters();	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol  as	129	None	replace
487	[BUG]  [BUGGY]  if(classTypeVariables  ==  null)  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(classTypeVariables  ==  null)  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(classTypeVariables  ==  null)  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
488	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  Class  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  Class  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  Class  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
489	[BUG]  [BUGGY]  if(classTypeVariables  ==  null)  {  }  else  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(classTypeVariables  ==  null)  {  }  else  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(classTypeVariables  ==  null)  {  }  else  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  'else'  without  'if'	147	None	replace
490	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  Class  <?>  parentType  =  getActualType(parentType,  parentType,  rawParentClass);  if(parentType.equals(typeToEvaluate))  {  return  parentType;  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
491	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
492	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  not  a  statement  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  not  a  statement	85	None	replace
493	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  not  a  statement  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  not  a  statement	85	None	replace
494	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  not  a  statement  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  not  a  statement	85	None	replace
495	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  rootType.getParameterTypes();  [CE]  cannot  find  symbol  rootType  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  rootType.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  rootType.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol  rootType	110	None	replace
496	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  as.getParameterTypes();  [CE]  cannot  find  symbol  as  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  as.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  as.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol  as	110	None	replace
497	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  owner.getParameterTypes();  [CE]  cannot  find  symbol  owner  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  owner.getParameterTypes();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  owner.getParameterTypes();	  Type[]    parentTypeArguments    =    typeToEvaluate.getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol  owner	110	None	replace
498	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
499	[BUG]  [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
500	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
501	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
502	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
503	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
504	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
505	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
506	[BUG]  [BUGGY]  Type[]  castedTypeVariables  =  castedType.getRawClassParameters();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  castedTypeVariables  =  castedType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  castedTypeVariables  =  castedType.getRawClassParameters();	  Type[]    classTypeVariables    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
507	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instancesof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instancesof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instancesof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
508	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  >=?>)  {  [CE]  illegal  start  of  expression  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  >=?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  >=?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
509	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
510	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
511	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
512	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
513	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
514	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
515	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
516	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [CE]  cannot  find  symbol  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
517	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
518	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
519	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables  ==  null)  {  return  classTypeVariables;  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables  ==  null)  {  return  classTypeVariables;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables  ==  null)  {  return  classTypeVariables;  }	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
520	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getTypeParameters();  if(rawParentClass!=  null)  {  return  rawParentClass;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getTypeParameters();  if(rawParentClass!=  null)  {  return  rawParentClass;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getTypeParameters();  if(rawParentClass!=  null)  {  return  rawParentClass;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
521	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  classTypeVariables;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
522	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>[]  rawParentClass  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
523	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  ==  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
524	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[classTypeVariables.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
525	[BUG]  [BUGGY]  }  else  if(groupTypeToEvaluate  instanceof  Class  <?>  ||  groupTypeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  groupTypeToEvaluate  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(groupTypeToEvaluate  instanceof  Class  <?>  ||  groupTypeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(groupTypeToEvaluate  instanceof  Class  <?>  ||  groupTypeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    Class    <?>    ||    groupTypeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  groupTypeToEvaluate	143	None	replace
526	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  ==?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  ==?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  ==?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
527	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
528	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
529	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
530	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
531	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  rootType.getRawClasses();  [CE]  cannot  find  symbol  rootType  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  rootType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  rootType.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol  rootType	11	None	replace
532	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  cfgParameterizedType.getRawClasses();  [CE]  cannot  find  symbol  cfgParameterizedType  [FE]                                    UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  cfgParameterizedType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  cfgParameterizedType.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol  cfgParameterizedType	11	None	replace
533	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
534	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
535	[BUG]  [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
536	[BUG]  [BUGGY]  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  variable  classTypeVariables  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  variable  classTypeVariables  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	107	None	replace
537	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
538	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
539	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
540	[BUG]  [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(classTypeVariables    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	15	None	replace
541	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
542	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
543	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
544	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
545	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
546	[BUG]  [BUGGY]  Type  parentType  =  actualType.getParameterType(actualType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  actualType.getParameterType(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  actualType.getParameterType(actualType);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
547	[BUG]  [BUGGY]  Type  parentType  =  actualTypeToEvaluate.getParameterType(actualType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  actualTypeToEvaluate.getParameterType(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  actualTypeToEvaluate.getParameterType(actualType);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
548	[BUG]  [BUGGY]  }  else  if(groupType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  groupType  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(groupType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(groupType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(groupTypeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol  groupType	139	None	replace
549	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  CategoryVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    typeVariable    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
550	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
551	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
552	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
553	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
554	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePar  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePar  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePar	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
555	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
556	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
557	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =  (TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  	non-compiled	[CE]  ';'  expected	51	None	add
558	[BUG]  [BUGGY]  Type[]  rawParentClass  =  castedType.getGenericRawClass();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  castedType.getGenericRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  castedType.getGenericRawClass();	  Type[]    rawParentClass    =    castedType.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	128	None	replace
559	[BUG]  [BUGGY]  }  else  if(classTypeVariables!=  null)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables!=  null)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables!=  null)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	30	None	replace
560	[BUG]  [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  [CE]  cannot  find  symbol  classTypeVariables  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  ==  null)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>[]    classTypeVariables)    {    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	30	None	replace
561	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
562	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
563	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    SortedType)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
564	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  &&  rawParentClass.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  &&  rawParentClass.isPrimitive())  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  &&  rawParentClass.isPrimitive())  {	  }    else    if(typeToEvaluate    instanceof    SortedType)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
565	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  Class)  {  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  Class)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  ||  typeToEvaluate  instanceof  Class)  {	  }    else    if(typeToEvaluate    instanceof    SortedType)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
566	[BUG]  [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  if(parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(classTypeVariables  ==  null)  {  if(parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(classTypeVariables  ==  null)  {  if(parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
567	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instancesof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  ')'  expected	120	None	add
568	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(groupTypeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  groupTypeToEvaluate  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(groupTypeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(groupTypeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  groupTypeToEvaluate	120	None	add
569	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(TypeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  TypeToEvaluate  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(TypeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(TypeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  TypeToEvaluate	120	None	add
570	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]          UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	120	None	add
571	[BUG]  [BUGGY]  if(classTypeVariables  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(classTypeVariables  ==  null)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(classTypeVariables  ==  null)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
572	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
573	[BUG]  [BUGGY]  if(classTypeVariables!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(classTypeVariables!=  null)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(classTypeVariables!=  null)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
574	[BUG]  [BUGGY]  typeToEvaluate  =  parentType.getTypeParameters();  [CE]  cannot  find  symbol  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  typeToEvaluate  =  parentType.getTypeParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	typeToEvaluate  =  parentType.getTypeParameters();	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
575	[BUG]  [BUGGY]  if(classTypeVariables  ==  null  ||  classTypeVariables.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(classTypeVariables  ==  null  ||  classTypeVariables.length  ==  0)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(classTypeVariables  ==  null  ||  classTypeVariables.length  ==  0)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
576	[BUG]  [BUGGY]  if(parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
577	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
578	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  rootType.getGenericParameters();  [CE]  cannot  find  symbol  rootType  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  rootType.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  rootType.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol  rootType	111	None	replace
579	[BUG]  [BUGGY]  Type[]  parentTypeArguments  =  params.getGenericParameters();  [CE]  cannot  find  symbol  params  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  parentTypeArguments  =  params.getGenericParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  parentTypeArguments  =  params.getGenericParameters();	  Type[]    parentTypeArguments    =    typeToEvaluate.getGenericParameters();    	non-compiled	[CE]  cannot  find  symbol  params	111	None	replace
580	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Serializable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
581	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  as.getRawClassParameters();  [CE]  cannot  find  symbol  as  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  as.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  as.getRawClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol  as	8	None	replace
582	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  not  a  statement	95	None	replace
583	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <  	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
584	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
585	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  ';'  expected	95	None	replace
586	[BUG]  [BUGGY]  Type  parentType  =  getActualType(parentType,  rawParentClass,  objParameterizedType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(parentType,  rawParentClass,  objParameterizedType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(parentType,  rawParentClass,  objParameterizedType);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
587	[BUG]  [BUGGY]  Type  parentType  =  getActualType(parentType,  rawParentClass,  typeToEvaluate);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(parentType,  rawParentClass,  typeToEvaluate);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(parentType,  rawParentClass,  typeToEvaluate);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
588	[BUG]  [BUGGY]  Type  parentType  =  getActualType(parentType,  rawParentClass,  componentType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(parentType,  rawParentClass,  componentType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(parentType,  rawParentClass,  componentType);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
589	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType.equals(typeToEvaluate))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType.equals(typeToEvaluate))  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	24	1	replace
590	[BUG]  [BUGGY]  }  else  if(parentType.equals(typeToEvaluate))  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType.equals(typeToEvaluate))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType.equals(typeToEvaluate))  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	24	1	replace
591	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  ParameterizedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  ParameterizedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	24	1	replace
592	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  ParameterizedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [FE]  UnsupportedOperationException  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  ParameterizedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  ParameterizedType  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  UnsupportedOperationException  	24	1	replace
593	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
594	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
595	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
596	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
597	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	109	None	replace
598	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(fieldTypeVariable!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  cannot  find  symbol  fieldTypeVariable  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(fieldTypeVariable!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(fieldTypeVariable!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  cannot  find  symbol  fieldTypeVariable	95	None	replace
599	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
600	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	95	1	replace
601	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	95	1	replace
602	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.  [CE]  <identifier>  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate!=  null)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
603	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  	non-compiled	[CE]  ';'  expected	118	None	add
604	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  	non-compiled	[CE]  ';'  expected	118	None	add
605	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter	  	non-compiled	[CE]  ';'  expected	118	None	add
606	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
607	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  castedType.getRawClassParameters(rawParentClass);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  castedType.getRawClassParameters(rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  castedType.getRawClassParameters(rawParentClass);	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
608	[BUG]  [BUGGY]  Type[]  rawParentClassArguments  =  castedType.getRawClassParameters(actualType);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClassArguments  =  castedType.getRawClassParameters(actualType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClassArguments  =  castedType.getRawClassParameters(actualType);	  Type[]    rawParentClassArguments    =    castedType.getRawClassParameters();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
609	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    }  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	120	None	add
610	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  if(parentType  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
611	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(parentType  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	43	None	add
612	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.  [CE]  <identifier>  expected  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.	  	non-compiled	[CE]  <identifier>  expected	43	None	add
613	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.is  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.is  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.is	  	non-compiled	[CE]  ')'  expected	43	None	add
614	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
615	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()!=  ';'  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()!=  ';'  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()!=  ';'	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
616	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
617	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
618	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()!=  ';'  expected  =  true;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()!=  ';'  expected  =  true;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()!=  ';'  expected  =  true;  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	147	None	replace
619	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
620	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
621	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
622	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
623	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
624	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  not  a  statement	146	None	replace
625	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  _classParameterizedType.getClasses();  [CE]  cannot  find  symbol  _classParameterizedType  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  _classParameterizedType.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  _classParameterizedType.getClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol  _classParameterizedType	5	None	replace
626	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
627	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
628	[BUG]  [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)parentType;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(parentType  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)parentType;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(parentType  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)parentType;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
629	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	148	None	replace
630	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  class	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  not  a  statement	148	None	replace
631	[BUG]  [BUGGY]  }  else  if(rawParentClass  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {  [CE]  inconvertible  types  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(rawParentClass  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(rawParentClass  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  inconvertible  types	100	None	replace
632	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  this.castedType.getRawClassParameters();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  this.castedType.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  this.castedType.getRawClassParameters();	  Type[]    classTypeVariables    =    castedType.getRawClassParameters();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	127	None	replace
633	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  this.typeToEvaluate.getClassParameters();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  this.typeToEvaluate.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  this.typeToEvaluate.getClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getClassParameters();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
634	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <!>)  {  [CE]  illegal  start  of  type  [FE]                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <!>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <!>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    TypeVariable    <!>)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
635	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>)  {  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Serializable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
636	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	26	1	replace
637	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  ParameterizedType)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	26	1	replace
638	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable)  {  [CE]  cannot  find  symbol  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Serializable)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
639	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
640	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  return  typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  return  typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  return  typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
641	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  typeToEvaluate  =(TypeVariable  <?>)typeToEvaluate;  }  else  if(typeToEvaluate  instanceof  Class  <?>	  	non-compiled	[CE]  ')'  expected	58	None	add
642	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(groupTypeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  groupTypeToEvaluate  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(groupTypeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(groupTypeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  groupTypeToEvaluate	63	None	add
643	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	63	None	add
644	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  TypeVariable  <?>)  {  [CE]  inconvertible  types  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  inconvertible  types	66	None	replace
645	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
646	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
647	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
648	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  Class  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
649	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    TypeVariable    <?>    parentType    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	149	None	replace
650	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	67	None	add
651	[BUG]  [BUGGY]  Type  parentType  =  getActualType(componentType,  parentType,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(componentType,  parentType,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(componentType,  parentType,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
652	[BUG]  [BUGGY]  Type  parentType  =  getActualType(castedType,  parentType,  rawParentClass);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  getActualType(castedType,  parentType,  rawParentClass);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  getActualType(castedType,  parentType,  rawParentClass);	  Type    parentType    =    getActualType(parentType,    rawParentClass);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	114	None	replace
653	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
654	[BUG]  [BUGGY]  }  else  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  {  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
655	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  currentType.getClassParameters();  [CE]  cannot  find  symbol  currentType  [FE]                              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  currentType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  currentType.getClassParameters();	  Type[]    classTypeVariables    =    castedType.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol  currentType	9	None	replace
656	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  _classParameterizedType.getRawClasses();  [CE]  cannot  find  symbol  _classParameterizedType  [FE]                                  UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  _classParameterizedType.getRawClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  _classParameterizedType.getRawClasses();	  Type[]    classTypeVariables    =    objParameterizedType.getRawClasses();    	non-compiled	[CE]  cannot  find  symbol  _classParameterizedType	11	None	replace
657	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  ParameterizedType)  {  [CE]  inconvertible  types  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  rawParentClass  instanceof  ParameterizedType)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    	non-compiled	[CE]  inconvertible  types	117	None	replace
658	[BUG]  [BUGGY]  Type  parentType  =  typeToEvaluate.getParameterType(componentType);  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =  typeToEvaluate.getParameterType(componentType);  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =  typeToEvaluate.getParameterType(componentType);	  Type    parentType    =    typeToEvaluate.getParameterType(actualType);    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	115	None	replace
659	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	41	None	add
660	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(childType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  childType  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(childType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(childType  instanceof  Class  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  childType	41	None	add
661	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  _classParameterizedType.getClassParameters();  [CE]  cannot  find  symbol  _classParameterizedType  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  _classParameterizedType.getClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  _classParameterizedType.getClassParameters();	  Type[]    classTypeVariables    =    objParameterizedType.getClassParameters();    	non-compiled	[CE]  cannot  find  symbol  _classParameterizedType	10	None	replace
662	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	60	None	add
663	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	60	None	add
664	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  this.typeToEvaluate.getClasses();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  this.typeToEvaluate.getClasses();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  this.typeToEvaluate.getClasses();	  Type[]    classTypeVariables    =    typeToEvaluate.getClasses();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	7	None	replace
665	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  	non-compiled	[CE]  ';'  expected	116	None	add
666	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameter	  	non-compiled	[CE]  ';'  expected	116	None	add
667	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  	non-compiled	[CE]  ';'  expected	116	None	add
668	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
669	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Serializable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    Class    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
670	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.is  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.is  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.is	  	non-compiled	[CE]  ')'  expected	37	None	add
671	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.  [CE]  <identifier>  expected  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    ||    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables.	  	non-compiled	[CE]  <identifier>  expected	37	None	add
672	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  this.typeToEvaluate.getRawClassParameters();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  this.typeToEvaluate.getRawClassParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  this.typeToEvaluate.getRawClassParameters();	  Type[]    classTypeVariables    =    typeToEvaluate.getRawClassParameters();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	8	None	replace
673	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  rawParentClass  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  rawParentClass  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	121	1	replace
674	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  rawParentClass  instanceof  Class  <?>)  {  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  rawParentClass  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  rawParentClass  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    parentType    instanceof    Class    <?>)    {    	compilable	  [FE]  UnsupportedOperationException  	121	1	replace
675	[BUG]  [BUGGY]  Type  parentType  =(typeToEvaluate  instanceof  Class  <?>)?(Class  <?>)typeToEvaluate  :  typeToEvaluate.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =(typeToEvaluate  instanceof  Class  <?>)?(Class  <?>)typeToEvaluate  :  typeToEvaluate.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =(typeToEvaluate  instanceof  Class  <?>)?(Class  <?>)typeToEvaluate  :  typeToEvaluate.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
676	[BUG]  [BUGGY]  Type  parentType  =(typeToEvaluate  instanceof  Class  <?>)?((  Class  <?>)typeToEvaluate).getParentClass()  :  typeToEvaluate.getParentClass();  [CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                            UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type  parentType  =(typeToEvaluate  instanceof  Class  <?>)?((  Class  <?>)typeToEvaluate).getParentClass()  :  typeToEvaluate.getParentClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type  parentType  =(typeToEvaluate  instanceof  Class  <?>)?((  Class  <?>)typeToEvaluate).getParentClass()  :  typeToEvaluate.getParentClass();	  Type    parentType    =    typeToEvaluate.getParentClass();    	non-compiled	[CE]  variable  parentType  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	112	None	replace
677	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType.equals(typeToEvaluate))  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(parentType.equals(typeToEvaluate))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(parentType.equals(typeToEvaluate))  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
678	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  Class  <?>)  {  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    Class    <?>)    {    }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	97	None	add
679	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
680	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    }  else  if(parentType  instanceof  TypeVariable  <?>  &&  parentType  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	39	None	add
681	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    Class    <?>    &&    typeToEvaluate    instanceof    TypeVariable    <?>)    {    typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  not  a  statement	39	None	add
682	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  ParameterizedType)  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(parentType  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
683	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(!(parentType  instanceof  TypeVariable  <?>))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(!(parentType  instanceof  TypeVariable  <?>))  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  if(!(parentType  instanceof  TypeVariable  <?>))  {	  }    else    if(typeToEvaluate    instanceof    Class    <?>)    {    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
684	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  expected  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  expected  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  expected	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
685	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
686	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables  ==  null)  {  return  typeToEvaluate;  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables  ==  null)  {  return  typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables  ==  null)  {  return  typeToEvaluate;  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
687	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  ';'  expected	96	None	replace
688	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  typeToEvaluate;  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  typeToEvaluate;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  return  typeToEvaluate;  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
689	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  if(classTypeVariables!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
690	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  expected  =  true;  }  [CE]  [FE]                            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  expected  =  true;  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  }  ';'  expected  =  true;  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters()    	non-compiled	[CE]  	96	None	replace
691	[BUG]  [BUGGY]  Type[]  classTypeVariables  =  castedType.getClassesParameters();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  classTypeVariables  =  castedType.getClassesParameters();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  classTypeVariables  =  castedType.getClassesParameters();	  Type[]    classTypeVariables    =    castedType.getClasses();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
692	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  CategoryVariable  <?>)  {  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  CategoryVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  ||  typeToEvaluate  instanceof  CategoryVariable  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(typeToEvaluate    instanceof    CategoryVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
693	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  	non-compiled	[CE]  ';'  expected	51	None	add
694	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.get	  	non-compiled	[CE]  ';'  expected	51	None	add
695	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    if(typeToEvaluate  instanceof  TypeVariable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  TypeVariable  <?>  parentType  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters()	  	non-compiled	[CE]  ';'  expected	51	None	add
696	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
697	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
698	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  if(parentType  instanceof  ParameterizedType)  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	106	None	replace
699	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  ParameterizedType)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  ParameterizedType)  {  }  else  {  TypeVariable  <?>  fieldTypeVariable  =(TypeVariable  <?>)typeToEvaluate;  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypePara	  }    else    if(typeToEvaluate    instanceof    ParameterizedType)    {    if(parentType    instanceof    ParameterizedType)    {    TypeVariable    <?>    fieldTypeVariable    =    (TypeVariable    <?>)    typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  ';'  expected	106	None	replace
700	[BUG]  [BUGGY]  Type[]  rawParentClass  =  actualTypeToEvaluate.getRawClass();  [CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)  [FE]                                UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  Type[]  rawParentClass  =  actualTypeToEvaluate.getRawClass();  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	Type[]  rawParentClass  =  actualTypeToEvaluate.getRawClass();	  Type[]    rawParentClass    =    typeToEvaluate.getRawClass();    	non-compiled	[CE]  variable  rawParentClass  is  already  defined  in  method  getActualType(Type,Type,Class<?>)	131	None	replace
701	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedArrayType)  {  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedArrayType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedArrayType)  {	  }    else    if(parentType    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
702	[BUG]  [BUGGY]  }  else  if(groupType  instanceof  TypeVariable  <?>  ||  groupType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  groupType  [FE]          UnsupportedOperationException      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(groupType  instanceof  TypeVariable  <?>  ||  groupType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(groupType  instanceof  TypeVariable  <?>  ||  groupType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    }    else    if(groupTypeToEvaluate    instanceof    TypeVariable    <?>    ||    typeToEvaluate    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  groupType	137	None	replace
703	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  missing  return  statement  [FE]    UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  missing  return  statement	3	None	add
704	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(childType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  childType  [FE]      UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(childType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(childType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol  childType	3	None	add
705	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType.isPrimitive()  ||  parentType  instanceof  Class  <?>)  {  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  Class  <?>)  {  }  else  if(parentType.isPrimitive()  ||  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    Class    <?>)    {    }  else  if(parentType.isPrimitive()  ||  parentType  instanceof  Class  <?>)  {	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
706	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]            java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
707	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  unreachable  statement  [FE]              java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
708	[BUG]  [BUGGY]  if(classTypeVariables!=  null)  {  TypeVariable  <?>[]  parentTypeVariables  =  rawParentClass.getTypeParameters();  }  [CE]  cannot  find  symbol  classTypeVariables  [FE]                java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(classTypeVariables!=  null)  {  TypeVariable  <?>[]  parentTypeVariables  =  rawParentClass.getTypeParameters();  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(classTypeVariables!=  null)  {  TypeVariable  <?>[]  parentTypeVariables  =  rawParentClass.getTypeParameters();  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  classTypeVariables	94	None	replace
709	[BUG]  [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[class  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[class  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate  instanceof  TypeVariable  <?>)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  new  TypeVariable  <?>[class	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
710	[BUG]  [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  getActualType(componentType,  parentType,  rawParentClass);  }  [CE]  unreachable  statement  [FE]                    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  if(typeToEvaluate!=  null)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  getActualType(componentType,  parentType,  rawParentClass);  }  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	if(typeToEvaluate!=  null)  {  }  else  {  TypeVariable  <?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  typeToEvaluate  =  getActualType(componentType,  parentType,  rawParentClass);  }	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate!=    null)    {    TypeVariable    <?>    fieldTypeVariable    =(TypeVariable    <?>)typeToEvaluate;    TypeVariable    <?>[]    classTypeVariables    =    rawParentClass.getTypeParameters();    	non-compiled	[CE]  unreachable  statement	94	None	replace
711	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>,  rawParentClass)  {  [CE]  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  SortedType  <?>,  rawParentClass)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  SortedType  <?>,  rawParentClass)  {	  }    else    if(typeToEvaluate    instanceof    SortedType    <?>)    {    	non-compiled	[CE]  	102	None	replace
712	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>  ||  parentType  instanceof  TypeVariable  <?>)  {  }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}    else    if(parentType    instanceof    TypeVariable    <?>    ||    parentType    instanceof    TypeVariable    <?>)    {    }  else  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  TypeVariable  <?>)  {	  	non-compiled	[CE]  missing  return  statement	65	None	add
713	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class      [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {  if(typeToEvaluate  instanceof  TypeVariable  <?>  ||  typeToEvaluate  instanceof  Class  <?>)  {	  }    else    if(parentType    instanceof    TypeVariable    <?>)    {    if(typeToEvaluate    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
714	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [CE]  cannot  find  symbol  [FE]    java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Serializable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Serializable  <?>  &&  typeToEvaluate  instanceof  ParameterizedType)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
715	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	add	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
716	[BUG]  [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  [FE]      java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class    [CONTEXT]      }  else  if  (typeToEvaluate  instanceof  GenericArrayType)  {  GenericArrayType  castedType  =  (GenericArrayType)  typeToEvaluate;  Type  componentType  =  castedType.getGenericComponentType();  Type  actualType  =  getActualType(componentType,  parentType,  rawParentClass);  if  (componentType.equals(actualType))  {  return  castedType;  }  return  actualType  instanceof  Class<?>  ?  TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))  :  new  GenericArrayTypeImpl(actualType);      [BUGGY]  }  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {  [BUGGY]      if  (parentType  instanceof  ParameterizedType)  {        TypeVariable<?>  fieldTypeVariable  =  (TypeVariable<?>)  typeToEvaluate;  TypeVariable<?>[]  classTypeVariables  =  rawParentClass.getTypeParameters();  ParameterizedType  objParameterizedType  =  (ParameterizedType)  parentType;  [CLASS]  TypeInfoFactory  [METHOD]  getActualType  [RETURN_TYPE]  Type  Type  typeToEvaluate  Type  parentType  Class<?>  rawParentClass  [VARIABLES]  ParameterizedType  castedType  objParameterizedType  Type  actualType  componentType  owner  parentType  rawType  typeToEvaluate  WildcardType  castedType  boolean  TypeVariable  fieldTypeVariable  Type[]  actualTypeArguments  actualTypeParameters  Class  rawParentClass  GenericArrayType  castedType  TypeVariable[]  classTypeVariables  int  indexOfActualTypeArgument  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	79	79	1	replace	}  else  if(typeToEvaluate  instanceof  Class  <?>  &&  parentType  instanceof  Class  <?>)  {	  }    else    if(typeToEvaluate    instanceof    TypeVariable    <?>    &&    typeToEvaluate    instanceof    ParameterizedType)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'S'  is  not  a  Class  	52	1	replace
