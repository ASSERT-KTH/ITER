bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]    UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
2	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF);  [CE]  cannot  find  symbol  [FE]      UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
3	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	1	None	replace
4	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
5	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
6	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  classDefiningF  [FE]                UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]    [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	  	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  cannot  find  symbol  classDefiningF	1	None	replace
8	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]    UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
9	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]      UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
10	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule());  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule());	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]      UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType());  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType());	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
12	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF);  [BUGGY]  Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF);	Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
