bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  f);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  f);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
4	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  this.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  this.typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	12	None	replace
5	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  null);  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  null);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
6	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF,  f.getTypeInfoForField(typeDefiningF);  [CE]  ';'  expected  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF,  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF,  f.getTypeInfoForField(typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
8	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
9	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  class);  [CE]  illegal  start  of  expression  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  class);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  class);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
10	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
11	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDefiningF.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	30	None	replace
12	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
13	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
14	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  scope.getModule());  [CE]  cannot  find  symbol  scope  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  scope.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  scope.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol  scope	30	None	replace
15	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	58	None	replace
16	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF.getGenericType());  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
17	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  f.getGenericType());  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
18	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getActualType());  [CE]  illegal  start  of  expression  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getActualType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getActualType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
19	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getGenericParameterType(0));  [CE]  illegal  start  of  expression  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
20	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	94	None	replace
21	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	94	None	replace
22	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	94	None	replace
23	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	94	None	replace
24	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	94	None	replace
25	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	94	None	replace
26	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f);  [CE]  illegal  start  of  expression  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
27	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  f.getGenericType());  [CE]  illegal  start  of  expression  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
28	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  true);  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
29	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  f);  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
30	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	97	None	replace
31	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	97	None	replace
32	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	97	None	replace
33	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  typeDefiningF);  [CE]  cannot  find  symbol  type  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f);    	non-compiled	[CE]  cannot  find  symbol  type	97	None	replace
34	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	97	None	replace
35	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoFactory);  [CE]  cannot  find  symbol  typeInfoFactory  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeFactory);    	non-compiled	[CE]  cannot  find  symbol  typeInfoFactory	90	None	replace
36	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  actualType);  [CE]  cannot  find  symbol  actualType  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  actualType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  actualType);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeFactory);    	non-compiled	[CE]  cannot  find  symbol  actualType	90	None	replace
37	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeFactory);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	90	None	replace
38	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfoFactory);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfoFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfoFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeFactory);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	90	None	replace
39	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeFactory);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	90	None	replace
40	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeName);  [CE]  cannot  find  symbol  typeName  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeName);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeName);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeResolver);    	non-compiled	[CE]  cannot  find  symbol  typeName	91	None	replace
41	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeTypeResolver);  [CE]  cannot  find  symbol  typeTypeResolver  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeTypeResolver);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeTypeResolver);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeResolver);    	non-compiled	[CE]  cannot  find  symbol  typeTypeResolver	91	None	replace
42	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
43	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getModule());  [CE]  illegal  start  of  expression  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    f.getModule());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
44	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule(),  null);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule(),  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule(),  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
45	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType(),  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDeiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	77	None	replace
46	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType(),  typeDefiningF);  [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDeiningF);    	non-compiled	[CE]  cannot  find  symbol  type	77	None	replace
47	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType(),  typeDeiningF);  [CE]  cannot  find  symbol  type  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType(),  typeDeiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType(),  typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDeiningF);    	non-compiled	[CE]  cannot  find  symbol  type	77	None	replace
48	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  actualType);  [CE]  cannot  find  symbol  actualType  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  actualType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  actualType);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDeiningF);    	non-compiled	[CE]  cannot  find  symbol  actualType	77	None	replace
49	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  typeDefiningF);  [CE]  cannot  find  symbol  type  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    typeInfoF);    	non-compiled	[CE]  cannot  find  symbol  type	20	None	replace
50	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeInfoF);  [CE]  cannot  find  symbol  typeInfoF  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeInfoF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeInfoF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    typeInfoF);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	20	None	replace
51	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeInfoF,  f);  [CE]  cannot  find  symbol  typeInfoF  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeInfoF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeInfoF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    typeInfoF);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	20	None	replace
52	[BUG]  [BUGGY]  Class  <?>  typeInfoF  =  TypeUtils.getClass(typeDefiningF,  f);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeInfoF  =  TypeUtils.getClass(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeInfoF  =  TypeUtils.getClass(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    typeInfoF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	20	None	replace
53	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	4	None	replace
54	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(value,  f);  [CE]  cannot  find  symbol  value  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(value,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(value,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f);    	non-compiled	[CE]  cannot  find  symbol  value	4	None	replace
55	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoFactory.getModule());  [CE]  cannot  find  symbol  typeInfoFactory  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoFactory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoFactory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    mapper.getModule());    	non-compiled	[CE]  cannot  find  symbol  typeInfoFactory	93	None	replace
56	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeName);  [CE]  cannot  find  symbol  typeName  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeName);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeName);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    type);    	non-compiled	[CE]  cannot  find  symbol  typeName	59	None	replace
57	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    type);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	59	None	replace
58	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    type);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	59	None	replace
59	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
60	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
61	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
62	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
63	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
64	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
65	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
66	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getClass().getSuperclass();  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getClass().getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getClass().getSuperclass();	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	79	None	replace
67	[BUG]  [BUGGY]  Type  classDefiningF  =  typeDefiningF.getClass();  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  typeDefiningF.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  typeDefiningF.getClass();	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	79	None	replace
68	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getClass(),  typeDefiningF);  [CE]  ';'  expected  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getClass(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getClass(),  typeDefiningF);	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  ';'  expected	79	None	replace
69	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getClass().getSuperclass(typeDefiningF);  [CE]  method  getSuperclass  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getClass().getSuperclass(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getClass().getSuperclass(typeDefiningF);	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  method  getSuperclass  in  class  Class<T>  cannot  be  applied  to  given  types;	79	None	replace
70	[BUG]  [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getClass();  [CE]  ';'  expected  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f,  typeDefiningF.getClass();	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  ';'  expected	79	None	replace
71	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  null);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    null);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
72	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  null);  [CE]  illegal  start  of  expression  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
73	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  null);  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    null);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
74	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null,  false);  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    null);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
75	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getGenericType());  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getGenericType());	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	66	None	replace
76	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  true);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  true);	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	66	None	replace
77	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  classDefiningF  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF);	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  classDefiningF	66	None	replace
78	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  false);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  false);	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	66	None	replace
79	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  null);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  null);	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	66	None	replace
80	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.class);  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.class);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.class);	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
81	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.factory);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.factory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	96	None	replace
82	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeNameFactory);  [CE]  cannot  find  symbol  typeNameFactory  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeNameFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeNameFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory);    	non-compiled	[CE]  cannot  find  symbol  typeNameFactory	96	None	replace
83	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  type);  [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
84	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f);  [CE]  cannot  find  symbol  type  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
85	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	14	None	replace
86	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeInfoFactory);  [CE]  cannot  find  symbol  typeInfoFactory  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeInfoFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeInfoFactory);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeInfoFactory	14	None	replace
87	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
88	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.getModule());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
89	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
90	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
91	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
92	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  false,  f.getModule());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  false,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  false,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
93	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  type);  [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	21	None	replace
94	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  false);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
95	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  null);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  null);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
96	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
97	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	57	None	replace
98	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	57	None	replace
99	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	57	None	replace
100	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  this);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  this);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	57	None	replace
101	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	57	None	replace
102	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.typeDefiningF,  f);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(this.typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	110	None	replace
103	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(this.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(this.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(this.typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	110	None	replace
104	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  this.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  this.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(this.typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	110	None	replace
105	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	84	None	replace
106	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	84	None	replace
107	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null);  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
108	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null);  [CE]  cannot  find  symbol  typeInfoF  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	84	None	replace
109	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF);  [CE]  cannot  find  symbol  typeInfoF  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	84	None	replace
110	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  false);  [CE]  illegal  start  of  expression  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
111	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	60	None	replace
112	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getGenericValue());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getGenericValue());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getGenericValue());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
113	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  typeDefiningF,  false);  [CE]  cannot  find  symbol  type  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol  type	60	None	replace
114	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  actualType);  [CE]  cannot  find  symbol  actualType  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  actualType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  actualType);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    factory);    	non-compiled	[CE]  cannot  find  symbol  actualType	73	None	replace
115	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  this.factory);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  this.factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  this.factory);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    factory);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	73	None	replace
116	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  owner);  [CE]  cannot  find  symbol  owner  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  owner);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  owner);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    factory);    	non-compiled	[CE]  cannot  find  symbol  owner	73	None	replace
117	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	47	None	replace
118	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	47	None	replace
119	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	47	None	replace
120	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null,  true);  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
121	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null,  true);  [CE]  cannot  find  symbol  typeInfoF  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	47	None	replace
122	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  true);  [CE]  cannot  find  symbol  typeInfoF  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	47	None	replace
123	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  scope);  [CE]  cannot  find  symbol  scope  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  scope);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  scope);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(scope,    f);    	non-compiled	[CE]  cannot  find  symbol  scope	50	None	replace
124	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  true);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
125	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
126	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  true);  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    true);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
127	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
128	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  true,  false);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  true,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  true,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
129	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  typeDeiningF);  [CE]  cannot  find  symbol  type  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  typeDeiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDeiningF);    	non-compiled	[CE]  cannot  find  symbol  type	99	None	replace
130	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF.getGenericType());  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
131	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	53	None	replace
132	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  f.getGenericType());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
133	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	46	None	replace
134	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	46	None	replace
135	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	46	None	replace
136	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	46	None	replace
137	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  typeDefiningF,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	46	None	replace
138	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeType);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	7	None	replace
139	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  typeDefiningF  }  );  [CE]  incompatible  types  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  typeDefiningF  }  );  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  typeDefiningF  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  incompatible  types	51	None	replace
140	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  new  Field[]  {  f  }  );  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  new  Field[]  {  f  }  );  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  new  Field[]  {  f  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	51	None	replace
141	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  new  Field[]  {  f  }  );  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  new  Field[]  {  f  }  );  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  new  Field[]  {  f  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	51	None	replace
142	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  },  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  },  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  },  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	51	None	replace
143	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(new  Field[]  {  f  }  );  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(new  Field[]  {  f  }  );  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(new  Field[]  {  f  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
144	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  new  Field[]  {  f  }  );  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  new  Field[]  {  f  }  );  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  new  Field[]  {  f  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
145	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	74	None	replace
146	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	74	None	replace
147	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getReturnType();  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getReturnType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getReturnType();	  Class    <?>    classDefiningF    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
148	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getSuperclass();  [CE]  cannot  find  symbol  [FE]      UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getSuperclass();	  Class    <?>    classDefiningF    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
149	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	add	Class  <?>  classDefiningF  =  typeDefiningF.getClass();	  Class    <?>    classDefiningF    =    f.getClass();    	compilable	  [FE]  UnsupportedOperationException  	70	1	replace
150	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getClass();  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getClass();	  Class    <?>    classDefiningF    =    f.getClass();    	compilable	  [FE]  UnsupportedOperationException  	70	1	replace
151	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getComponentType();  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getComponentType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getComponentType();	  Class    <?>    classDefiningF    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
152	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getDeclaredType();  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getDeclaredType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getDeclaredType();	  Class    <?>    classDefiningF    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
153	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
154	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
155	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getRawClass();  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  typeDefiningF.getRawClass();	  Class    <?>    classDefiningF    =    typeDefiningF.getRawClass();    	non-compiled	[CE]  ';'  expected	37	None	replace
156	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF,  f.getRawClass();  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF,  f.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF,  f.getRawClass();	  Class    <?>    classDefiningF    =    typeDefiningF.getRawClass();    	non-compiled	[CE]  ';'  expected	37	None	replace
157	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF).getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	add	Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF).getRawClass();	  Class    <?>    classDefiningF    =    typeDefiningF.getRawClass();    	compilable	  [FE]  StackOverflowError  	37	1	replace
158	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF).getRawClass();  [FE]  StackOverflowError  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF).getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF).getRawClass();	  Class    <?>    classDefiningF    =    typeDefiningF.getRawClass();    	compilable	  [FE]  StackOverflowError  	37	1	replace
159	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF.getRawClass());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF.getRawClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  getTypeInfoForField(f,  typeDefiningF.getRawClass());	  Class    <?>    classDefiningF    =    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
160	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  this.typeDefiningF.getRawClass();	  Class    <?>    classDefiningF    =    typeDefiningF.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	37	None	replace
161	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  scope);  [CE]  cannot  find  symbol  scope  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  scope);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  scope);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(scope,    f);    	non-compiled	[CE]  cannot  find  symbol  scope	109	None	replace
162	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  typeDefiningF);  [CE]  cannot  find  symbol  scope  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(scope,    f);    	non-compiled	[CE]  cannot  find  symbol  scope	109	None	replace
163	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.field.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.field.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.field.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    field.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	86	None	replace
164	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfo.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfo.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfo.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    field.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	86	None	replace
165	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  false);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
166	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
167	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false,  f);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
168	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
169	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericType());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	16	None	replace
170	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
171	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getGenericType());  [CE]  cannot  find  symbol  type  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  type	16	None	replace
172	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	16	None	replace
173	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getGenericType());  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
174	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericType());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	16	None	replace
175	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  type);  [CE]  cannot  find  symbol  type  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  type);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  type	16	None	replace
176	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  f.getGenericType());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	15	None	replace
177	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(clazz,  f,  typeDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(clazz,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(clazz,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	15	None	replace
178	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  actualType);  [CE]  cannot  find  symbol  actualType  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  actualType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  actualType);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  actualType	15	None	replace
179	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClasses(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClasses(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClasses(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
180	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  true);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	15	None	replace
181	[BUG]  [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getGenericClass();  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f,  typeDefiningF.getGenericClass();	  Type    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  ';'  expected	78	None	replace
182	[BUG]  [BUGGY]  Type  classDefiningF  =  typeDefiningF.getGenericClass();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  typeDefiningF.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  typeDefiningF.getGenericClass();	  Type    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
183	[BUG]  [BUGGY]  Type  typeDefiningF  =  f.getGenericClass();  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  typeDefiningF  =  f.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  typeDefiningF  =  f.getGenericClass();	  Type    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	78	None	replace
184	[BUG]  [BUGGY]  Type  classDefiningF  =  f,  f.getGenericClass();  [CE]  ';'  expected  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f,  f.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f,  f.getGenericClass();	  Type    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  ';'  expected	78	None	replace
185	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericClass(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericClass(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericClass(typeDefiningF);	  Type    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
186	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
187	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF.getModule());  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getModule());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
188	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f.getModule());  [CE]  cannot  find  symbol  clazz  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol  clazz	27	None	replace
189	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.getTypeInfoForField(f);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.getTypeInfoForField(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  this.typeDefiningF.getTypeInfoForField(f);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	40	None	replace
190	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF,  f.getTypeInfoForField(f);  [CE]  ';'  expected  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF,  f.getTypeInfoForField(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF,  f.getTypeInfoForField(f);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f);    	non-compiled	[CE]  ';'  expected	40	None	replace
191	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getTypeInfoForField(f);  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getTypeInfoForField(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  typeDefiningF.getTypeInfoForField(f);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f);    	non-compiled	[CE]  ';'  expected	40	None	replace
192	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getGenericClass();  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  typeDefiningF.getGenericClass();	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  ';'  expected	102	None	replace
193	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getGenericClass();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getGenericClass();	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
194	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericClass(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericClass(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getGenericClass(typeDefiningF);	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
195	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericClass()  ||  typeDefiningF.getGenericClass();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericClass()  ||  typeDefiningF.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getGenericClass()  ||  typeDefiningF.getGenericClass();	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
196	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericType();  [CE]  incompatible  types  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getGenericType();	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  incompatible  types	102	None	replace
197	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.findClass(typeDefiningF).getGenericClass();  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.findClass(typeDefiningF).getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.findClass(typeDefiningF).getGenericClass();	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
198	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(class,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(class,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(class,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
199	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
200	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
201	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
202	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  false);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
203	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
204	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  false,  f);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  false,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  false,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
205	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
206	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  null);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
207	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  actualType);  [CE]  cannot  find  symbol  actualType  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  actualType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  actualType);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    type);    	non-compiled	[CE]  cannot  find  symbol  actualType	19	None	replace
208	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    type);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	19	None	replace
209	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.type);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    type);    	non-compiled	[CE]  type  has  private  access  in  Field	19	None	replace
210	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  null);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    type);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	19	None	replace
211	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f);  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
212	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  false);  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
213	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
214	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
215	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
216	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
217	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getModule());  [CE]  cannot  find  symbol  type  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
218	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getModule());  [CE]  illegal  start  of  expression  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
219	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  actualType);  [CE]  cannot  find  symbol  actualType  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  actualType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  actualType);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    type);    	non-compiled	[CE]  cannot  find  symbol  actualType	63	None	replace
220	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    type);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	63	None	replace
221	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    type);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	63	None	replace
222	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f.type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    type);    	non-compiled	[CE]  type  has  private  access  in  Field	63	None	replace
223	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    type);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	63	None	replace
224	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	3	None	replace
225	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	3	None	replace
226	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  this);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  this);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	3	None	replace
227	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  this);  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  this);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  this);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    this);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
228	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  getGenericType());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    this);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
229	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
230	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
231	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.fromRawClass(typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.fromRawClass(typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.fromRawClass(typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
232	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.toRawClass(f.getModule());  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.toRawClass(f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  typeDefiningF.toRawClass(f.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  ';'  expected	32	None	replace
233	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  this.f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  this.f.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	32	None	replace
234	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  field.getModule());  [CE]  cannot  find  symbol  field  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  field.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  field.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  field	32	None	replace
235	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
236	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
237	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
238	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericParameterType(1));  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericParameterType(1));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericParameterType(1));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
239	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
240	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericParameterType(1));  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericParameterType(1));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericParameterType(1));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
241	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterType(1));  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterType(1));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterType(1));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
242	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  parent);  [CE]  cannot  find  symbol  parent  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  parent);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  parent);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(parent,    f);    	non-compiled	[CE]  cannot  find  symbol  parent	52	None	replace
243	[BUG]  [BUGGY]  Class  <?>  parent  =  TypeUtils.toRawClass(f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  parent  =  TypeUtils.toRawClass(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  parent  =  TypeUtils.toRawClass(f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(parent,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	52	None	replace
244	[BUG]  [BUGGY]  Class  <?>  parent  =  TypeUtils.toRawClass(f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  parent  =  TypeUtils.toRawClass(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  parent  =  TypeUtils.toRawClass(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(parent,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	52	None	replace
245	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(class,  f);  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(class,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(class,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
246	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(f);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.constructType(f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
247	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(this.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(this.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	23	None	replace
248	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  type);  [CE]  cannot  find  symbol  type  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
249	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
250	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(classDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
251	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getSuperclass());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
252	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getSuperclass());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
253	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getSuperclass());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
254	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getSuperclass());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
255	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getSuperclass());  [CE]  cannot  find  symbol  type  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  cannot  find  symbol  type	103	None	replace
256	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getSuperclass());  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
257	[BUG]  [BUGGY]  Type  f  =  typeDefiningF.getGenericType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  typeDefiningF.getGenericType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  typeDefiningF.getGenericType();	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
258	[BUG]  [BUGGY]  Type  f  =  f.getTypeInfo();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getTypeInfo();	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
259	[BUG]  [BUGGY]  Type  f  =  f.getDeclaredType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getDeclaredType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getDeclaredType();	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
260	[BUG]  [BUGGY]  Type  f  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getType();	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
261	[BUG]  [BUGGY]  Type  f  =  f.getTypeInfoForField(typeDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getTypeInfoForField(typeDefiningF);	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
262	[BUG]  [BUGGY]  Type  f  =  f.getFunctionType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getFunctionType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getFunctionType();	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
263	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  actualType);  [CE]  cannot  find  symbol  actualType  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  actualType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  actualType);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  actualType	1	None	replace
264	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	1	None	replace
265	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getTypeInfo();	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
266	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField(f);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getTypeInfoForField(f);	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
267	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getTypeInfoForField(typeDefiningF);	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
268	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getTypeInfoForField(f,  typeDefiningF);	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
269	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getFunctionTypeInfo();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getFunctionTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getFunctionTypeInfo();	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
270	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getDeclaredTypeInfo();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getDeclaredTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getDeclaredTypeInfo();	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
271	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Class  <?>  classDefiningF  =  f.getClass();  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]    UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Class  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Class  <?>  classDefiningF  =  f.getClass();	  	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	69	None	add
272	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Type  <?>  classDefiningF  =  f.getClass();  [CE]  type  Type  does  not  take  parameters  [FE]      UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Type  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Type  <?>  classDefiningF  =  f.getClass();	  	non-compiled	[CE]  type  Type  does  not  take  parameters	69	None	add
273	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Category  <?>  classDefiningF  =  f.getClass();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Category  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Category  <?>  classDefiningF  =  f.getClass();	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
274	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Object  <?>  classDefiningF  =  f.getClass();  [CE]  type  Object  does  not  take  parameters  [FE]          UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Object  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Object  <?>  classDefiningF  =  f.getClass();	  	non-compiled	[CE]  type  Object  does  not  take  parameters	69	None	add
275	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Field  <?>  classDefiningF  =  f.getClass();  [CE]  type  Field  does  not  take  parameters  [FE]            UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Field  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Field  <?>  classDefiningF  =  f.getClass();	  	non-compiled	[CE]  type  Field  does  not  take  parameters	69	None	add
276	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Class  <?>  classDefiningF  =  f.getClass());  [CE]  ';'  expected  [FE]              UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Class  <?>  classDefiningF  =  f.getClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Class  <?>  classDefiningF  =  f.getClass());	  	non-compiled	[CE]  ';'  expected	69	None	add
277	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Sort  <?>  classDefiningF  =  f.getClass();  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Sort  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Sort  <?>  classDefiningF  =  f.getClass();	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
278	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  true);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  true);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
279	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
280	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  f);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
281	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
282	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  type);  [CE]  cannot  find  symbol  type  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  type);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol  type	26	None	replace
283	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	62	None	replace
284	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null,  false);  [CE]  cannot  find  symbol  typeInfoF  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeInfoF,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	62	None	replace
285	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null,  false);  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    false);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
286	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getGenericType());  [CE]  illegal  start  of  expression  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
287	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType());  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f.getGenericType());    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	55	None	replace
288	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(value,  f.getGenericType());  [CE]  cannot  find  symbol  value  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(value,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(value,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  value	55	None	replace
289	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(this.type,  f.getGenericType());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(this.type,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(this.type,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f.getGenericType());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	55	None	replace
290	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	85	None	replace
291	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	85	None	replace
292	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	85	None	replace
293	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  true,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  true,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  true,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	85	None	replace
294	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	29	None	replace
295	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  f.getModule());  [CE]  illegal  start  of  expression  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getModule());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
296	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  f.getModule());  [CE]  cannot  find  symbol  type  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  type	29	None	replace
297	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  type);  [CE]  cannot  find  symbol  type  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	33	None	replace
298	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
299	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  null);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
300	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  false);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
301	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
302	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  type);  [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  type	54	None	replace
303	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  f.getGenericType());  [CE]  cannot  find  symbol  type  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  type	54	None	replace
304	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeInfo);  [CE]  cannot  find  symbol  typeInfo  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeInfo);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeInfo);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  typeInfo	54	None	replace
305	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	54	None	replace
306	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeInfoF,  f,  f.getGenericType());  [CE]  cannot  find  symbol  typeInfoF  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeInfoF,  f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeInfoF,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	54	None	replace
307	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	54	None	replace
308	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.factory.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.factory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.factory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	87	None	replace
309	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeFactory.getModule());  [CE]  cannot  find  symbol  typeFactory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeFactory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeFactory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory.getModule());    	non-compiled	[CE]  cannot  find  symbol  typeFactory	87	None	replace
310	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  factory.getModule());  [CE]  cannot  find  symbol  factory  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  factory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  factory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory.getModule());    	non-compiled	[CE]  cannot  find  symbol  factory	87	None	replace
311	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
312	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getGenericType());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
313	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getGenericType());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
314	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
315	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  f.getGenericType());  [CE]  cannot  find  symbol  type  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  type	38	None	replace
316	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getGenericType());  [CE]  illegal  start  of  expression  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
317	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getModule(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getModule(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getModule(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
318	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
319	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  null);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
320	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
321	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
322	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	95	None	replace
323	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	95	None	replace
324	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	95	None	replace
325	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  type);  [CE]  cannot  find  symbol  type  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	95	None	replace
326	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(classDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(classDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(classDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
327	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  type);  [CE]  cannot  find  symbol  type  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f);    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
328	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  type);  [CE]  cannot  find  symbol  type  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f);    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
329	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
330	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
331	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  false,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  false,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  typeDefiningF,  false,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
332	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeName);  [CE]  cannot  find  symbol  typeName  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeName);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f,  typeName);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f);    	non-compiled	[CE]  cannot  find  symbol  typeName	45	None	replace
333	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	43	None	replace
334	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  typeDefiningF,  true);  [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol  type	43	None	replace
335	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	43	None	replace
336	[BUG]  [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getSuperclass();  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f,  typeDefiningF.getSuperclass();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  ';'  expected	80	None	replace
337	[BUG]  [BUGGY]  Type  classDefiningF  =  typeDefiningF.getSuperclass();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  typeDefiningF.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  typeDefiningF.getSuperclass();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
338	[BUG]  [BUGGY]  Type  typeDefiningF  =  f.getSuperclass();  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  typeDefiningF  =  f.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  typeDefiningF  =  f.getSuperclass();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	80	None	replace
339	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getSuperclass()  ||  typeDefiningF.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getSuperclass()  ||  typeDefiningF.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getSuperclass()  ||  typeDefiningF.getSuperclass();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
340	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getSuperclass(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getSuperclass(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getSuperclass(typeDefiningF);	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
341	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getSuperclass()  ||  typeDefiningF.isInterface();  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getSuperclass()  ||  typeDefiningF.isInterface();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getSuperclass()  ||  typeDefiningF.isInterface();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
342	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
343	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
344	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
345	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
346	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  f.getGenericType());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
347	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  null);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
348	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getModifiers());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
349	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getModifiers());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
350	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getModifiers());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
351	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  f.getModifiers());  [CE]  cannot  find  symbol  type  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  f.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  f.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol  type	108	None	replace
352	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getModifiers());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
353	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getModifiers());  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
354	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
355	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.constructType(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
356	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass()  ||  typeDefiningF!=  null?  null  :  f.getRawClass();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass()  ||  typeDefiningF!=  null?  null  :  f.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getRawClass()  ||  typeDefiningF!=  null?  null  :  f.getRawClass();	  Class    <?>    classDefiningF    =    f.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
357	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getRawClass(typeDefiningF);	  Class    <?>    classDefiningF    =    f.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
358	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass()  ||  typeDefiningF.getRawClass();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass()  ||  typeDefiningF.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getRawClass()  ||  typeDefiningF.getRawClass();	  Class    <?>    classDefiningF    =    f.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
359	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
360	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
361	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(classDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(classDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
362	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
363	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
364	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  false);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
365	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
366	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
367	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericType(),  typeDefiningF);  [CE]  ';'  expected  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericType(),  typeDefiningF);	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  ';'  expected	67	None	replace
368	[BUG]  [BUGGY]  Type  classDefiningF  =  typeDefiningF.getGenericType();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  typeDefiningF.getGenericType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  typeDefiningF.getGenericType();	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
369	[BUG]  [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getGenericType();  [CE]  ';'  expected  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f,  typeDefiningF.getGenericType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f,  typeDefiningF.getGenericType();	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  ';'  expected	67	None	replace
370	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericType(typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericType(typeDefiningF);	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	67	None	replace
371	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericType()  ||  typeDefiningF.isInterface();  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericType()  ||  typeDefiningF.isInterface();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericType()  ||  typeDefiningF.isInterface();	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
372	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getDeclaringClass());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	104	None	replace
373	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
374	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getDeclaringClass());  [CE]  cannot  find  symbol  type  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  type	104	None	replace
375	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getDeclaringClass());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	104	None	replace
376	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getDeclaringClass());  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
377	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	104	None	replace
378	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  type);  [CE]  cannot  find  symbol  type  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  type);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  type	104	None	replace
379	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f);  [CE]  illegal  start  of  expression  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
380	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(f);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getRawClass(f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
381	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class);  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
382	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeInfoFactory);  [CE]  cannot  find  symbol  typeInfoFactory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeInfoFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeInfoFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    f);    	non-compiled	[CE]  cannot  find  symbol  typeInfoFactory	44	None	replace
383	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeName);  [CE]  cannot  find  symbol  typeName  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeName);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeName);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    f);    	non-compiled	[CE]  cannot  find  symbol  typeName	44	None	replace
384	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	76	None	replace
385	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	76	None	replace
386	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(class,  typeDefiningF,  true);  [CE]  illegal  start  of  expression  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(class,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(class,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
387	[BUG]  [BUGGY]  final  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  true);  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  final  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	final  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
388	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
389	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
390	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
391	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
392	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericParameterType(1));  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericParameterType(1));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getGenericParameterType(1));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
393	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  type  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(type,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol  type	81	None	replace
394	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getParameterType(0));  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
395	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getParameterType(0));  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
396	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getParameterType(0));  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF.getParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
397	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getParameterType(0));  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeDefiningF.getParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
398	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getParameterType(1));  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getParameterType(1));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  f.getParameterType(1));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
399	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getParameterType(1));  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getParameterType(1));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getParameterType(1));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
400	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
401	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
402	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
403	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
404	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModule(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModule(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModule(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
405	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getModule());  [CE]  illegal  start  of  expression  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(class,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
406	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeInfoF,  f,  typeDefiningF);  [CE]  cannot  find  symbol  typeInfoF  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeInfoF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeInfoF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeInfoF);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	6	None	replace
407	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfoF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfoF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeInfoF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeInfoF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
408	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfo();	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
409	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  f,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    f);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
410	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(class,  f);  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(class,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(class,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    f);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
411	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClassInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClassInfoForField(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClassInfoForField(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    f);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
412	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getTypeInfo();	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
413	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getTypeInfoForField(typeDefiningF);	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
414	[BUG]  [BUGGY]  Type  type  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getType();	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	68	None	replace
415	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getDeclaredType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getDeclaredType();	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
416	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(classDefiningF);  [CE]  cannot  find  symbol  classDefiningF  [FE]                                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getTypeInfoForField(classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getTypeInfoForField(classDefiningF);	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol  classDefiningF	68	None	replace
417	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getTypeInfoForField(typeDefiningF,  f);	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
418	[BUG]  [BUGGY]  TypeInfo  f  =  f.getTypeInfo();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getTypeInfo();	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
419	[BUG]  [BUGGY]  TypeInfo  f  =  typeDefiningF.getGenericType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  typeDefiningF.getGenericType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  typeDefiningF.getGenericType();	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
420	[BUG]  [BUGGY]  TypeInfo  f  =  f.getTypeInfoForField(typeDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getTypeInfoForField(typeDefiningF);	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
421	[BUG]  [BUGGY]  TypeInfo  f  =  f.getFunctionType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getFunctionType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getFunctionType();	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
422	[BUG]  [BUGGY]  TypeInfo  f  =  f.getTypeInfoForField(f,  typeDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getTypeInfoForField(f,  typeDefiningF);	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
423	[BUG]  [BUGGY]  TypeInfo  f  =  f.getDeclaredType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getDeclaredType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getDeclaredType();	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
424	[BUG]  [BUGGY]  TypeInfo  type  =  f.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getTypeInfo();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getTypeInfo();	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
425	[BUG]  [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF);	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
426	[BUG]  [BUGGY]  TypeInfo  type  =  f.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getDeclaredType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getDeclaredType();	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
427	[BUG]  [BUGGY]  TypeInfo  type  =  f.getFunctionType();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getFunctionType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getFunctionType();	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
428	[BUG]  [BUGGY]  TypeInfo  type  =  f.getParameterType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getParameterType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getParameterType(typeDefiningF);	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
429	[BUG]  [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(f);  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getTypeInfoForField(f);	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
430	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
431	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
432	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
433	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
434	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.constructType(classDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.constructType(classDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
435	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  typeFactory);  [CE]  cannot  find  symbol  typeFactory  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  typeFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  typeFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeTypeFactory);    	non-compiled	[CE]  cannot  find  symbol  typeFactory	5	None	replace
436	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericClass());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericClass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
437	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
438	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getModule(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getModule(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f.getModule(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
439	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  null);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
440	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF).getGenericParameterTypes();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF).getGenericParameterTypes();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF).getGenericParameterTypes();	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
441	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF).getGenericParameterType(0);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF).getGenericParameterType(0);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF).getGenericParameterType(0);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
442	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.getClass(typeDefiningF,  f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.getClass(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.getClass(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    type);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	19	None	replace
443	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDeiningF,  f,  typeDefiningF);  [CE]  cannot  find  symbol  typeDeiningF  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDeiningF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDeiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDeiningF);    	non-compiled	[CE]  cannot  find  symbol  typeDeiningF	99	None	replace
444	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getGenericType(typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getGenericType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getGenericType(typeDefiningF);	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	64	None	replace
445	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  f.getTypeInfoForField();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getTypeInfoForField();	  TypeInfo    typeInfo    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
446	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getTypeInfoForField(f,  typeDefiningF);	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
447	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(f);  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getTypeInfoForField(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getTypeInfoForField(f);	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
448	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDeiningF,  f.getGenericType(),  typeDefiningF);  [CE]  cannot  find  symbol  typeDeiningF  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDeiningF,  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDeiningF,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDeiningF);    	non-compiled	[CE]  cannot  find  symbol  typeDeiningF	77	None	replace
449	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	95	None	replace
450	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDeiningF);  [CE]  cannot  find  symbol  typeDeiningF  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDeiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeDeiningF	95	None	replace
451	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  factory);  [CE]  cannot  find  symbol  factory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  factory	21	None	replace
452	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  field.getModule());  [CE]  cannot  find  symbol  field  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  field.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  field.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  field	28	None	replace
453	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  this.f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  this.f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	28	None	replace
454	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  f.getRawClass();  [CE]  ';'  expected  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  f.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  f.getRawClass();	  Class    <?>    classDefiningF    =    f.getRawClass();    	non-compiled	[CE]  ';'  expected	101	None	replace
455	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.findClass(typeDefiningF).getRawClass();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.findClass(typeDefiningF).getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.findClass(typeDefiningF).getRawClass();	  Class    <?>    classDefiningF    =    f.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
456	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    f);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
457	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  class);  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  class);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  class);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    f);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
458	[BUG]  [BUGGY]  Type  f  =  f.getGenericFunction();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getGenericFunction();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getGenericFunction();	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
459	[BUG]  [BUGGY]  Type  f  =  f.getGenericParameterType(0);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getGenericParameterType(0);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getGenericParameterType(0);	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
460	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  field);  [CE]  cannot  find  symbol  field  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  field);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  field);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  field	1	None	replace
461	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.constructType(typeDefiningF,  f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.constructType(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.constructType(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	82	None	replace
462	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getGenericType(),  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
463	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  fields.getModule());  [CE]  cannot  find  symbol  fields  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  fields.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  fields.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    field.getModule());    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
464	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getGenericType());  [CE]  cannot  find  symbol  factory  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  factory	38	None	replace
465	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericParameterType(1));  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericParameterType(1));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f.getGenericParameterType(1));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
466	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  typeDefiningF);  [CE]  cannot  find  symbol  type  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(type,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	88	None	replace
467	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.findRawClass(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.findRawClass(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.findRawClass(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
468	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.toRawClass(f,  f.getModule());  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.toRawClass(f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  typeDefiningF.toRawClass(f,  f.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  ';'  expected	32	None	replace
469	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  def.getModule());  [CE]  cannot  find  symbol  def  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  def.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.toRawClass(typeDefiningF,  def.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  def	32	None	replace
470	[BUG]  [BUGGY]  Class  <?>  classesDefiningF  =  f.toRawClass(typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classesDefiningF  =  f.toRawClass(typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classesDefiningF  =  f.toRawClass(typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
471	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
472	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  this.type);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  this.type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  this.type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    type);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	63	None	replace
473	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeRegistry);  [CE]  cannot  find  symbol  typeRegistry  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeRegistry);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeRegistry);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeTypeFactory);    	non-compiled	[CE]  cannot  find  symbol  typeRegistry	5	None	replace
474	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(scope,  f);  [CE]  cannot  find  symbol  scope  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(scope,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(scope,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f);    	non-compiled	[CE]  cannot  find  symbol  scope	34	None	replace
475	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(parent,  f);  [CE]  cannot  find  symbol  parent  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(parent,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(parent,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f);    	non-compiled	[CE]  cannot  find  symbol  parent	34	None	replace
476	[BUG]  [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getTypeInfoForField(f,  typeDefiningF);	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
477	[BUG]  [BUGGY]  TypeInfo  type  =  f.getGenericType(typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getGenericType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getGenericType(typeDefiningF);	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	100	None	replace
478	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeDeiningF);  [CE]  cannot  find  symbol  typeDeiningF  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeDeiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType(),  typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  typeDeiningF	54	None	replace
479	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false,  f.getModule());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
480	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  field.getModule());  [CE]  cannot  find  symbol  field  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  field.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  field.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  field	107	None	replace
481	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	107	None	replace
482	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeFactory.getModule());  [CE]  cannot  find  symbol  typeFactory  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeFactory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeFactory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  typeFactory	18	None	replace
483	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	18	None	replace
484	[BUG]  [BUGGY]  TypeInfo  f  =  f.getGenericFunction();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getGenericFunction();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getGenericFunction();	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
485	[BUG]  [BUGGY]  TypeInfo  f  =  f.getGenericType(typeDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getGenericType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getGenericType(typeDefiningF);	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
486	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  typeDeiningF);  [CE]  cannot  find  symbol  typeDeiningF  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  typeDeiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType(),  typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  typeDeiningF	16	None	replace
487	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeFactory);  [CE]  cannot  find  symbol  typeFactory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    f);    	non-compiled	[CE]  cannot  find  symbol  typeFactory	44	None	replace
488	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeType);  [CE]  cannot  find  symbol  typeType  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeType);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  typeType);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    f);    	non-compiled	[CE]  cannot  find  symbol  typeType	44	None	replace
489	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
490	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  field);  [CE]  cannot  find  symbol  field  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  field);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  field);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    this);    	non-compiled	[CE]  cannot  find  symbol  field	72	None	replace
491	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  this);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  this);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f,    typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	22	None	replace
492	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	22	None	replace
493	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(clazz,  typeDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(clazz,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(clazz,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	36	None	replace
494	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.mapper.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.mapper.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.mapper.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    mapper.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	93	None	replace
495	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.base.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.base.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.base.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    mapper.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	93	None	replace
496	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  null);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
497	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
498	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  parent.getModule());  [CE]  cannot  find  symbol  parent  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  parent.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  parent.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory.getModule());    	non-compiled	[CE]  cannot  find  symbol  parent	87	None	replace
499	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Method  <?>  classDefiningF  =  f.getClass();  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  Method  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class    <?>    classDefiningF    =    f.getClass();    Method  <?>  classDefiningF  =  f.getClass();	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
500	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeResolver);  [CE]  cannot  find  symbol  typeResolver  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeResolver);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeResolver);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeResolver	14	None	replace
501	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeInfoF);  [CE]  cannot  find  symbol  typeInfoF  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeInfoF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeInfoF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	14	None	replace
502	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeName);  [CE]  cannot  find  symbol  typeName  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeName);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  typeName);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeName	14	None	replace
503	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	62	None	replace
504	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	62	None	replace
505	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(classDefiningF,  typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(classDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(classDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    typeInfoF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	20	None	replace
506	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  classDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	15	None	replace
507	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(scope,  f,  typeDefiningF);  [CE]  cannot  find  symbol  scope  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(scope,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(scope,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  scope	15	None	replace
508	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	15	None	replace
509	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
510	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getModule());  [CE]  cannot  find  symbol  type  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol  type	27	None	replace
511	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  null,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	56	None	replace
512	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getClass(typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getClass(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getClass(typeDefiningF);	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	79	None	replace
513	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getDeclaredType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getDeclaredType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getDeclaredType(typeDefiningF);	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
514	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  null  }  );  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  null  }  );  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  null  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	51	None	replace
515	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  f  }  );  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  f  }  );  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f,  f  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	51	None	replace
516	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  },  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  },  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  },  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(new    Field[]    {    f    }    );    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	51	None	replace
517	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
518	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeFactory.getModifiers());  [CE]  cannot  find  symbol  typeFactory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeFactory.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  typeFactory.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol  typeFactory	108	None	replace
519	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getModifiers());  [CE]  cannot  find  symbol  factory  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol  factory	108	None	replace
520	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  getModifiers());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
521	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.scope,  f);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.scope,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.scope,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(scope,    f);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	109	None	replace
522	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  this);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  this);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    type);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	59	None	replace
523	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF,  true);  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    true);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
524	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  typeDefiningF,  true);  [CE]  cannot  find  symbol  scope  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol  scope	43	None	replace
525	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  true);  [CE]  illegal  start  of  expression  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
526	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(getClass(),  typeDefiningF,  true);  [CE]  non-static  method  getClass()  cannot  be  referenced  from  a  static  context  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(getClass(),  typeDefiningF,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(getClass(),  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    true);    	non-compiled	[CE]  non-static  method  getClass()  cannot  be  referenced  from  a  static  context	48	None	replace
527	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  field);  [CE]  cannot  find  symbol  field  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  field);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  field);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  field	57	None	replace
528	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(scope,  f);  [CE]  cannot  find  symbol  scope  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(scope,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(scope,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f);    	non-compiled	[CE]  cannot  find  symbol  scope	23	None	replace
529	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  typeDefiningF,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	94	None	replace
530	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getDeclaringClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	add	Class  <?>  classDefiningF  =  f.getDeclaringClass();	  Class    <?>    classDefiningF    =    f.getClass();    	compilable	  [FE]  UnsupportedOperationException  	70	1	replace
531	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getDeclaringClass();  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getDeclaringClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getDeclaringClass();	  Class    <?>    classDefiningF    =    f.getClass();    	compilable	  [FE]  UnsupportedOperationException  	70	1	replace
532	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getDeclaredClass();  [CE]  cannot  find  symbol  [FE]      UnsupportedOperationException    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getDeclaredClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getDeclaredClass();	  Class    <?>    classDefiningF    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
533	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.getTypeInfoForField(f,  typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  this.typeDefiningF.getTypeInfoForField(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	12	None	replace
534	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  context);  [CE]  cannot  find  symbol  context  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  context);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  context);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  context	3	None	replace
535	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  factory.getGenericType());  [CE]  cannot  find  symbol  factory  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  factory.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  factory.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  factory	53	None	replace
536	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f.getGenericType());  [CE]  cannot  find  symbol  clazz  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  clazz	53	None	replace
537	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  null);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    null);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
538	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null,  type);  [CE]  cannot  find  symbol  type  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null,  type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null,  type);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    null);    	non-compiled	[CE]  cannot  find  symbol  type	13	None	replace
539	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	84	None	replace
540	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericParameterType(0);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericParameterType(0);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericParameterType(0);	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
541	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericParameterType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericParameterType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericParameterType(typeDefiningF);	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
542	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericReference();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericReference();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericReference();	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
543	[BUG]  [BUGGY]  Type  f  =  f.getGenericClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getGenericClass();	  Type    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	78	None	replace
544	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(classDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(classDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
545	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
546	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeRef);  [CE]  cannot  find  symbol  typeRef  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeRef);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeRef);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeReferenceF);    	non-compiled	[CE]  cannot  find  symbol  typeRef	92	None	replace
547	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(parent,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	52	None	replace
548	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  this.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  this.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(this.typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	110	None	replace
549	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(getScope(),  f);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(getScope(),  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(getScope(),  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(scope,    f);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
550	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  f.getGenericClass();  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  f.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  f.getGenericClass();	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  ';'  expected	102	None	replace
551	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericParameterType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericParameterType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getGenericParameterType(typeDefiningF);	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
552	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericParameterType(0);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericParameterType(0);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getGenericParameterType(0);	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
553	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  f.getTypeInfoForField(typeDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  f.getTypeInfoForField(typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	40	None	replace
554	[BUG]  [BUGGY]  Class  <?>  classesDefiningF  =  f.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classesDefiningF  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classesDefiningF  =  f.getTypeInfoForField(typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
555	[BUG]  [BUGGY]  Type  f  =  f.getSuperclass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getSuperclass();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	80	None	replace
556	[BUG]  [BUGGY]  Type  fDefiningF  =  f.getSuperclass();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  fDefiningF  =  f.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  fDefiningF  =  f.getSuperclass();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
557	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	4	None	replace
558	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getModule());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
559	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	60	None	replace
560	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF,  false);  [CE]  illegal  start  of  expression  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
561	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory.getSuperclass());  [CE]  cannot  find  symbol  factory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  cannot  find  symbol  factory	103	None	replace
562	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  field.getSuperclass());  [CE]  cannot  find  symbol  field  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  field.getSuperclass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  field.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getSuperclass());    	non-compiled	[CE]  cannot  find  symbol  field	103	None	replace
563	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.class);  [CE]  <identifier>  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.class);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.class);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
564	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	47	None	replace
565	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  true,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  true,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  true,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	47	None	replace
566	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeNameGenerator);  [CE]  cannot  find  symbol  typeNameGenerator  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeNameGenerator);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeNameGenerator);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeFactory);    	non-compiled	[CE]  cannot  find  symbol  typeNameGenerator	90	None	replace
567	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getGenericField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericField(typeDefiningF);	  Type    classDefiningF    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
568	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType());  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f.getGenericType());    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	55	None	replace
569	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f.getModule());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
570	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  typeDefiningF);  [CE]  cannot  find  symbol  scope  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(scope,    f);    	non-compiled	[CE]  cannot  find  symbol  scope	50	None	replace
571	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeFactory);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeFactory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeTypeFactory);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	5	None	replace
572	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.typeInfoF);  [CE]  cannot  find  symbol  typeInfoF  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.typeInfoF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.typeInfoF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    typeInfoF);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	20	None	replace
573	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  null,  true);  [CE]  cannot  find  symbol  type  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  null,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    true);    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
574	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f);  [CE]  cannot  find  symbol  clazz  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  clazz	95	None	replace
575	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(parent,  f,  classDefiningF);  [CE]  cannot  find  symbol  parent  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(parent,  f,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(parent,  f,  classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  parent	95	None	replace
576	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.factory.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.factory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.factory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	18	None	replace
577	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory.getModule());  [CE]  cannot  find  symbol  factory  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  factory	18	None	replace
578	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(clazz,  typeDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(clazz,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(clazz,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	24	None	replace
579	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getDeclaringClass());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	46	None	replace
580	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.field);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.field);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.field);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    field);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	98	None	replace
581	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  context);  [CE]  cannot  find  symbol  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  context);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  context);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    field);    	non-compiled	[CE]  cannot  find  symbol  context	98	None	replace
582	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(parent,  f,  typeDefiningF);  [CE]  cannot  find  symbol  parent  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(parent,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(parent,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  parent	35	None	replace
583	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	35	None	replace
584	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  true);  [CE]  cannot  find  symbol  type  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  true);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    true);    	non-compiled	[CE]  cannot  find  symbol  type	43	None	replace
585	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF,    factory);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
586	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  this.typeDefiningF,  false);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  this.typeDefiningF,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  this.typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    false);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	74	None	replace
587	[BUG]  [BUGGY]  Class  <?>  factory  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  factory  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  factory  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory.getModule());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
588	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
589	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(clazz,  f);  [CE]  cannot  find  symbol  clazz  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(clazz,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(clazz,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(f);    	non-compiled	[CE]  cannot  find  symbol  clazz	23	None	replace
590	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.f.getGenericType());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	38	None	replace
591	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	4	None	replace
592	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(type,    f);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	4	None	replace
593	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getTypeInfoForField(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
594	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  f.getTypeInfoForField(typeDefiningF,  typeDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  f.getTypeInfoForField(typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  f.getTypeInfoForField(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	12	None	replace
595	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	104	None	replace
596	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f.getGenericType());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	104	None	replace
597	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass(),  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
598	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF.getModule());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
599	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  f.getGenericType());  [CE]  cannot  find  symbol  scope  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  scope	56	None	replace
600	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  this.typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  this.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  this.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
601	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.typeDefiningF.getRawClass();  [CE]  cannot  find  symbol  typeDefiningF  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.typeDefiningF.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.typeDefiningF.getRawClass();	  Class    <?>    classDefiningF    =    f.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	101	None	replace
602	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterTypes());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterTypes());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericParameterTypes());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
603	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getModule());  [CE]  cannot  find  symbol  factory  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  factory	107	None	replace
604	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.factory.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.factory.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  this.factory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	107	None	replace
605	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClassInfoForField(f);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClassInfoForField(f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClassInfoForField(f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
606	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(type,  typeDefiningF);  [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(type,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(type,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	82	None	replace
607	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(f,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
608	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getGenericParameterType(0));  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	81	None	replace
609	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeResolver);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeResolver);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeResolver);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeResolver);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	91	None	replace
610	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f.getGenericParameterType(0));  [CE]  illegal  start  of  expression  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
611	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f.getModule());  [CE]  illegal  start  of  expression  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
612	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  f.getRawClass();  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  typeDefiningF  =  f.getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  typeDefiningF  =  f.getRawClass();	  Class    <?>    classDefiningF    =    typeDefiningF.getRawClass();    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	37	None	replace
613	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	97	None	replace
614	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f,  factory);  [CE]  cannot  find  symbol  factory  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    f);    	non-compiled	[CE]  cannot  find  symbol  factory	97	None	replace
615	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory.getGenericParameterType(0));  [CE]  cannot  find  symbol  factory  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  cannot  find  symbol  factory	106	None	replace
616	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.f.getGenericParameterType(0));  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericParameterType(0));    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	106	None	replace
617	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(f);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
618	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  f);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
619	[BUG]  [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF,  f);	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
620	[BUG]  [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF).getGenericType();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF).getGenericType();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getTypeInfoForField(typeDefiningF).getGenericType();	  TypeInfo    type    =    f.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
621	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  null,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	76	None	replace
622	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  false);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(classDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	76	None	replace
623	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  f,  typeDefiningF);  [CE]  cannot  find  symbol  scope  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(scope,    f);    	non-compiled	[CE]  cannot  find  symbol  scope	109	None	replace
624	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(parent,  f);  [CE]  cannot  find  symbol  parent  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(parent,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(parent,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(scope,    f);    	non-compiled	[CE]  cannot  find  symbol  parent	109	None	replace
625	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getDeclaringClass());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	3	None	replace
626	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getDeclaredType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getDeclaredType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
627	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	3	None	replace
628	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.type);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeType);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	7	None	replace
629	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f,  typeDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(clazz,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	1	None	replace
630	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
631	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true,    f);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
632	[BUG]  [BUGGY]  TypeInfo  f  =  f.getGenericParameterType(typeDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getGenericParameterType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getGenericParameterType(typeDefiningF);	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
633	[BUG]  [BUGGY]  TypeInfo  f  =  f.getGenericParameterType(0);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getGenericParameterType(0);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getGenericParameterType(0);	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
634	[BUG]  [BUGGY]  TypeInfo  f  =  f.getGenericField(typeDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  f  =  f.getGenericField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getGenericField(typeDefiningF);	  TypeInfo    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	71	None	replace
635	[BUG]  [BUGGY]  Class  <?>  parent  =  TypeUtils.toRawClass(f,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  parent  =  TypeUtils.toRawClass(f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  parent  =  TypeUtils.toRawClass(f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(parent,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	52	None	replace
636	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDeiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDeiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeDeiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	99	None	replace
637	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  this.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    typeReferenceF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	92	None	replace
638	[BUG]  [BUGGY]  Class  <?>  factory  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  factory  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  factory  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	96	None	replace
639	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  parent);  [CE]  cannot  find  symbol  parent  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  parent);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  parent);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    factory);    	non-compiled	[CE]  cannot  find  symbol  parent	96	None	replace
640	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getGenericType(),  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getGenericType(),  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(class,    typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
641	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  context.getModule());  [CE]  cannot  find  symbol  context  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  context.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  context.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f,    field.getModule());    	non-compiled	[CE]  cannot  find  symbol  context	86	None	replace
642	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getDeclaringClass());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
643	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.typeDefiningF.getGenericClass();  [CE]  cannot  find  symbol  typeDefiningF  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f.typeDefiningF.getGenericClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.typeDefiningF.getGenericClass();	  Class    <?>    classDefiningF    =    f.getGenericClass();    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	102	None	replace
644	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f.getGenericType());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f.getGenericType());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
645	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
646	[BUG]  [BUGGY]  Type  f  =  f.getGenericParameterType(typeDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  f  =  f.getGenericParameterType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getGenericParameterType(typeDefiningF);	  Type    f    =    f.getGenericType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	65	None	replace
647	[BUG]  [BUGGY]  Type  classDefiningF  =  f,  f.getSuperclass();  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f,  f.getSuperclass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f,  f.getSuperclass();	  Type    classDefiningF    =    f.getSuperclass();    	non-compiled	[CE]  ';'  expected	80	None	replace
648	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f.typeDefiningF);  [CE]  cannot  find  symbol  typeDefiningF  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(this.typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	110	None	replace
649	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.type);  [CE]  type  has  private  access  in  Field  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.type);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false,  f.type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f,    typeDefiningF,    false);    	non-compiled	[CE]  type  has  private  access  in  Field	60	None	replace
650	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getClass().getRawClass();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  classDefiningF  =  f.getClass().getRawClass();  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getClass().getRawClass();	  Type    classDefiningF    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
651	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  parametersConstants.getModifiers());  [CE]  cannot  find  symbol  parametersConstants  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  parametersConstants.getModifiers());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  parametersConstants.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f.getModifiers());    	non-compiled	[CE]  cannot  find  symbol  parametersConstants	108	None	replace
652	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  classDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  classDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  classDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	57	None	replace
653	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	57	None	replace
654	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  context);  [CE]  cannot  find  symbol  context  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  context);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF,  context);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType(),    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  context	57	None	replace
655	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.toRawClass(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  this.typeDefiningF.toRawClass(f,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  this.typeDefiningF.toRawClass(f,  f.getModule());	  Class    <?>    classDefiningF    =    typeDefiningF.toRawClass(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
656	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getParameterType(0));  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  this.f.getParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f.getParameterType(0));    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	105	None	replace
657	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  typeDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  typeDefiningF);	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	66	None	replace
658	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getModule());	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
659	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getGenericParameterType(0));  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF,  f.getGenericParameterType(0));	  TypeInfo    typeInfo    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
660	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
661	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getName());  [CE]  illegal  start  of  expression  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getName());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  f.getName());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(class,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
662	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false,  f.getModule());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false,  f.getModule());  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    null,    false);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
663	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getGenericType(typeDefiningF);	  Type    type    =    f.getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	68	None	replace
664	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  f);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
665	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  factory);  [CE]  cannot  find  symbol  factory  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  factory	8	None	replace
666	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	14	None	replace
667	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory);  [CE]  cannot  find  symbol  factory  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  factory	14	None	replace
668	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  field);  [CE]  cannot  find  symbol  field  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  field);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  field);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  field	14	None	replace
669	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  null);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  null);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF,    f);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	14	None	replace
670	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getTypeInfoForField(typeDefiningF);  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  f,  typeDefiningF.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f,  typeDefiningF.getTypeInfoForField(typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f);    	non-compiled	[CE]  ';'  expected	40	None	replace
671	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  fs.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  fs  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  fs.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  fs.getTypeInfoForField(typeDefiningF);	  Class    <?>    classDefiningF    =    typeDefiningF.getTypeInfoForField(f);    	non-compiled	[CE]  cannot  find  symbol  fs	40	None	replace
672	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory);  [CE]  cannot  find  symbol  factory  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory);  [BUGGY]      Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  factory	33	None	replace
