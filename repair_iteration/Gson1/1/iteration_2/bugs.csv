bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	4	None	replace
2	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  type);  [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  type);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
3	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	4	None	replace
4	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f);  [CE]  cannot  find  symbol  type  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
5	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeTypeFactory);  [CE]  cannot  find  symbol  typeTypeFactory  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeTypeFactory);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeTypeFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeTypeFactory	4	None	replace
6	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoF);  [CE]  cannot  find  symbol  typeInfoF  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeInfoF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	4	None	replace
7	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeType);  [CE]  cannot  find  symbol  typeType  [FE]                          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeType);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeType);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeType	4	None	replace
8	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  true);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  false);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
11	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
13	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
14	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	3	None	replace
15	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF);  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	3	None	replace
16	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	3	None	replace
17	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF);  [CE]  illegal  start  of  expression  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(class,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
19	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  type);  [CE]  cannot  find  symbol  type  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  type);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  type);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
20	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  typeInfoF);  [CE]  cannot  find  symbol  typeInfoF  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  typeInfoF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  typeInfoF);	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeInfoF	3	None	replace
21	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
22	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
23	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(f);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
24	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(classDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
25	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
26	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
27	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
28	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
29	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
30	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF.getModule());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDefiningF.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
31	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getModule(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
32	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  f.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.toRawClass(f,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
33	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
34	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
35	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(f,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
36	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(classDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
37	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getRawClass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getRawClass();	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
38	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getGenericType());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
39	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
40	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getTypeInfoForField(f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
41	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  f);  [CE]  illegal  start  of  expression  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class);  [CE]  illegal  start  of  expression  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(class);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
44	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
45	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
46	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
47	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  true);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
48	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  true);  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  true);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f);  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f);  [CE]  cannot  find  symbol  scope  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(scope,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f);    	non-compiled	[CE]  cannot  find  symbol  scope	1	None	replace
51	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  }  );  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  }  );  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(new  Field[]  {  f  }  );	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
52	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(parent,  f);  [CE]  cannot  find  symbol  parent  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(parent,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(parent,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f);    	non-compiled	[CE]  cannot  find  symbol  parent	1	None	replace
53	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
54	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	11	None	replace
55	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType());  [CE]  cannot  find  symbol  type  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(type,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  type	11	None	replace
56	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	11	None	replace
57	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	11	None	replace
58	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getGenericType());  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(class,  typeDefiningF,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  type);  [CE]  cannot  find  symbol  type  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  type);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  type	11	None	replace
60	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
61	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getGenericType());  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getGenericType());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getGenericType());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
62	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
63	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  type);  [CE]  cannot  find  symbol  type  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  type);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  true,  type);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
64	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  f.getGenericType();  [CE]  incompatible  types  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  TypeInfo  typeInfo  =  f.getGenericType();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  f.getGenericType();	      	non-compiled	[CE]  incompatible  types	7	None	replace
65	[BUG]  [BUGGY]  Type  f  =  f.getGenericType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Type  f  =  f.getGenericType();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  f  =  f.getGenericType();	      	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	7	None	replace
66	[BUG]  [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  classDefiningF  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  typeInfo  =  getTypeInfoForField(f,  typeDefiningF);	      	non-compiled	[CE]  cannot  find  symbol  classDefiningF	7	None	replace
67	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericType();  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Type  classDefiningF  =  f.getGenericType();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericType();	      	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	7	None	replace
68	[BUG]  [BUGGY]  Type  type  =  f.getGenericType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Type  type  =  f.getGenericType();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  type  =  f.getGenericType();	      	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	7	None	replace
69	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	add	Class  <?>  classDefiningF  =  f.getClass();	      	compilable	  [FE]  UnsupportedOperationException  	7	1	replace
70	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  [FE]  UnsupportedOperationException  [FE]                              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getClass();	      	compilable	  [FE]  UnsupportedOperationException  	7	1	replace
71	[BUG]  [BUGGY]  TypeInfo  f  =  f.getGenericType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  TypeInfo  f  =  f.getGenericType();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  f  =  f.getGenericType();	      	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	7	None	replace
72	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  this);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  this);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	5	None	replace
73	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  factory);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(f,  typeDefiningF,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	5	None	replace
74	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
75	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getModule());  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  false,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
76	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
77	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDeiningF);  [CE]  cannot  find  symbol  typeDeiningF  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDeiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericType(),  typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  typeDeiningF	11	None	replace
78	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getGenericClass();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Type  classDefiningF  =  f.getGenericClass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getGenericClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
79	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getClass();  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Type  classDefiningF  =  f.getClass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getClass();	      	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	7	None	replace
80	[BUG]  [BUGGY]  Type  classDefiningF  =  f.getSuperclass();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Type  classDefiningF  =  f.getSuperclass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Type  classDefiningF  =  f.getSuperclass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
81	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericParameterType(0));  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
82	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.constructType(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.constructType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
83	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
84	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
85	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  true);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  true);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  true);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    true);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
86	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  field.getModule());  [CE]  cannot  find  symbol  field  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  field.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  field.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
87	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory.getModule());  [CE]  cannot  find  symbol  factory  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  factory	10	None	replace
88	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
89	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  false);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  false);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  false);	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
90	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeFactory);  [CE]  cannot  find  symbol  typeFactory  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeFactory);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeFactory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeFactory	4	None	replace
91	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeResolver);  [CE]  cannot  find  symbol  typeResolver  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeResolver);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeResolver);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeResolver	4	None	replace
92	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeReferenceF);  [CE]  cannot  find  symbol  typeReferenceF  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeReferenceF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeReferenceF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeReferenceF	4	None	replace
93	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  mapper.getModule());  [CE]  cannot  find  symbol  mapper  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  mapper.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  mapper.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  mapper	10	None	replace
94	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  typeDefiningF);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  null,  typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    false);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
95	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
96	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory);  [CE]  cannot  find  symbol  factory  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  factory);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  factory	4	None	replace
97	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f);  [CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  f);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  method  toRawClass  in  class  TypeUtils  cannot  be  applied  to  given  types;	4	None	replace
98	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  field);  [CE]  cannot  find  symbol  field  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  field);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  field);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  field	4	None	replace
99	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDeiningF);  [CE]  cannot  find  symbol  typeDeiningF  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDeiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f,  typeDeiningF);	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f);    	non-compiled	[CE]  cannot  find  symbol  typeDeiningF	4	None	replace
100	[BUG]  [BUGGY]  TypeInfo  type  =  f.getGenericType();  [CE]  incompatible  types  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  TypeInfo  type  =  f.getGenericType();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	TypeInfo  type  =  f.getGenericType();	      	non-compiled	[CE]  incompatible  types	7	None	replace
101	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
102	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericClass();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  f.getGenericClass();  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  f.getGenericClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
103	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getSuperclass());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getSuperclass());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getSuperclass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
104	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass());  [CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getDeclaringClass());	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  method  getClass  in  class  Object  cannot  be  applied  to  given  types;	3	None	replace
105	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getParameterType(0));  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getParameterType(0));  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getClass(typeDefiningF,  f.getParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.getClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
106	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericParameterType(0));  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericParameterType(0));  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f.getGenericParameterType(0));	  Class    <?>    classDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
107	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModule());  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModule());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModule());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
108	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModifiers());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModifiers());  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getRawClass(typeDefiningF,  f.getModifiers());	  Class    <?>    classDefiningF    =    TypeUtils.getRawClass(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
109	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  f);  [CE]  cannot  find  symbol  scope  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  f);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(scope,  f);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f);    	non-compiled	[CE]  cannot  find  symbol  scope	6	None	replace
110	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {    [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.typeDefiningF);  [BUGGY]    Type  type  =  f.getGenericType();  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	52	52	1	replace	Class  <?>  classDefiningF  =  TypeUtils.getTypeInfoForField(this.typeDefiningF);	  Class    <?>    classDefiningF    =    TypeUtils.getTypeInfoForField(f);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
