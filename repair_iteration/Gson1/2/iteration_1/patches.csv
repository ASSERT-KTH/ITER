bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF);	      	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	8	None	replace
2	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF);	      	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	8	None	replace
3	[BUG]  [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF);	      	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	8	None	replace
4	[BUG]  [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(f,  typeDefiningF);	      	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	8	None	replace
5	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF);  [CE]  incompatible  types  [FE]                            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF);	      	non-compiled	[CE]  incompatible  types	8	None	replace
6	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  classDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  classDefiningF);	      	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	8	None	replace
7	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
8	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f);  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  classDefiningF.getGenericType(f);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
9	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
10	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
11	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazzDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(clazzDefiningF,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazzDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	9	None	replace
12	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeFiningF,  classDefiningF);  [CE]  cannot  find  symbol  typeFiningF  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(typeFiningF,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeFiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeFiningF	9	None	replace
13	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getTypeInfo();  [CE]  ';'  expected  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f,  classDefiningF.getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  classDefiningF.getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
15	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getTypeInfo();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getTypeInfo());  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getTypeInfo());	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getTypeInfo();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF).getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]  Type  type  =  f.typeInfo();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.typeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.typeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  Type  type  =  f.getType();  Type  type  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Type  type  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Type  type  =  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
20	[BUG]  [BUGGY]  Type  type  =  f.getType();  Type  f  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Type  f  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Type  f  =  f.getType();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
21	[BUG]  [BUGGY]  Type  type  =  f.getType();  Type  actualType  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Type  actualType  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Type  actualType  =  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
22	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Class  <?>  f  =  f.getType();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
23	[BUG]  [BUGGY]  Type  type  =  f.getType();  Type  f  =  classDefiningF.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Type  f  =  classDefiningF.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Type  f  =  classDefiningF.getType();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
24	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getClass();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Class  <?>  f  =  f.getClass();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
25	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getRawClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getRawClass();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Class  <?>  f  =  f.getRawClass();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
26	[BUG]  [BUGGY]  Type  type  =  f.getType();  type  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  type  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    type  =  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
27	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getDeclaredType();  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  classDefiningF.getDeclaredType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getDeclaredType();	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
28	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType();  [CE]  ';'  expected  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getDeclaredType();	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  Type  type  =  f.type().getDeclaredType();  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.type().getDeclaredType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getDeclaredType();	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
30	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(typeDefiningF);	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
31	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfoForField(typeDefiningF);	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
32	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getRawType();  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  classDefiningF.getRawType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getRawType();	  Type    type    =    f.getRawType();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
33	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getRawType();  [CE]  ';'  expected  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f,  classDefiningF.getRawType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getRawType();	  Type    type    =    f.getRawType();    	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  Type  type  =  f.type().getRawType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.type().getRawType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getRawType();	  Type    type    =    f.getRawType();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
35	[BUG]  [BUGGY]  Type  type  =  classDefiningF,  f.getGenericType();  [CE]  ';'  expected  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  classDefiningF,  f.getGenericType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF,  f.getGenericType();	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  ';'  expected	1	None	replace
36	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getGenericType());  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getGenericType());	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
37	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getGenericType();  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getGenericType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getGenericType();	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
38	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF);	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	1	None	replace
39	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getGenericType());  [CE]  cannot  find  symbol  ClassUtils  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getGenericType());  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getGenericType());	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	1	None	replace
40	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getReturnType();  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  classDefiningF.getReturnType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getReturnType();	  Type    type    =    f.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
41	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getReturnType();  [CE]  ';'  expected  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f,  classDefiningF.getReturnType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getReturnType();	  Type    type    =    f.getReturnType();    	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  Type  type  =  f.type().getReturnType();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.type().getReturnType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getReturnType();	  Type    type    =    f.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
43	[BUG]  [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType(typeDefiningF);	  Type    type    =    f.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
44	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	10	None	replace
45	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazzDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(clazzDefiningF,  typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazzDefiningF,  typeDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	10	None	replace
46	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF);  [CE]  ';'  expected  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF);    	non-compiled	[CE]  ';'  expected	10	None	replace
47	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType();  [CE]  cannot  find  symbol  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  classDefiningF.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType();	  Type    type    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
48	[BUG]  [BUGGY]  Type  type  =  f.getParameterType(0);  [CE]  cannot  find  symbol  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getParameterType(0);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getParameterType(0);	  Type    type    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
49	[BUG]  [BUGGY]  Type  type  =  f.getRawType(classDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getRawType(classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getRawType(classDefiningF);	  Type    type    =    f.getRawType();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
50	[BUG]  [BUGGY]  Type  type  =  f.getRawType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getRawType(typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getRawType(typeDefiningF);	  Type    type    =    f.getRawType();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
51	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
52	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f!=  null?  null  :  f.getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f.getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
53	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	7	None	replace
54	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	7	None	replace
55	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType();  [CE]  ';'  expected  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getGenericType();	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  ';'  expected	1	None	replace
56	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =  f  ==  null?  null  :  f.getType();	  Type    type    =    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	4	1	replace
57	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.getType();	  Type    type    =    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	4	1	replace
58	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =  f!=  null?  null  :  f.getType();	  Type    type    =    f.getType();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  	4	1	replace
59	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f.getType();	  Type    type    =    f.getType();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  	4	1	replace
60	[BUG]  [BUGGY]  Type  type  =  f.getType(classDefiningF);  [CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType(classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(classDefiningF);	  Type    type    =    f.getType();    	non-compiled	[CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;	4	None	replace
61	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazz,  typeDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(clazz,  typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazz,  typeDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	10	None	replace
62	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF).getGenericType();  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF).getGenericType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	10	None	replace
63	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  ClassLoader.getSystemClassLoader());  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  ClassLoader.getSystemClassLoader());  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  ClassLoader.getSystemClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	10	None	replace
64	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  type  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Class  <?>  type  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Class  <?>  type  =  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
65	[BUG]  [BUGGY]  Type  type  =  f.getType();  Type  types  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Type  types  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Type  types  =  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
66	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getReferenceName();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  f.getReferenceName();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Class  <?>  f  =  f.getReferenceName();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
67	[BUG]  [BUGGY]  Type  type  =  f.getReturnType(classDefiningF);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getReturnType(classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType(classDefiningF);	  Type    type    =    f.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
68	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF);  [CE]  incompatible  types  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF);	      	non-compiled	[CE]  incompatible  types	8	None	replace
69	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  getTypeInfoForField(f);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f);	      	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	8	None	replace
70	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getDeclaredType();  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getDeclaredType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.getDeclaredType();	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
71	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(classDefiningF);	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
72	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(ARRAY_TYPE);  [CE]  cannot  find  symbol  ARRAY_TYPE  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getDeclaredType(ARRAY_TYPE);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(ARRAY_TYPE);	  Type    type    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TYPE	4	None	replace
73	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazz,  classDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(clazz,  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazz,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	9	None	replace
74	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classesDefiningF);  [CE]  cannot  find  symbol  classesDefiningF  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classesDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classesDefiningF);	  Type    type    =    f.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  classesDefiningF	9	None	replace
75	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF);  [CE]  ';'  expected  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF);    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getRawClass();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getRawClass();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
77	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getType();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getType();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
78	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfo(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getTypeInfo(typeDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfo(typeDefiningF);	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
79	[BUG]  [BUGGY]  Type  type  =  f.type().getTypeInfo();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.type().getTypeInfo();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getTypeInfo();	  Type    type    =    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
80	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
81	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getGenericType();  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  typeDefiningF.getGenericType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getGenericType();	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
82	[BUG]  [BUGGY]  Type  type  =  this.classDefiningF.getGenericType();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  this.classDefiningF.getGenericType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  this.classDefiningF.getGenericType();	  Type    type    =    classDefiningF.getGenericType();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
83	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
84	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(classDefiningF);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(classDefiningF);  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(classDefiningF);	  Type    type    =    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
85	[BUG]  [BUGGY]  Type  type  =  f.getType();  Object  type  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Object  type  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Object  type  =  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
86	[BUG]  [BUGGY]  Type  type  =  f.getType();  Type  def  =  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]    public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);    [BUGGY]  Type  type  =  f.getType();  Type  def  =  f.getType();  [BUGGY]    Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f.getType();    Type  def  =  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	3	None	add
