bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF.getDeclaredType());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
2	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(classDefiningF.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(classDefiningF.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(classDefiningF.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
3	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f,  classDefiningF.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f,  classDefiningF.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f,  classDefiningF.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
4	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(f.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
5	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  ';'  expected	83	None	replace
6	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  classDefiningF.isAssignableFrom(typeDefiningF.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  classDefiningF.isAssignableFrom(typeDefiningF.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  classDefiningF.isAssignableFrom(typeDefiningF.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
7	[BUG]  [BUGGY]  Type  type  =  f,  typeDefiningF.type().getReturnType();  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  typeDefiningF.type().getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  typeDefiningF.type().getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  ';'  expected	42	None	replace
8	[BUG]  [BUGGY]  Type  type  =  f.getType().getReturnType();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType().getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType().getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
9	[BUG]  [BUGGY]  Type  type  =  classDefiningF.type().getReturnType();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.type().getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.type().getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
10	[BUG]  [BUGGY]  Type  type  =  f.type().getType();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
11	[BUG]  [BUGGY]  Type  type  =  f.type().toType().getReturnType();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().toType().getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().toType().getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
12	[BUG]  [BUGGY]  Type  type  =  f.type().getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getReturnType(typeDefiningF);	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
13	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(typeDefiningF);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
14	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f);  [CE]  cannot  find  symbol  ClassUtils  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  f);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
15	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(typeDefiningF,  classDefiningF);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
16	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  classDefiningF);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
17	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(f);  [CE]  cannot  find  symbol  ClassUtils  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(f);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
18	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(f,  classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(f,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(f,  classDefiningF);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
19	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
20	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f,  typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
21	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  classDefiningF,  typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  classDefiningF,  typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
22	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  false);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  false);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  false);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
23	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  null);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  null);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  null);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
24	[BUG]  [BUGGY]  Type  type  =  classDefiningF,  f.getRawType();  [CE]  ';'  expected  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF,  f.getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF,  f.getRawType();	  Type    type    =    classDefiningF.getRawType();    	non-compiled	[CE]  ';'  expected	32	None	replace
25	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getTypeInfoForField(f);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getTypeInfoForField(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getTypeInfoForField(f);	  Type    type    =    classDefiningF.getRawType();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
26	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f).getTypeInfo();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF,  f).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	15	None	replace
27	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f).getTypeInfo();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  f).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	15	None	replace
28	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF).getTypeInfo();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	15	None	replace
29	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF),  typeDefiningF.getTypeInfo();  [CE]  ';'  expected  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF),  typeDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF),  typeDefiningF.getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  ';'  expected	15	None	replace
30	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF).getTypeInfo();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	15	None	replace
31	[BUG]  [BUGGY]  Type  type  =  classDefiningF,  f.getDeclaredType();  [CE]  ';'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF,  f.getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF,  f.getDeclaredType();	  Type    type    =    classDefiningF,    f.getGenericType();    	non-compiled	[CE]  ';'  expected	35	None	replace
32	[BUG]  [BUGGY]  Type  type  =  f,  f.getGenericType();  [CE]  ';'  expected  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  f.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  f.getGenericType();	  Type    type    =    classDefiningF,    f.getGenericType();    	non-compiled	[CE]  ';'  expected	35	None	replace
33	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getType());  [CE]  cannot  find  symbol  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getType());	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
34	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getType();  [CE]  cannot  find  symbol  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getType();	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
35	[BUG]  [BUGGY]  Type  type  =  classDefiningF,  f.getType();  [CE]  ';'  expected  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF,  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF,  f.getType();	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  ';'  expected	47	None	replace
36	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType(),  f);  [CE]  ';'  expected  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType(),  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType(),  f);	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  ';'  expected	47	None	replace
37	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getRawType(f);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getRawType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getRawType(f);	  Type    type    =    f.getRawType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
38	[BUG]  [BUGGY]  Type  type  =  f.typeDefiningF.getRawType(typeDefiningF);  [CE]  cannot  find  symbol  typeDefiningF  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.typeDefiningF.getRawType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.typeDefiningF.getRawType(typeDefiningF);	  Type    type    =    f.getRawType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	50	None	replace
39	[BUG]  [BUGGY]  Type  type  =  f.getRawType(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getRawType(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getRawType(typeDefiningF,  classDefiningF);	  Type    type    =    f.getRawType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
40	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getRawType(f);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getRawType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getRawType(f);	  Type    type    =    f.getRawType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
41	[BUG]  [BUGGY]  Type  type  =  f.getRawType(typeDefiningF).getRawType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getRawType(typeDefiningF).getRawType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getRawType(typeDefiningF).getRawType(typeDefiningF);	  Type    type    =    f.getRawType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
42	[BUG]  [BUGGY]  Class  <?>  f  =  f.getClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  f  =  f.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  f  =  f.getClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	24	None	replace
43	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	24	None	replace
44	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	24	None	replace
45	[BUG]  [BUGGY]  Type  f  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	24	None	replace
46	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getClass();  [CE]  cannot  find  symbol  [FE]                          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
47	[BUG]  [BUGGY]  Class  <?>  f  =  classDefiningF.getClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  f  =  classDefiningF.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  f  =  classDefiningF.getClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	24	None	replace
48	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getReturnType(f);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getReturnType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getReturnType(f);	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
49	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF).getReturnType(typeDefiningF);	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
50	[BUG]  [BUGGY]  Type  type  =  f.typeDefiningF.getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  typeDefiningF  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.typeDefiningF.getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.typeDefiningF.getReturnType(typeDefiningF);	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	43	None	replace
51	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getReturnType(f);  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getReturnType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getReturnType(f);	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
52	[BUG]  [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType(typeDefiningF,  classDefiningF);	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
53	[BUG]  [BUGGY]  Type  f  =  classDefiningF.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  classDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	23	None	replace
54	[BUG]  [BUGGY]  Class  <?>  f  =  classDefiningF.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  f  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  f  =  classDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	23	None	replace
55	[BUG]  [BUGGY]  typeDefiningF  =  classDefiningF.getType();  [CE]  cannot  find  symbol  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  typeDefiningF  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	typeDefiningF  =  classDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
56	[BUG]  [BUGGY]  type  =  classDefiningF.getType();  [CE]  cannot  find  symbol  type  [FE]                      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  classDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol  type	23	None	replace
57	[BUG]  [BUGGY]  Type  f  =  typeDefiningF.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	23	None	replace
58	[BUG]  [BUGGY]  Type  type  =  classDefiningF,  f.getReturnType();  [CE]  ';'  expected  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF,  f.getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF,  f.getReturnType();	  Type    type    =    classDefiningF.getReturnType();    	non-compiled	[CE]  ';'  expected	40	None	replace
59	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getReturnType(classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getReturnType(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getReturnType(classDefiningF);	  Type    type    =    classDefiningF.getReturnType();    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	40	None	replace
60	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(classDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfoForField(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfoForField(classDefiningF);	  Type    type    =    f.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
61	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getTypeInfoForField(f);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getTypeInfoForField(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getTypeInfoForField(f);	  Type    type    =    f.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
62	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfoForField(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfoForField(typeDefiningF,  classDefiningF);	  Type    type    =    f.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
63	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfoForField(classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfoForField(classDefiningF,  typeDefiningF);	  Type    type    =    f.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
64	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(this.typeDefiningF);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfoForField(this.typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfoForField(this.typeDefiningF);	  Type    type    =    f.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	31	None	replace
65	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getDeclaredType());	  Type    type    =    f,    classDefiningF.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
66	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getType();  [CE]  ';'  expected  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getType();	  Type    type    =    f,    classDefiningF.getDeclaredType();    	non-compiled	[CE]  ';'  expected	28	None	replace
67	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  classDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
68	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  classDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(type,  classDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
69	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
70	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF,  typeDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
71	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f,  typeDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
72	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
73	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
74	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  f);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f,  f);	  Type    type    =    f.getGenericType(typeFiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
75	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(type,  classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(type,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(type,  classDefiningF);	  Type    type    =    f.getGenericType(typeFiningF,    classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	12	None	replace
76	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeFiningF,  f);  [CE]  cannot  find  symbol  typeFiningF  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeFiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(typeFiningF,  f);	  Type    type    =    f.getGenericType(typeFiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeFiningF	12	None	replace
77	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getReturnType(f).getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getReturnType(f).getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getReturnType(f).getReturnType(typeDefiningF);	  Type    type    =    f.getReturnType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
78	[BUG]  [BUGGY]  Type  type  =  classesDefiningF.getReturnType(f);  [CE]  cannot  find  symbol  classesDefiningF  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classesDefiningF.getReturnType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classesDefiningF.getReturnType(f);	  Type    type    =    f.getReturnType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  classesDefiningF	67	None	replace
79	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredTypeInfo();  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getDeclaredTypeInfo();	  Type    type    =    f,    classDefiningF.getTypeInfo();    	non-compiled	[CE]  ';'  expected	13	None	replace
80	[BUG]  [BUGGY]  Type  type  =  classDefiningF,  f.getTypeInfo();  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF,  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF,  f.getTypeInfo();	  Type    type    =    f,    classDefiningF.getTypeInfo();    	non-compiled	[CE]  ';'  expected	13	None	replace
81	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getDeclaredType(f);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getDeclaredType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getDeclaredType(f);	  Type    type    =    f.getDeclaredType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
82	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(typeDefiningF,  classDefiningF);	  Type    type    =    f.getDeclaredType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
83	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getDeclaredType(f);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getDeclaredType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getDeclaredType(f);	  Type    type    =    f.getDeclaredType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
84	[BUG]  [BUGGY]  Type  type  =  f.typeDefiningF.getDeclaredType(typeDefiningF);  [CE]  cannot  find  symbol  typeDefiningF  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.typeDefiningF.getDeclaredType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.typeDefiningF.getDeclaredType(typeDefiningF);	  Type    type    =    f.getDeclaredType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	30	None	replace
85	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF).getDeclaredType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF).getDeclaredType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(classDefiningF).getDeclaredType(typeDefiningF);	  Type    type    =    f.getDeclaredType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
86	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF.getGenericType());	  Type    type    =    typeDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
87	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getGenericType();  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF).getGenericType();	  Type    type    =    typeDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
88	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getGenericType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getGenericType();	  Type    type    =    typeDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
89	[BUG]  [BUGGY]  Type  type  =  f,  typeDefiningF.getGenericType();  [CE]  ';'  expected  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  typeDefiningF.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  typeDefiningF.getGenericType();	  Type    type    =    typeDefiningF.getGenericType();    	non-compiled	[CE]  ';'  expected	81	None	replace
90	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF,  classDefiningF);  [CE]  ';'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF),    typeDefiningF);    	non-compiled	[CE]  ';'  expected	46	None	replace
91	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  classDefiningF);  [CE]  ';'  expected  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF),  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF),    typeDefiningF);    	non-compiled	[CE]  ';'  expected	46	None	replace
92	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  f.getGenericType());  [CE]  cannot  find  symbol  ClassUtils  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  f.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(typeDefiningF,  f.getGenericType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	39	None	replace
93	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  classDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  classDefiningF.getGenericType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
94	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(f,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(f,  classDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(f,  classDefiningF.getGenericType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
95	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f,  classDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  f,  classDefiningF.getGenericType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
96	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getDeclaredType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
97	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  classDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(typeDefiningF,  classDefiningF.getGenericType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
98	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(f,  f.getGenericType());  [CE]  cannot  find  symbol  ClassUtils  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(f,  f.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(f,  f.getGenericType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	39	None	replace
99	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getRawType());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getRawType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getRawType());	  Type    type    =    f,    classDefiningF.getRawType();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
100	[BUG]  [BUGGY]  Type  type  =  f,  typeDefiningF.type().getTypeInfo();  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  typeDefiningF.type().getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  typeDefiningF.type().getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  ';'  expected	79	None	replace
101	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.type().getTypeInfo();  [CE]  ';'  expected  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.type().getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.type().getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  ';'  expected	79	None	replace
102	[BUG]  [BUGGY]  Type  type  =  classDefiningF.type().getTypeInfo();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.type().getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.type().getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
103	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfo().type();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfo().type();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfo().type();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
104	[BUG]  [BUGGY]  Type  type  =  f.newType().getTypeInfo();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.newType().getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.newType().getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
105	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  ==  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	56	None	add
106	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  type  =  f  ==  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  type  =  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  type  =  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	56	None	add
107	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f!=  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	56	None	add
108	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  >>  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  >>  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  f  >>  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	56	None	add
109	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  =  f  ==  null?  null  :  f.getType();  [CE]  cannot  find  symbol  Type  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  =  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  =  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  cannot  find  symbol  Type	56	None	add
110	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  ==  null?  null  :  f.getType());  [CE]  ';'  expected  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  ==  null?  null  :  f.getType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  f  ==  null?  null  :  f.getType());	  	non-compiled	[CE]  ';'  expected	56	None	add
111	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  type  =  f  ==  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  type  =  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    type  =  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	56	None	add
112	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  >=  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  >=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  f  >=  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	56	None	add
113	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  clazzDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  clazzDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f,  clazzDefiningF);	  Type    type    =    f.getGenericType(clazzDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	11	None	replace
114	[BUG]  [BUGGY]  Type  type  =  clazzDefiningF.getGenericType(f,  classDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  clazzDefiningF.getGenericType(f,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  clazzDefiningF.getGenericType(f,  classDefiningF);	  Type    type    =    f.getGenericType(clazzDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	11	None	replace
115	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =(typeDefiningF  ==  null)?  null  :  f.getGenericType();	  Type    type    =    this.classDefiningF.getGenericType();    	compilable	  [FE]  UnsupportedOperationException  	82	1	replace
116	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getGenericType();  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  f.getGenericType();	  Type    type    =    this.classDefiningF.getGenericType();    	compilable	  [FE]  UnsupportedOperationException  	82	1	replace
117	[BUG]  [BUGGY]  Type  type  =  f.classDefiningF.getGenericType();  [CE]  cannot  find  symbol  classDefiningF  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.classDefiningF.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.classDefiningF.getGenericType();	  Type    type    =    this.classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol  classDefiningF	82	None	replace
118	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f);  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(f);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(classDefiningF);    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	2	None	replace
119	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(f);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	2	None	replace
120	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(classDefiningF);    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	2	None	replace
121	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getRawClass();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  f.getRawClass();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
122	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF,  classDefiningF.getRawClass();  [CE]  ';'  expected  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF,  classDefiningF.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF,  classDefiningF.getRawClass();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  ';'  expected	76	None	replace
123	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getRawClass();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getRawClass();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
124	[BUG]  [BUGGY]  Type  type  =(typeDefiningF!=  null)?  null  :  typeDefiningF.getRawClass();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF!=  null)?  null  :  typeDefiningF.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF!=  null)?  null  :  typeDefiningF.getRawClass();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
125	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getTypeInfo();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
126	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.toType();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.toType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.toType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
127	[BUG]  [BUGGY]  Type  type  =  f,  typeDefiningF.type().getRawType();  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  typeDefiningF.type().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  typeDefiningF.type().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  ';'  expected	34	None	replace
128	[BUG]  [BUGGY]  Type  type  =  f.getType().getRawType();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
129	[BUG]  [BUGGY]  Type  type  =  classDefiningF.type().getRawType();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.type().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.type().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
130	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.type().getRawType();  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.type().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.type().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  ';'  expected	34	None	replace
131	[BUG]  [BUGGY]  Type  type  =  f.type().toType().getRawType();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().toType().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().toType().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
132	[BUG]  [BUGGY]  Type  type  =  f.newType().getRawType();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.newType().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.newType().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
133	[BUG]  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF);  [CE]  cannot  find  symbol  type  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(type,  typeDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
134	[BUG]  [BUGGY]  Type  actualType  =  getActualType(type,  f,  typeDefiningF);  [CE]  cannot  find  symbol  type  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(type,  f,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(type,  f,  typeDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
135	[BUG]  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  f);  [CE]  cannot  find  symbol  type  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(type,  typeDefiningF,  f);	  Type    actualType    =    getActualType(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
136	[BUG]  [BUGGY]  Type  actualType  =  getActualType(classDefiningF,  typeDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(classDefiningF,  typeDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF);    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	4	None	replace
137	[BUG]  [BUGGY]  Type  actualType  =  getActualType(typeDefiningF,  f);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(typeDefiningF,  f);	  Type    actualType    =    getActualType(f,    typeDefiningF);    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	4	None	replace
138	[BUG]  [BUGGY]  Type  actualType  =  getActualType(type,  f);  [CE]  cannot  find  symbol  type  [FE]                                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(type,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(type,  f);	  Type    actualType    =    getActualType(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
139	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f,  classDefiningF.getTypeInfo();  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f,  classDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f,  classDefiningF.getTypeInfo();	  Type    type    =    f    ==    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  ';'  expected	51	None	replace
140	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfoFactory.getTypeInfo();  [CE]  cannot  find  symbol  typeInfoFactory  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfoFactory.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeInfoFactory.getTypeInfo();	  Type    type    =    f    ==    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol  typeInfoFactory	51	None	replace
141	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfo();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeInfo();	  Type    type    =    f    ==    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
142	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfo.getTypeInfo();  [CE]  cannot  find  symbol  typeInfo  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfo.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeInfo.getTypeInfo();	  Type    type    =    f    ==    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol  typeInfo	51	None	replace
143	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.newTypeInfo();  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.newTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.newTypeInfo();	  Type    type    =    f    ==    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
144	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getDeclaredTypeInfo();  [CE]  inconvertible  types  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getDeclaredTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getDeclaredTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(TypeInfo)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	54	None	replace
145	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)type  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)type  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(TypeInfo)type  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(TypeInfo)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	54	None	replace
146	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getConstructor();  [CE]  inconvertible  types  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getConstructor();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getConstructor();	  Type    type    =    f    instanceof    TypeInfo?(TypeInfo)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	54	None	replace
147	[BUG]  [BUGGY]  Type  type  =(f  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [CE]  ')'  expected  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(f  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(f  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(TypeInfo)f    :    f.getTypeInfo();    	non-compiled	[CE]  ')'  expected	54	None	replace
148	[BUG]  [BUGGY]  Type  type  =  typeDefiningF  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(TypeInfo)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	54	None	replace
149	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f).getGenericType();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF,  f).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	37	None	replace
150	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF).getGenericType();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	37	None	replace
151	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f).getGenericType();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  f).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	37	None	replace
152	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF).getGenericType();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	37	None	replace
153	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).genericType();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).genericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).genericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
154	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	44	None	replace
155	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f).getGenericType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f).getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f).getGenericType(typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
156	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF).getGenericType(f);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF).getGenericType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF).getGenericType(f);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	44	None	replace
157	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF).getGenericType(classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF).getGenericType(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF).getGenericType(classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	44	None	replace
158	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(actualType);  [CE]  cannot  find  symbol  actualType  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(actualType);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF).getGenericType(actualType);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  actualType	44	None	replace
159	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(actualType,  typeDefiningF);  [CE]  cannot  find  symbol  actualType  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(actualType,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF).getGenericType(actualType,  typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  actualType	44	None	replace
160	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF,  f);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(typeDefiningF,  f);	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
161	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  typeDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	7	None	replace
162	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  null);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  null);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  null);	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	7	None	replace
163	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  ClassLoader.getSystemClassLoader());  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  ClassLoader.getSystemClassLoader());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  ClassLoader.getSystemClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	63	None	replace
164	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  ClassLoader.getSystemClassLoader(),  classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  ClassLoader.getSystemClassLoader(),  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  ClassLoader.getSystemClassLoader(),  classDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	63	None	replace
165	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  ClassLoader.getSystemClassLoader());  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  ClassLoader.getSystemClassLoader());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  ClassLoader.getSystemClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	63	None	replace
166	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF.getSystemClassLoader());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF.getSystemClassLoader());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF.getSystemClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
167	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  f.getSystemClassLoader());  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  f.getSystemClassLoader());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f,  f.getSystemClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
168	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF.getClassLoader());  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF.getClassLoader());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF.getClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	63	None	replace
169	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  typeDefiningF);	  Type    type    =    f.getGenericType(clazz,    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	61	None	replace
170	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getGenericType(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getGenericType(f,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getGenericType(f,  typeDefiningF);	  Type    type    =    f.getGenericType(clazz,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
171	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getGenericType(f,  f);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getGenericType(f,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getGenericType(f,  f);	  Type    type    =    f.getGenericType(clazz,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
172	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getReturnType());  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getReturnType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getReturnType());	  Type    type    =    f,    classDefiningF.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
173	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  typeDefiningF).getTypeInfo();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  typeDefiningF).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF,  typeDefiningF).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    typeDefiningF).getTypeInfo();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	17	None	replace
174	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF),  classDefiningF.getTypeInfo();  [CE]  ';'  expected  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF),  classDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF),  classDefiningF.getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    typeDefiningF).getTypeInfo();    	non-compiled	[CE]  ';'  expected	17	None	replace
175	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF).getTypeInfo();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    typeDefiningF).getTypeInfo();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	17	None	replace
176	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  typeDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF,  typeDefiningF);	  Type    type    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	68	None	replace
177	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF);	  Type    type    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	68	None	replace
178	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  f);	  Type    type    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	68	None	replace
179	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF);	  Type    type    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	68	None	replace
180	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  clazzDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  clazzDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  clazzDefiningF);	  Type    type    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	68	None	replace
181	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF,  f);	  Type    type    =    getTypeInfoForField(f,    typeDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	68	None	replace
182	[BUG]  [BUGGY]  Class  <?>  f  =  f.getRawClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  f  =  f.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  f  =  f.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	25	None	replace
183	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getRawClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	25	None	replace
184	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getRawClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	25	None	replace
185	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getRawClass();  [CE]  cannot  find  symbol  [FE]                          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
186	[BUG]  [BUGGY]  Class  <?>  f  =  classDefiningF.getRawClass();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  f  =  classDefiningF.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  f  =  classDefiningF.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	25	None	replace
187	[BUG]  [BUGGY]  Object  type  =  f.getType();  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Object  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Object  type  =  f.getType();	  Type    type    =    f.getType();    Object    type    =    f.getType();    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	85	None	replace
188	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Class  <?>  type  =  f.getType();	  Type    type    =    f.getType();    Object    type    =    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	85	1	replace
189	[BUG]  [BUGGY]  Class  <?>  type  =  f.getType();  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  type  =  f.getType();	  Type    type    =    f.getType();    Object    type    =    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	85	1	replace
190	[BUG]  [BUGGY]  Class  <?>  f  =  f.getReferenceName();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  f  =  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  f  =  f.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	66	None	replace
191	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getReferenceName();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	66	None	replace
192	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getReferenceName();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	66	None	replace
193	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getReferenceName();  [CE]  cannot  find  symbol  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
194	[BUG]  [BUGGY]  Type  f  =  f.getReferenceName();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  f.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	66	None	replace
195	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f,  classDefiningF.getDeclaredType();  [CE]  ';'  expected  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f,  classDefiningF.getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f,  classDefiningF.getDeclaredType();	  Type    type    =    f    ==    null?    null    :    f.getDeclaredType();    	non-compiled	[CE]  ';'  expected	70	None	replace
196	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f.getDeclaredType();	  Type    type    =    f    ==    null?    null    :    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
197	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeFactory.getDeclaredType();  [CE]  cannot  find  symbol  typeFactory  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeFactory.getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeFactory.getDeclaredType();	  Type    type    =    f    ==    null?    null    :    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  typeFactory	70	None	replace
198	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfo.getDeclaredType();  [CE]  cannot  find  symbol  typeInfo  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfo.getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeInfo.getDeclaredType();	  Type    type    =    f    ==    null?    null    :    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  typeInfo	70	None	replace
199	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.type().getDeclaredType();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.type().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.type().getDeclaredType();	  Type    type    =    f    ==    null?    null    :    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
200	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getDeclaredType(ARRAY_TYPE);  [CE]  cannot  find  symbol  ARRAY_TYPE  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getDeclaredType(ARRAY_TYPE);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getDeclaredType(ARRAY_TYPE);	  Type    type    =    f.getDeclaredType(ARRAY_TYPE);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TYPE	72	None	replace
201	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF).getDeclaredType(ARRAY_TYPE);  [CE]  cannot  find  symbol  ARRAY_TYPE  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF).getDeclaredType(ARRAY_TYPE);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(classDefiningF).getDeclaredType(ARRAY_TYPE);	  Type    type    =    f.getDeclaredType(ARRAY_TYPE);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TYPE	72	None	replace
202	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(ARRAY_TYPE,  classDefiningF);  [CE]  cannot  find  symbol  ARRAY_TYPE  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(ARRAY_TYPE,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(ARRAY_TYPE,  classDefiningF);	  Type    type    =    f.getDeclaredType(ARRAY_TYPE);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TYPE	72	None	replace
203	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF,  ARRAY_TYPE);  [CE]  cannot  find  symbol  ARRAY_TYPE  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(classDefiningF,  ARRAY_TYPE);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(classDefiningF,  ARRAY_TYPE);	  Type    type    =    f.getDeclaredType(ARRAY_TYPE);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TYPE	72	None	replace
204	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(CLASS_TYPE);  [CE]  cannot  find  symbol  CLASS_TYPE  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(CLASS_TYPE);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(CLASS_TYPE);	  Type    type    =    f.getDeclaredType(ARRAY_TYPE);    	non-compiled	[CE]  cannot  find  symbol  CLASS_TYPE	72	None	replace
205	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)type  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)type  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(Type)type  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
206	[BUG]  [BUGGY]  Type  type  =  typeDefiningF  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
207	[BUG]  [BUGGY]  Type  type  =(f  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [CE]  ')'  expected  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(f  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(f  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  ')'  expected	53	None	replace
208	[BUG]  [BUGGY]  Type  type  =  classDefiningF  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF  instanceof  TypeInfo?(Type)f  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
209	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getConstructor();  [CE]  inconvertible  types  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getConstructor();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getConstructor();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
210	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getTypeInfoForField(f,  classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getTypeInfoForField(f,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getTypeInfoForField(f,  classDefiningF);	  Type    type    =    f.getType();    Type    type    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	19	None	replace
211	[BUG]  [BUGGY]  type  =  f.getType();  [CE]  cannot  find  symbol  type  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();	  Type    type    =    f.getType();    Type    type    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	19	None	replace
212	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF).getGenericType();  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	62	None	replace
213	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF,  f).getGenericType();  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF,  f).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(typeDefiningF,  f).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
214	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  typeDefiningF).getGenericType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  typeDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f,  typeDefiningF).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
215	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  f).getGenericType();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  f).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f,  f).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
216	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  typeDefiningF).getGenericType();  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  typeDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  typeDefiningF).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	62	None	replace
217	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazzDefiningF,  typeDefiningF).getGenericType();  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(clazzDefiningF,  typeDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazzDefiningF,  typeDefiningF).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	62	None	replace
218	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getTypeInfo(classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getTypeInfo(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getTypeInfo(classDefiningF);	  Type    type    =    classDefiningF.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	14	None	replace
219	[BUG]  [BUGGY]  Type  def  =  f.getType();  [CE]  cannot  find  symbol  type  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  def  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  def  =  f.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	86	None	replace
220	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType();  Type  def  =  f.getType();  [CE]  cannot  find  symbol  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType();  Type  def  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType();  Type  def  =  f.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
221	[BUG]  [BUGGY]  type  =  f.getType();  Type  def  =  f.getType();  [CE]  cannot  find  symbol  type  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  Type  def  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();  Type  def  =  f.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	86	None	replace
222	[BUG]  [BUGGY]  Type  type  =  f.getReturnType();  Type  def  =  f.getType();  [CE]  cannot  find  symbol  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getReturnType();  Type  def  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType();  Type  def  =  f.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
223	[BUG]  [BUGGY]  Type  def  =  typeDefiningF.getType();  [CE]  cannot  find  symbol  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  def  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  def  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
224	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF,  f.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
225	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
226	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
227	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  f.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
228	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
229	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  classDefiningF.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  classDefiningF.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  classDefiningF.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
230	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getTypeInfo(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getTypeInfo(),  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getTypeInfo(),  typeDefiningF);	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
231	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  clazz);  [CE]  cannot  find  symbol  clazz  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(f,  clazz);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(f,  clazz);	  Type    type    =    f.getGenericType(clazz,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	73	None	replace
232	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  f);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  f);	  Type    type    =    f.getGenericType(clazz,    classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	73	None	replace
233	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getReferenceName();  [CE]  cannot  find  symbol  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.getReferenceName();	  Type    type    =    f    ==    null?    null    :    f.getType();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
234	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
235	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(typeDefiningF);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
236	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  classDefiningF.isAssignableFrom(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  classDefiningF.isAssignableFrom(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  classDefiningF.isAssignableFrom(typeDefiningF);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
237	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(classDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  &&  typeDefiningF.isAssignableFrom(classDefiningF);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
238	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
239	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getDeclaredType()  ||  f.isAssignableFrom(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getDeclaredType()  ||  f.isAssignableFrom(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getDeclaredType()  ||  f.isAssignableFrom(typeDefiningF);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
240	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f.getGenericType());  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF,  f.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF,  f.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	36	None	replace
241	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.getGenericType());  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	36	None	replace
242	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
243	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
244	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f.getGenericType());  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  f.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  f.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	36	None	replace
245	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getGenericType(),  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF.getGenericType(),  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF.getGenericType(),  typeDefiningF);	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
246	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  classDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  classDefiningF.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
247	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType(f);  [CE]  cannot  find  symbol  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType(f);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
248	[BUG]  [BUGGY]  Type  type  =  f.getType(typeDefiningF,  classDefiningF);  [CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(typeDefiningF,  classDefiningF);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;	60	None	replace
249	[BUG]  [BUGGY]  Type  type  =  f.getType(typeDefiningF);  [CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(typeDefiningF);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;	60	None	replace
250	[BUG]  [BUGGY]  Type  type  =  f.getType(classDefiningF,  typeDefiningF);  [CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType(classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(classDefiningF,  typeDefiningF);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;	60	None	replace
251	[BUG]  [BUGGY]  Type  type  =  f.getType(classDefiningF,  classDefiningF);  [CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType(classDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(classDefiningF,  classDefiningF);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;	60	None	replace
252	[BUG]  [BUGGY]  Type  type  =  f.getType(classDefiningF,  f);  [CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType(classDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(classDefiningF,  f);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  method  getType  in  class  Field  cannot  be  applied  to  given  types;	60	None	replace
253	[BUG]  [BUGGY]  Type  type  =  f.getType(clazzDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType(clazzDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(clazzDefiningF,  classDefiningF);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	60	None	replace
254	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getType();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
255	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF,  classDefiningF.getType();  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF,  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF,  classDefiningF.getType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	non-compiled	[CE]  ';'  expected	77	None	replace
256	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =(typeDefiningF  ==  null)?  null  :  f.getType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	77	1	replace
257	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getType();  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  f.getType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	77	1	replace
258	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getReturnType();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getReturnType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
259	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getReferenceName();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.getReferenceName();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
260	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(typeDefiningF);	  Type    type    =    classDefiningF.getGenericType(f);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
261	[BUG]  [BUGGY]  Type  type  =  classDefiningF,  f.getGenericType(typeDefiningF);  [CE]  ';'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF,  f.getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF,  f.getGenericType(typeDefiningF);	  Type    type    =    classDefiningF.getGenericType(f);    	non-compiled	[CE]  ';'  expected	8	None	replace
262	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF);  [CE]  ';'  expected  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF);	  Type    type    =    classDefiningF.getGenericType(f);    	non-compiled	[CE]  ';'  expected	8	None	replace
263	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =  classDefiningF  ==  null?  null  :  f.getType();	  Type    type    =    f!=    null?    null    :    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	59	1	replace
264	[BUG]  [BUGGY]  Type  type  =  classDefiningF  ==  null?  null  :  f.getType();  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF  ==  null?  null  :  f.getType();	  Type    type    =    f!=    null?    null    :    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	59	1	replace
265	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF,  classDefiningF);	  Type    type    =    getTypeInfoForField(f,    classDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	5	None	replace
266	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.type);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.type);	  Type    type    =    getTypeInfoForField(f,    classDefiningF);    	non-compiled	[CE]  type  has  private  access  in  Field	5	None	replace
267	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.class);  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.class);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  f.class);	  Type    type    =    getTypeInfoForField(f,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
268	[BUG]  [BUGGY]  Type  type  =  classDefiningF.typeInfo();  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.typeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.typeInfo();	  Type    type    =    f.typeInfo();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
269	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).typeInfo();  [CE]  cannot  find  symbol  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).typeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF).typeInfo();	  Type    type    =    f.typeInfo();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
270	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).typeInfo();  [CE]  cannot  find  symbol  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).typeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).typeInfo();	  Type    type    =    f.typeInfo();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
271	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.typeInfo());  [CE]  cannot  find  symbol  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.typeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF.typeInfo());	  Type    type    =    f.typeInfo();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
272	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.typeInfo();  [CE]  cannot  find  symbol  [FE]                                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.typeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.typeInfo();	  Type    type    =    f.typeInfo();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
273	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF),  f);  [CE]  ';'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getGenericType(typeDefiningF),  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType(typeDefiningF),  f);	  Type    type    =    f.getGenericType(typeDefiningF),    classDefiningF);    	non-compiled	[CE]  ';'  expected	75	None	replace
274	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF;  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF;  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF;	  Type    type    =    f.getGenericType(typeDefiningF),    classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	75	None	replace
275	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF,  null);  [CE]  <identifier>  expected  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF,  null);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF,  null);	  Type    type    =    f.getGenericType(typeDefiningF),    classDefiningF);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
276	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF);	  Type    type    =    getTypeInfoForField(f);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	69	None	replace
277	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(typeDefiningF);	  Type    type    =    getTypeInfoForField(f);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	69	None	replace
278	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF.getSuperclass(),  f);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF.getSuperclass(),  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF.getSuperclass(),  f);	  Type    type    =    getTypeInfoForField(f);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	69	None	replace
279	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF.getComponentType());  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(classDefiningF.getComponentType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(classDefiningF.getComponentType());	  Type    type    =    getTypeInfoForField(f);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	69	None	replace
280	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  f.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =(classDefiningF  ==  null)?  null  :  f.getGenericType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	compilable	  [FE]  UnsupportedOperationException  	80	1	replace
281	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  f.getGenericType();  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  f.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  f.getGenericType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	compilable	  [FE]  UnsupportedOperationException  	80	1	replace
282	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF,  f.getGenericType();  [CE]  ';'  expected  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF,  f.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF,  f.getGenericType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	non-compiled	[CE]  ';'  expected	80	None	replace
283	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
284	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.genericType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.genericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.genericType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
285	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.toType();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.toType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.toType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
286	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getGenericValue();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getGenericValue();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getGenericValue();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
287	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f,  classDefiningF.getTypeInfo();  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f,  classDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f,  classDefiningF.getTypeInfo();	  Type    type    =    f!=    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  ';'  expected	52	None	replace
288	[BUG]  [BUGGY]  Type  actualType  =  f.getType();  [CE]  variable  actualType  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  f.getType();	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  variable  actualType  is  already  defined  in  method  getTypeInfoForField(Field,Type)	21	None	replace
289	[BUG]  [BUGGY]  Type  actualType  =  typeDefiningF.getType();  [CE]  cannot  find  symbol  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
290	[BUG]  [BUGGY]  type  =  f.getType();  Type  actualType  =  f.getType();  [CE]  cannot  find  symbol  type  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  Type  actualType  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();  Type  actualType  =  f.getType();	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	21	None	replace
291	[BUG]  [BUGGY]  type  =  f.getType();  Type  actualType  =  typeDefiningF.getType();  [CE]  cannot  find  symbol  type  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  Type  actualType  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();  Type  actualType  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	21	None	replace
292	[BUG]  [BUGGY]  Type  actualType  =  getActualType(f.getType(),  typeDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(f.getType(),  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(f.getType(),  typeDefiningF);	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	21	None	replace
293	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getRawType(classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getRawType(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getRawType(classDefiningF);	  Type    type    =    f.getRawType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	49	None	replace
294	[BUG]  [BUGGY]  Type  type  =  classesDefiningF.getRawType(f);  [CE]  cannot  find  symbol  classesDefiningF  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classesDefiningF.getRawType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classesDefiningF.getRawType(f);	  Type    type    =    f.getRawType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  classesDefiningF	49	None	replace
295	[BUG]  [BUGGY]  Class  <?>  f  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  f  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  f  =  f.getType();	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
296	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	22	None	replace
297	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getType();  [CE]  cannot  find  symbol  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType();  Class  <?>  f  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
298	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  f  =  classDefiningF.getType();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	22	None	replace
299	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getDeclaredType(classDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getDeclaredType(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getDeclaredType(classDefiningF);	  Type    type    =    f.getDeclaredType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	71	None	replace
300	[BUG]  [BUGGY]  Type  type  =  classesDefiningF.getDeclaredType(f);  [CE]  cannot  find  symbol  classesDefiningF  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classesDefiningF.getDeclaredType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classesDefiningF.getDeclaredType(f);	  Type    type    =    f.getDeclaredType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  classesDefiningF	71	None	replace
301	[BUG]  [BUGGY]  Type  types  =  f.getType();  [CE]  cannot  find  symbol  type  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  types  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  types  =  f.getType();	  Type    type    =    f.getType();    Type    types    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	65	None	replace
302	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f!=  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  type  =  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
303	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f!=  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	58	None	add
304	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f  ==  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  type  =  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
305	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  >>  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  >>  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  f  >>  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	58	None	add
306	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  ==  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	58	None	add
307	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f  >>  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]              java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f  >>  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  type  =  f  >>  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
308	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f  >=  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f  >=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  type  =  f  >=  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
309	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  >=  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  >=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  f  >=  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	58	None	add
310	[BUG]  [BUGGY]  Type  <?>  type  =  f.getType();  [CE]  type  Type  does  not  take  parameters  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  <?>  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  <?>  type  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    type    =    f.getType();    	non-compiled	[CE]  type  Type  does  not  take  parameters	64	None	replace
311	[BUG]  [BUGGY]  Type  f  =  f.getType();  Class  <?>  type  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  f.getType();  Class  <?>  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  f.getType();  Class  <?>  type  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    type    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	64	None	replace
312	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  type  =  typeDefiningF.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  type  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  type  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Class    <?>    type    =    f.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	64	None	replace
313	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  type  =  f.getType();  [CE]  cannot  find  symbol  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType();  Class  <?>  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType();  Class  <?>  type  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    type    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
314	[BUG]  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  type  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
315	[BUG]  [BUGGY]  Type  actualType  =  getActualType(classDefiningF,  typeDefiningF,  typeDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(classDefiningF,  typeDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(classDefiningF,  typeDefiningF,  typeDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	3	None	replace
316	[BUG]  [BUGGY]  Type  actualType  =  getActualType(classDefiningF,  typeDefiningF,  f);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(classDefiningF,  typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(classDefiningF,  typeDefiningF,  f);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	3	None	replace
317	[BUG]  [BUGGY]  Type  actualType  =  getActualType(type,  f,  typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  type  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(type,  f,  typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(type,  f,  typeDefiningF,  classDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
318	[BUG]  [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF,  classDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF,  classDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	3	None	replace
319	[BUG]  [BUGGY]  Type  actualType  =  getActualType(f,  classDefiningF,  typeDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(f,  classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(f,  classDefiningF,  typeDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	3	None	replace
320	[BUG]  [BUGGY]  Type  type  =  f.getParameterType(classDefiningF);  [CE]  cannot  find  symbol  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getParameterType(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getParameterType(classDefiningF);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
321	[BUG]  [BUGGY]  Type  type  =  f.getParameterType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getParameterType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getParameterType(typeDefiningF);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
322	[BUG]  [BUGGY]  Type  type  =  f.getParameterType(1);  [CE]  cannot  find  symbol  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getParameterType(1);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getParameterType(1);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
323	[BUG]  [BUGGY]  Type  type  =  f.getParameterType(classDefiningF).getParameterType(0);  [CE]  cannot  find  symbol  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getParameterType(classDefiningF).getParameterType(0);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getParameterType(classDefiningF).getParameterType(0);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
324	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getParameterType(0);  [CE]  cannot  find  symbol  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getParameterType(0);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getParameterType(0);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
325	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfo().getParameterType(0);  [CE]  cannot  find  symbol  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfo().getParameterType(0);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfo().getParameterType(0);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
326	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfo(classDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfo(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfo(classDefiningF);	  Type    type    =    f.getTypeInfo(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
327	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getTypeInfo(f);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getTypeInfo(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getTypeInfo(f);	  Type    type    =    f.getTypeInfo(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
328	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfo(typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfo(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfo(typeDefiningF,  classDefiningF);	  Type    type    =    f.getTypeInfo(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
329	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getTypeInfo(f);  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getTypeInfo(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getTypeInfo(f);	  Type    type    =    f.getTypeInfo(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
330	[BUG]  [BUGGY]  Type  type  =  f.getType().getDeclaredType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType().getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
331	[BUG]  [BUGGY]  Type  type  =  f,  typeDefiningF.type().getDeclaredType();  [CE]  ';'  expected  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  typeDefiningF.type().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  typeDefiningF.type().getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  ';'  expected	29	None	replace
332	[BUG]  [BUGGY]  Type  type  =  classDefiningF.type().getDeclaredType();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.type().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.type().getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
333	[BUG]  [BUGGY]  Type  type  =  f.declaredType().getDeclaredType();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.declaredType().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.declaredType().getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
334	[BUG]  [BUGGY]  Type  type  =  f.newType().getDeclaredType();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.newType().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.newType().getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
335	[BUG]  [BUGGY]  Type  type  =  f.declaredType().type();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.declaredType().type();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.declaredType().type();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
336	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getDeclaredType(),  f);  [CE]  ';'  expected  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getDeclaredType(),  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getDeclaredType(),  f);	  Type    type    =    classDefiningF.getDeclaredType();    	non-compiled	[CE]  ';'  expected	27	None	replace
337	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  getTypeInfoForField(f,  typeDefiningF).getType();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  getTypeInfoForField(f,  typeDefiningF).getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  getTypeInfoForField(f,  typeDefiningF).getType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
338	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF!=  null?  null  :  classDefiningF.getTypeInfo();  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF!=  null?  null  :  classDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF!=  null?  null  :  classDefiningF.getTypeInfo();	  Type    type    =    f,    classDefiningF.getTypeInfo();    	non-compiled	[CE]  ';'  expected	13	None	replace
339	[BUG]  [BUGGY]  Type  type  =  f.type().findType(typeDefiningF).getReturnType();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().findType(typeDefiningF).getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().findType(typeDefiningF).getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
340	[BUG]  [BUGGY]  Type  type  =  f.type().findType(typeDefiningF,  f.getReturnType());  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().findType(typeDefiningF,  f.getReturnType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().findType(typeDefiningF,  f.getReturnType());	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
341	[BUG]  [BUGGY]  Type  type  =  f.type().findType(typeDefiningF.getReturnType());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().findType(typeDefiningF.getReturnType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().findType(typeDefiningF.getReturnType());	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
342	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getRawType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF).getRawType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF).getRawType(typeDefiningF);	  Type    type    =    f.getRawType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
343	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.getRawType(typeDefiningF);  [CE]  ')'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.getRawType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF.getRawType(typeDefiningF);	  Type    type    =    f.getRawType(typeDefiningF);    	non-compiled	[CE]  ')'  expected	50	None	replace
344	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f).getGenericType();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	37	None	replace
345	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  clazzDefiningF).getGenericType();  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  clazzDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  clazzDefiningF).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	37	None	replace
346	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  true);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  true);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  true);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	9	None	replace
347	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  this);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  this);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	9	None	replace
348	[BUG]  [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
349	[BUG]  [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getClass();  return  new  TypeInfo(type);  }  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getClass();  return  new  TypeInfo(type);  }  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getClass();  return  new  TypeInfo(type);  }	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
350	[BUG]  [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  getActualType(typeDefiningF,  classDefiningF);  return  new  TypeInfo(  [CE]  ')'  expected  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  getActualType(typeDefiningF,  classDefiningF);  return  new  TypeInfo(  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  getActualType(typeDefiningF,  classDefiningF);  return  new  TypeInfo(	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  ')'  expected	20	None	replace
351	[BUG]  [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getRawClass();  return  new  TypeInfo(type);  }  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getRawClass();  return  new  TypeInfo(type);  }  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getRawClass();  return  new  TypeInfo(type);  }	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
352	[BUG]  [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  actualType  =  getActualType(type,  classDefiningF,  actualType);  return  new  TypeInfo(actualType);  }  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  actualType  =  getActualType(type,  classDefiningF,  actualType);  return  new  TypeInfo(actualType);  }  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  actualType  =  getActualType(type,  classDefiningF,  actualType);  return  new  TypeInfo(actualType);  }	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
353	[BUG]  [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getParameterType(0);  return  new  TypeInfo(type);  }  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getParameterType(0);  return  new  TypeInfo(type);  }  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	if(classDefiningF!=  null)  {  Type  type  =  f.getType();  Type  f  =  f.getType();  }  else  {  Class  <?>  classDefiningF  =  classDefiningF.getParameterType(0);  return  new  TypeInfo(type);  }	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
354	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  null).getGenericType();  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  null).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  null).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	62	None	replace
355	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazz,  typeDefiningF).getGenericType();  [CE]  cannot  find  symbol  clazz  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(clazz,  typeDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazz,  typeDefiningF).getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol  clazz	62	None	replace
356	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getGenericType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getGenericType(typeDefiningF);	  Type    type    =    classDefiningF.getGenericType(f);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
357	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazz);  [CE]  cannot  find  symbol  clazz  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(clazz);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazz);	  Type    type    =    classDefiningF.getGenericType(f);    	non-compiled	[CE]  cannot  find  symbol  clazz	8	None	replace
358	[BUG]  [BUGGY]  Type  type  =  f,  f.type().getRawType();  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  f.type().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  f.type().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  ';'  expected	34	None	replace
359	[BUG]  [BUGGY]  Type  type  =  scope.type().getRawType();  [CE]  cannot  find  symbol  scope  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  scope.type().getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  scope.type().getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol  scope	34	None	replace
360	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
361	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
362	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getReturnType();  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getReturnType();	  Type    type    =    classDefiningF.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
363	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getTypeInfoForField(f,  typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getTypeInfoForField(f,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getTypeInfoForField(f,  typeDefiningF);	  Type    type    =    classDefiningF.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
364	[BUG]  [BUGGY]  Type  type  =  f,  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [CE]  ';'  expected  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  ';'  expected	83	None	replace
365	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
366	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.equals(f.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.equals(f.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.equals(f.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
367	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  classDefiningF  =  f.getRawClass();  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  classDefiningF  =  f.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  classDefiningF  =  f.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	25	None	replace
368	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);  [CE]  ';'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(f);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  ';'  expected	84	None	replace
369	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getRawType());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getRawType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getRawType());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
370	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getType();  [CE]  cannot  find  symbol  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getType();	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
371	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getType();	  Type    type    =    classDefiningF.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	47	1	replace
372	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getType();  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getType();	  Type    type    =    classDefiningF.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	47	1	replace
373	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  f.getType()  :  typeDefiningF;  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =(classDefiningF  ==  null)?  f.getType()  :  typeDefiningF;	  Type    type    =    classDefiningF.getType();    	compilable	  [FE]  IllegalArgumentException  	47	1	replace
374	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  f.getType()  :  typeDefiningF;  [FE]  IllegalArgumentException  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  f.getType()  :  typeDefiningF;  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  f.getType()  :  typeDefiningF;	  Type    type    =    classDefiningF.getType();    	compilable	  [FE]  IllegalArgumentException  	47	1	replace
375	[BUG]  [BUGGY]  Type  type  =  f.getReferenceName();  Type  def  =  f.getType();  [CE]  cannot  find  symbol  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getReferenceName();  Type  def  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReferenceName();  Type  def  =  f.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
376	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getType());  [CE]  incompatible  types  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.getType());	  Type    type    =    f.getType();    Type    type    =    f.getType();    	non-compiled	[CE]  incompatible  types	19	None	replace
377	[BUG]  [BUGGY]  Type  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  f);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
378	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getTypeInfoForField(typeDefiningF);  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getTypeInfoForField(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getTypeInfoForField(typeDefiningF);	  Type    type    =    f.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  ';'  expected	31	None	replace
379	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoForField(clazzDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfoForField(clazzDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfoForField(clazzDefiningF);	  Type    type    =    f.getTypeInfoForField(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	31	None	replace
380	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  null,  ClassLoader.getSystemClassLoader());  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  null,  ClassLoader.getSystemClassLoader());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  null,  ClassLoader.getSystemClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	63	None	replace
381	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getDeclaredType();  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getDeclaredType();	  Type    type    =    classDefiningF.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
382	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f.getType(),  typeDefiningF);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f.getType(),  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f.getType(),  typeDefiningF);	  Type    type    =    f.getType();    Type    types    =    f.getType();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	65	None	replace
383	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  =  f!=  null?  null  :  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  =  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  f  =  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
384	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  joli  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  joli  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  f  joli  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	58	None	add
385	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  =  f  ==  null?  null  :  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  f  =  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  f  =  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
386	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  =  f!=  null?  null  :  f.getType();  [CE]  cannot  find  symbol  Type  [FE]          java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  =  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  =  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  cannot  find  symbol  Type	58	None	add
387	[BUG]  [BUGGY]  Class  <?>  type  =  f.getType();  Type  f  =  classDefiningF.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  type  =  f.getType();  Type  f  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  type  =  f.getType();  Type  f  =  classDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	23	None	replace
388	[BUG]  [BUGGY]  type  =  f.getType();  Type  f  =  classDefiningF.getType();  [CE]  cannot  find  symbol  type  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  Type  f  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();  Type  f  =  classDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol  type	23	None	replace
389	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.type().getDeclaredType();  [CE]  ';'  expected  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.type().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.type().getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  ';'  expected	29	None	replace
390	[BUG]  [BUGGY]  Type  type  =  f,  f.type().getDeclaredType();  [CE]  ';'  expected  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  f.type().getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  f.type().getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  ';'  expected	29	None	replace
391	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType(typeDefiningF);  [CE]  ';'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getDeclaredType(typeDefiningF);	  Type    type    =    f,    classDefiningF.getDeclaredType();    	non-compiled	[CE]  ';'  expected	28	None	replace
392	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getReturnType(typeDefiningF);	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
393	[BUG]  [BUGGY]  Type  type  =  f.getReturnType();  Type  actualType  =  f.getType();  [CE]  cannot  find  symbol  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getReturnType();  Type  actualType  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType();  Type  actualType  =  f.getType();	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
394	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  f.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  f.getClass();	  Type    type    =    f.getType();    Object    type    =    f.getType();    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	85	None	replace
395	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getParameterType(0);  [CE]  ';'  expected  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getParameterType(0);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getParameterType(0);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  ';'  expected	48	None	replace
396	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getGenericType());  [CE]  incompatible  types  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  incompatible  types	36	None	replace
397	[BUG]  [BUGGY]  Type  type  =  classDefiningF  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF  instanceof  TypeInfo?(TypeInfo)f  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(TypeInfo)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	54	None	replace
398	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getReferenceName();  [CE]  inconvertible  types  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(TypeInfo)f  :  f.getReferenceName();	  Type    type    =    f    instanceof    TypeInfo?(TypeInfo)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	54	None	replace
399	[BUG]  [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF,  typeDefiningF);  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(f,  typeDefiningF,  classDefiningF,  typeDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	3	None	replace
400	[BUG]  [BUGGY]  Type  actualType  =  getActualType(type,  f,  classDefiningF);  [CE]  cannot  find  symbol  type  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(type,  f,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(type,  f,  classDefiningF);	  Type    actualType    =    getActualType(f,    typeDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
401	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType(f);  [CE]  ';'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getDeclaredType(f);	  Type    type    =    f.getDeclaredType(classDefiningF);    	non-compiled	[CE]  ';'  expected	71	None	replace
402	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(f);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(f);	  Type    type    =    f.getDeclaredType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
403	[BUG]  [BUGGY]  Type  f  =  f.getType();  Class  <?>  f  =  f.getReferenceName();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  f.getType();  Class  <?>  f  =  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  f.getType();  Class  <?>  f  =  f.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	66	None	replace
404	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  clazz);  [CE]  cannot  find  symbol  clazz  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  clazz);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  clazz);	  Type    type    =    f.getGenericType(clazz,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	73	None	replace
405	[BUG]  [BUGGY]  Type  type  =  clazz.getGenericType(f,  classDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  clazz.getGenericType(f,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  clazz.getGenericType(f,  classDefiningF);	  Type    type    =    f.getGenericType(clazz,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	73	None	replace
406	[BUG]  [BUGGY]  Type  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	1	None	replace
407	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  f.getGenericType()  :  typeDefiningF.getGenericType();  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  f.getGenericType()  :  typeDefiningF.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  f.getGenericType()  :  typeDefiningF.getGenericType();	  Type    type    =    typeDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
408	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  _classDefiningF);  [CE]  cannot  find  symbol  _classDefiningF  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  _classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  _classDefiningF);	  Type    type    =    getTypeInfoForField(f,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  _classDefiningF	5	None	replace
409	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  f);	  Type    type    =    getTypeInfoForField(f,    classDefiningF);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	5	None	replace
410	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  null);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  null);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  null);	  Type    type    =    f.getGenericType(typeDefiningF,    classesDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	74	None	replace
411	[BUG]  [BUGGY]  Type  type  =(typeDefiningF!=  null)?  null  :  f.getRawClass();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF!=  null)?  null  :  f.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF!=  null)?  null  :  f.getRawClass();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
412	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  scope.getRawClass();  [CE]  cannot  find  symbol  scope  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  scope.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  scope.getRawClass();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  scope	76	None	replace
413	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF;  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF;  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF),  typeDefiningF;	  Type    type    =    f.getGenericType(classDefiningF),    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	46	None	replace
414	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  classDefiningF  =  f.getType();  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  classDefiningF  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  classDefiningF  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getType();    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	22	None	replace
415	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getRawType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).getRawType();	  Type    type    =    classDefiningF.getRawType();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
416	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.typeInfoFactory.getTypeInfo();  [CE]  cannot  find  symbol  typeInfoFactory  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.typeInfoFactory.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f.typeInfoFactory.getTypeInfo();	  Type    type    =    f!=    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol  typeInfoFactory	52	None	replace
417	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  f);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  f);	  Type    type    =    f.getGenericType(clazzDefiningF,    typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	45	None	replace
418	[BUG]  [BUGGY]  Type  type  =  clazzDefiningF.getGenericType(f,  typeDefiningF);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  clazzDefiningF.getGenericType(f,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  clazzDefiningF.getGenericType(f,  typeDefiningF);	  Type    type    =    f.getGenericType(clazzDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	45	None	replace
419	[BUG]  [BUGGY]  Type  type  =(clazzDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();  [CE]  cannot  find  symbol  clazzDefiningF  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(clazzDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(clazzDefiningF  ==  null)?  null  :  classDefiningF.getGenericType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	80	None	replace
420	[BUG]  [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF).getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF).getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType(typeDefiningF).getReturnType(typeDefiningF);	  Type    type    =    f.getReturnType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
421	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  false);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  false);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF,  false);	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	7	None	replace
422	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF).getGenericType(typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF).getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF).getGenericType(typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	44	None	replace
423	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  f);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  f);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	44	None	replace
424	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =  classDefiningF!=  null?  null  :  f.getType();	  Type    type    =    f!=    null?    null    :    f.getType();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  	59	1	replace
425	[BUG]  [BUGGY]  Type  type  =  classDefiningF!=  null?  null  :  f.getType();  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF!=  null?  null  :  f.getType();	  Type    type    =    f!=    null?    null    :    f.getType();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  	59	1	replace
426	[BUG]  [BUGGY]  Type  type  =  f,  f.type().getTypeInfo();  [CE]  ';'  expected  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  f.type().getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  f.type().getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  ';'  expected	79	None	replace
427	[BUG]  [BUGGY]  Type  type  =  f.type();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
428	[BUG]  [BUGGY]  Type  type  =  f.typeInfo().getTypeInfo();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.typeInfo().getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.typeInfo().getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
429	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  {  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  f  {  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  f  {  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	56	None	add
430	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Class  <?>  f  =  f  ==  null?  null  :  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Class  <?>  f  =  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Class  <?>  f  =  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	56	None	add
431	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(typeDefiningF);	  Type    type    =    f.getDeclaredType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
432	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)typeDefiningF  :  f.getTypeInfo();  [CE]  inconvertible  types  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)typeDefiningF  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(Type)typeDefiningF  :  f.getTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
433	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getDeclaredTypeInfo();  [CE]  inconvertible  types  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getDeclaredTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getDeclaredTypeInfo();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
434	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  clazz);  [CE]  cannot  find  symbol  clazz  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  clazz);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  clazz);	  Type    type    =    getTypeInfoForField(f);    	non-compiled	[CE]  cannot  find  symbol  clazz	69	None	replace
435	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f);  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f);	  Type    type    =    getTypeInfoForField(f);    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	69	None	replace
436	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfoFor(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getTypeInfoFor(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfoFor(typeDefiningF);	  Type    type    =    f.getTypeInfo(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
437	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  f);  [CE]  cannot  find  symbol  ClassUtils  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(typeDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(typeDefiningF,  f);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
438	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f).getTypeInfo();  [CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  method  getTypeInfoForField  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	15	None	replace
439	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(type,  classDefiningF,  classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(type,  classDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(type,  classDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(classDefiningF,    classDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	10	None	replace
440	[BUG]  [BUGGY]  Type  type  =  f.getType();  Class  <?>  type  =  classDefiningF.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Class  <?>  type  =  classDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Class  <?>  type  =  classDefiningF.getType();	  Type    type    =    f.getType();    Class    <?>    type    =    f.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	64	None	replace
441	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF,  typeDefiningF);  [CE]  ';'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF),  classDefiningF,  typeDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF),    classDefiningF);    	non-compiled	[CE]  ';'  expected	75	None	replace
442	[BUG]  [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF).getReturnType();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getReturnType(typeDefiningF).getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType(typeDefiningF).getReturnType();	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
443	[BUG]  [BUGGY]  Type  type  =  scope.getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  scope  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  scope.getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  scope.getReturnType(typeDefiningF);	  Type    type    =    f.getReturnType(typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  scope	43	None	replace
444	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeInfo());  [CE]  cannot  find  symbol  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.typeInfo());	  Type    type    =    f.typeInfo();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
445	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.typeInfo();  [CE]  ';'  expected  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.typeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.typeInfo();	  Type    type    =    f.typeInfo();    	non-compiled	[CE]  ';'  expected	18	None	replace
446	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF.getTypeInfo());  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF.getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF.getTypeInfo());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getTypeInfo());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
447	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getRawClass());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getRawClass());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  f.getRawClass());	  Type    type    =    ClassUtils.getGenericType(classDefiningF,    f.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
448	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF);  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  TypeUtils.toRawClass(classDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(classDefiningF);    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	2	None	replace
449	[BUG]  [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(classDefiningF,  f);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	2	None	replace
450	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(ARRAY_TYPE);  [CE]  cannot  find  symbol  ARRAY_TYPE  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(ARRAY_TYPE);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType(typeDefiningF).getDeclaredType(ARRAY_TYPE);	  Type    type    =    f.getDeclaredType(ARRAY_TYPE);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TYPE	72	None	replace
451	[BUG]  [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getClass();  [CE]  incompatible  types  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  incompatible  types	24	None	replace
452	[BUG]  [BUGGY]  Type  <?>  f  =  f.getClass();  [CE]  type  Type  does  not  take  parameters  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  <?>  f  =  f.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  <?>  f  =  f.getClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getClass();    	non-compiled	[CE]  type  Type  does  not  take  parameters	24	None	replace
453	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getRawType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getRawType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getRawType(typeDefiningF);	  Type    type    =    classDefiningF.getRawType();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
454	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeDefiningF).getTypeInfo();  [CE]  cannot  find  symbol  typeDefiningF  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeDefiningF).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.typeDefiningF).getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	15	None	replace
455	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF),  f.getTypeInfo();  [CE]  ';'  expected  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF),  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF),  f.getTypeInfo();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  ';'  expected	15	None	replace
456	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).findTypeInfoForField(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF).findTypeInfoForField(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF).findTypeInfoForField(typeDefiningF);	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
457	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeDefiningF.getTypeInfo();  [CE]  cannot  find  symbol  typeDefiningF  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeDefiningF.getTypeInfo();	  Type    type    =    f    ==    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	51	None	replace
458	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfoInstance(classDefiningF);  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeInfoInstance(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeInfoInstance(classDefiningF);	  Type    type    =    f    ==    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
459	[BUG]  [BUGGY]  Type  type  =  f.type(typeDefiningF).getReturnType();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type(typeDefiningF).getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type(typeDefiningF).getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
460	[BUG]  [BUGGY]  Type  type  =  f,  f.type().getReturnType();  [CE]  ';'  expected  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  f.type().getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  f.type().getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  ';'  expected	42	None	replace
461	[BUG]  [BUGGY]  Type  type  =  field.type().getReturnType();  [CE]  cannot  find  symbol  field  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  field.type().getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  field.type().getReturnType();	  Type    type    =    f.type().getReturnType();    	non-compiled	[CE]  cannot  find  symbol  field	42	None	replace
462	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  factory);  [CE]  cannot  find  symbol  factory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  factory);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF,  typeDefiningF,  factory);	  Type    type    =    f.getGenericType(classDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  factory	9	None	replace
463	[BUG]  [BUGGY]  Type  type  =  f.type(typeDefiningF).getTypeInfo();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type(typeDefiningF).getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type(typeDefiningF).getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
464	[BUG]  [BUGGY]  Type  type  =  f.type().toArray(new  TypeInfo[typeDefiningF.size()  ]);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().toArray(new  TypeInfo[typeDefiningF.size()  ]);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().toArray(new  TypeInfo[typeDefiningF.size()  ]);	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
465	[BUG]  [BUGGY]  Type  type  =  f.type().toType().getTypeInfo();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().toType().getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().toType().getTypeInfo();	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
466	[BUG]  [BUGGY]  Type  type  =  f.type().toArray(new  TypeInfo[typeDefiningF].getTypeInfo());  [CE]  incompatible  types  [FE]                              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().toArray(new  TypeInfo[typeDefiningF].getTypeInfo());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().toArray(new  TypeInfo[typeDefiningF].getTypeInfo());	  Type    type    =    f.type().getTypeInfo();    	non-compiled	[CE]  incompatible  types	79	None	replace
467	[BUG]  [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getType();  [CE]  incompatible  types  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getType();    	non-compiled	[CE]  incompatible  types	22	None	replace
468	[BUG]  [BUGGY]  Type  <?>  f  =  f.getType();  [CE]  type  Type  does  not  take  parameters  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  <?>  f  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  <?>  f  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getType();    	non-compiled	[CE]  type  Type  does  not  take  parameters	22	None	replace
469	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazz,  classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(clazz,  classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazz,  classDefiningF,  typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	10	None	replace
470	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeDefiningF.getDeclaredType();  [CE]  cannot  find  symbol  typeDefiningF  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.typeDefiningF.getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.typeDefiningF.getDeclaredType();	  Type    type    =    f    ==    null?    null    :    f.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	70	None	replace
471	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getReturnType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getReturnType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getReturnType(typeDefiningF);	  Type    type    =    classDefiningF.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
472	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.newInstance();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.newInstance();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.newInstance();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
473	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.newType();  [CE]  cannot  find  symbol  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.newType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.newType();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
474	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.type);  [CE]  cannot  find  symbol  type  [FE]                                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.type);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  classDefiningF,  typeDefiningF.type);	  Type    type    =    getTypeInfoForField(f,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
475	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeDefiningF);  [CE]  cannot  find  symbol  typeDefiningF  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.typeDefiningF);	  Type    type    =    getTypeInfoForField(f,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	5	None	replace
476	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getReturnType();  [CE]  cannot  find  symbol  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f.getReturnType();	  Type    type    =    f!=    null?    null    :    f.getType();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
477	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  [FE]      java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getDeclaringClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =  f!=  null?  null  :  f.getDeclaringClass();	  Type    type    =    f!=    null?    null    :    f.getType();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  	59	1	replace
478	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getDeclaringClass();  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  [FE]      java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getDeclaringClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f.getDeclaringClass();	  Type    type    =    f!=    null?    null    :    f.getType();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class  	59	1	replace
479	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeDefiningF).getGenericType();  [CE]  cannot  find  symbol  typeDefiningF  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.typeDefiningF).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.typeDefiningF).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	37	None	replace
480	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getGenericType()).getGenericType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.getGenericType()).getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.getGenericType()).getGenericType();	  Type    type    =    getTypeInfoForField(f,    classDefiningF).getGenericType();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
481	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF),  f.getGenericType();  [CE]  ';'  expected  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF),  f.getGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF),  f.getGenericType();	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  ';'  expected	62	None	replace
482	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF).getGenericParameterType(0);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF).getGenericParameterType(0);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classDefiningF).getGenericParameterType(0);	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF).getGenericType();    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	62	None	replace
483	[BUG]  [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getRawClass();  [CE]  incompatible  types  [FE]                    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  incompatible  types	25	None	replace
484	[BUG]  [BUGGY]  Type  <?>  f  =  f.getRawClass();  [CE]  type  Type  does  not  take  parameters  [FE]                      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  <?>  f  =  f.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  <?>  f  =  f.getRawClass();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getRawClass();    	non-compiled	[CE]  type  Type  does  not  take  parameters	25	None	replace
485	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classLoader,  ClassLoader.getSystemClassLoader());  [CE]  cannot  find  symbol  classLoader  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF,  classLoader,  ClassLoader.getSystemClassLoader());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF,  classLoader,  ClassLoader.getSystemClassLoader());	  Type    type    =    f.getGenericType(typeDefiningF,    ClassLoader.getSystemClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	63	None	replace
486	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF.getRawClass());  [CE]  ';'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF.getRawClass());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF.getRawClass());	  Type    type    =    f,    classDefiningF.getGenericType();    	non-compiled	[CE]  ';'  expected	55	None	replace
487	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF.getSuperclass());  [CE]  ';'  expected  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF.getSuperclass());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getGenericType(typeDefiningF.getSuperclass());	  Type    type    =    f,    classDefiningF.getGenericType();    	non-compiled	[CE]  ';'  expected	55	None	replace
488	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.typeInfo();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.typeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f!=  null?  null  :  f.typeInfo();	  Type    type    =    f!=    null?    null    :    f.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
489	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF,  f.getDeclaredType());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF,  f.getDeclaredType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF,  f.getDeclaredType());	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(f.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
490	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(clazz,  typeDefiningF,  classDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(clazz,  typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(clazz,  typeDefiningF,  classDefiningF);	  Type    type    =    f.getGenericType(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	7	None	replace
491	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.getTypeInfo();	  Type    type    =    classDefiningF.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
492	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getTypeInfo();  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  classDefiningF  :  f.getTypeInfo();	  Type    type    =    classDefiningF.getTypeInfo();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
493	[BUG]  [BUGGY]  Type  type  =  clazzDefiningF.getGenericType(f);  [CE]  cannot  find  symbol  clazzDefiningF  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  clazzDefiningF.getGenericType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  clazzDefiningF.getGenericType(f);	  Type    type    =    f.getGenericType(clazzDefiningF,    typeDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazzDefiningF	45	None	replace
494	[BUG]  [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getReferenceName();  [CE]  incompatible  types  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	TypeInfo  type  =  f.getType();  Class  <?>  f  =  typeDefiningF.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  incompatible  types	66	None	replace
495	[BUG]  [BUGGY]  Type  <?>  f  =  f.getReferenceName();  [CE]  type  Type  does  not  take  parameters  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  <?>  f  =  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  <?>  f  =  f.getReferenceName();	  Type    type    =    f.getType();    Class    <?>    f    =    f.getReferenceName();    	non-compiled	[CE]  type  Type  does  not  take  parameters	66	None	replace
496	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getTypeInfo(typeDefiningF);  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getTypeInfo(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getTypeInfo(typeDefiningF);	  Type    type    =    f.getTypeInfo(typeDefiningF);    	non-compiled	[CE]  ';'  expected	78	None	replace
497	[BUG]  [BUGGY]  Type  type  =  f.type(typeDefiningF).getRawType();  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type(typeDefiningF).getRawType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type(typeDefiningF).getRawType();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
498	[BUG]  [BUGGY]  Type  type  =  f.type().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().restrictByNotNullOrUndefined();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().restrictByNotNullOrUndefined();	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
499	[BUG]  [BUGGY]  Type  type  =  f.type().getRawType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().getRawType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getRawType(typeDefiningF);	  Type    type    =    f.type().getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
500	[BUG]  [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.newGenericType();  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.newGenericType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(classDefiningF  ==  null)?  null  :  classDefiningF.newGenericType();	  Type    type    =(classDefiningF    ==    null)?    null    :    classDefiningF.getGenericType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
501	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getType();  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  f.getType();	  Type    type    =    f.getType();    Object    type    =    f.getType();    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	85	None	replace
502	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass();  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  f.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  f.getRawClass();	  Type    type    =    f.getType();    Object    type    =    f.getType();    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	85	None	replace
503	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  f.getGenericType(typeDefiningF);  [CE]  ';'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF),  f.getGenericType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF),  f.getGenericType(typeDefiningF);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  ';'  expected	44	None	replace
504	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  null);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  null);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF).getGenericType(typeDefiningF,  null);	  Type    type    =    f.getGenericType(classDefiningF).getGenericType(typeDefiningF);    	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	44	None	replace
505	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF  ==  null?  null  :  classDefiningF.getTypeInfo();  [CE]  ';'  expected  [FE]                      UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF  ==  null?  null  :  classDefiningF.getTypeInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF  ==  null?  null  :  classDefiningF.getTypeInfo();	  Type    type    =    f,    classDefiningF.getTypeInfo();    	non-compiled	[CE]  ';'  expected	13	None	replace
506	[BUG]  [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.class.getRawClass();  [CE]  cannot  find  symbol  [FE]                        UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.class.getRawClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =(typeDefiningF  ==  null)?  null  :  typeDefiningF.class.getRawClass();	  Type    type    =(typeDefiningF    ==    null)?    null    :    typeDefiningF.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
507	[BUG]  [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  type  =  typeDefiningF.getType();  [CE]  incompatible  types  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  TypeInfo  type  =  f.getType();  Class  <?>  type  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	TypeInfo  type  =  f.getType();  Class  <?>  type  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Class    <?>    type    =    f.getType();    	non-compiled	[CE]  incompatible  types	64	None	replace
508	[BUG]  [BUGGY]  TypeInfo  f  =  f.getTypeInfo();  Class  <?>  type  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  TypeInfo  f  =  f.getTypeInfo();  Class  <?>  type  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	TypeInfo  f  =  f.getTypeInfo();  Class  <?>  type  =  f.getType();	  Type    type    =    f.getType();    Class    <?>    type    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	64	None	replace
509	[BUG]  [BUGGY]  final  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  classDefiningF);  [CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  final  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	final  Class  <?>  typeDefiningF  =  TypeUtils.toRawClass(typeDefiningF,  classDefiningF);	  Class    <?>    typeDefiningF    =    TypeUtils.toRawClass(typeDefiningF,    classDefiningF);    	non-compiled	[CE]  variable  typeDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	6	None	replace
510	[BUG]  [BUGGY]  Class  <?>  type  =  f.getType();  Type  f  =  f.getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  type  =  f.getType();  Type  f  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  type  =  f.getType();  Type  f  =  f.getType();	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
511	[BUG]  [BUGGY]  type  =  f.getType();  Type  f  =  f.getType();  [CE]  cannot  find  symbol  type  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  Type  f  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();  Type  f  =  f.getType();	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	20	None	replace
512	[BUG]  [BUGGY]  type  =  f.getType();  Type  f  =  typeDefiningF.getType();  [CE]  cannot  find  symbol  type  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  Type  f  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();  Type  f  =  typeDefiningF.getType();	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	20	None	replace
513	[BUG]  [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getClass();  [CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  classDefiningF  =  typeDefiningF.getClass();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  classDefiningF  =  typeDefiningF.getClass();	  Type    type    =    f.getType();    Type    f    =    f.getType();    	non-compiled	[CE]  variable  classDefiningF  is  already  defined  in  method  getTypeInfoForField(Field,Type)	20	None	replace
514	[BUG]  [BUGGY]  Type[]  types  =  f.getTypes();  [CE]  cannot  find  symbol  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type[]  types  =  f.getTypes();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type[]  types  =  f.getTypes();	  Type    type    =    f.getType();    Type    types    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
515	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getReturnType();  [CE]  cannot  find  symbol  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getReturnType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.getReturnType();	  Type    type    =    f    ==    null?    null    :    f.getType();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
516	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getDeclaringType();  [CE]  cannot  find  symbol  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getDeclaringType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  ==  null?  null  :  f.getDeclaringType();	  Type    type    =    f    ==    null?    null    :    f.getType();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
517	[BUG]  [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  typeDefiningF);  [CE]  cannot  find  symbol  ClassUtils  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassUtils.getGenericType(classDefiningF,  typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassUtils.getGenericType(classDefiningF,  typeDefiningF);	  Type    type    =    ClassUtils.getGenericType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassUtils	38	None	replace
518	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF.getGenericType());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF.getGenericType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  typeDefiningF,  classDefiningF.getGenericType());	  Type    type    =    getTypeInfoForField(f,    classDefiningF.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
519	[BUG]  [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  getTypeInfoForField(f,  f.type);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  getTypeInfoForField(f,  f.type);	  Type    type    =    getTypeInfoForField(f);    	non-compiled	[CE]  type  has  private  access  in  Field	69	None	replace
520	[BUG]  [BUGGY]  Type  type  =  ClassInfoFactory.getDeclaredType(f,  classDefiningF);  [CE]  cannot  find  symbol  ClassInfoFactory  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  ClassInfoFactory.getDeclaredType(f,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  ClassInfoFactory.getDeclaredType(f,  classDefiningF);	  Type    type    =    f.getDeclaredType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  ClassInfoFactory	71	None	replace
521	[BUG]  [BUGGY]  Type  type  =  this.classDefiningF.getGenericType(f);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  this.classDefiningF.getGenericType(f);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  this.classDefiningF.getGenericType(f);	  Type    type    =    classDefiningF.getGenericType(f);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	8	None	replace
522	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getReferenceName();  [CE]  inconvertible  types  [FE]                          UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getReferenceName();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getReferenceName();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
523	[BUG]  [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getClassInfo();  [CE]  inconvertible  types  [FE]                            UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getClassInfo();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f  instanceof  TypeInfo?(Type)f  :  f.getClassInfo();	  Type    type    =    f    instanceof    TypeInfo?(Type)f    :    f.getTypeInfo();    	non-compiled	[CE]  inconvertible  types	53	None	replace
524	[BUG]  [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF);  [CE]  ';'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f,  classDefiningF.getDeclaredType()  ||  typeDefiningF.isAssignableFrom(typeDefiningF);	  Type    type    =    f.getDeclaredType()    ||    typeDefiningF.isAssignableFrom(classDefiningF);    	non-compiled	[CE]  ';'  expected	84	None	replace
525	[BUG]  [BUGGY]  Type  type  =  f.getParameterType(typeDefiningF).getParameterType(0);  [CE]  cannot  find  symbol  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getParameterType(typeDefiningF).getParameterType(0);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getParameterType(typeDefiningF).getParameterType(0);	  Type    type    =    f.getParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
526	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  type  =  f.getType();  Type  def  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Class  <?>  type  =  f.getType();  Type  def  =  f.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	86	1	replace
527	[BUG]  [BUGGY]  Class  <?>  type  =  f.getType();  Type  def  =  f.getType();  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Class  <?>  type  =  f.getType();  Type  def  =  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Class  <?>  type  =  f.getType();  Type  def  =  f.getType();	  Type    type    =    f.getType();    Type    def    =    f.getType();    	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	86	1	replace
528	[BUG]  [BUGGY]  Type  type  =  f.getType();  Type  def  =  f.getDeclaredType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType();  Type  def  =  f.getDeclaredType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();  Type  def  =  f.getDeclaredType(typeDefiningF);	  Type    type    =    f.getType();    Type    def    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
529	[BUG]  [BUGGY]  type  =  f.getType();  Type  actualType  =  f.getActualType();  [CE]  cannot  find  symbol  type  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  type  =  f.getType();  Type  actualType  =  f.getActualType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	type  =  f.getType();  Type  actualType  =  f.getActualType();	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  cannot  find  symbol  type	21	None	replace
530	[BUG]  [BUGGY]  Type  actualType  =  getActualType(f,  f.getType());  [CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;  [FE]              com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  actualType  =  getActualType(f,  f.getType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  actualType  =  getActualType(f,  f.getType());	  Type    type    =    f.getType();    Type    actualType    =    f.getType();    	non-compiled	[CE]  method  getActualType  in  class  TypeInfoFactory  cannot  be  applied  to  given  types;	21	None	replace
531	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f!=  null?  null  :  f.getType());  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  type  =  f!=  null?  null  :  f.getType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  type  =  f!=  null?  null  :  f.getType());	  	non-compiled	[CE]  ';'  expected	58	None	add
532	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  types  =  f!=  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]      java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  Type  types  =  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    Type  types  =  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
533	[BUG]  [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  type  =  f!=  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        java.lang.IllegalArgumentException:  Type  'null'  is  not  a  Class    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f!=  null?  null  :  f.getType();  type  =  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f!=    null?    null    :    f.getType();    type  =  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	58	None	add
534	[BUG]  [BUGGY]  Type  type  =  f.typeDefiningF.getType();  [CE]  cannot  find  symbol  typeDefiningF  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.typeDefiningF.getType();	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol  typeDefiningF	47	None	replace
535	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  classDefiningF.getType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getType(typeDefiningF);	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
536	[BUG]  [BUGGY]  Type  type  =  typeDefiningF.getType();  [CE]  cannot  find  symbol  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  typeDefiningF.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  typeDefiningF.getType();	  Type    type    =    classDefiningF.getType();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
537	[BUG]  [BUGGY]  Type  type  =  f.type(typeDefiningF).getDeclaredType();  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type(typeDefiningF).getDeclaredType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type(typeDefiningF).getDeclaredType();	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
538	[BUG]  [BUGGY]  Type  type  =  f.type().getDeclaredType(typeDefiningF);  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.type().getDeclaredType(typeDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.type().getDeclaredType(typeDefiningF);	  Type    type    =    f.type().getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
539	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  type  =  f  ==  null?  null  :  f.getType());  [CE]  ';'  expected  [FE]    com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  type  =  f  ==  null?  null  :  f.getType());  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  type  =  f  ==  null?  null  :  f.getType());	  	non-compiled	[CE]  ';'  expected	56	None	add
540	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  types  =  f  ==  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]      com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  types  =  f  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  types  =  f  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	56	None	add
541	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  type  =  f!=  null?  null  :  f.getType();  [CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]        com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  type  =  f!=  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  type  =  f!=  null?  null  :  f.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getTypeInfoForField(Field,Type)	56	None	add
542	[BUG]  [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  def  ==  null?  null  :  f.getType();  [CE]  ';'  expected  [FE]          com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {   "key1   ":[1    [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f  ==  null?  null  :  f.getType();  Type  def  ==  null?  null  :  f.getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type    type    =    f    ==    null?    null    :    f.getType();    Type  def  ==  null?  null  :  f.getType();	  	non-compiled	[CE]  ';'  expected	56	None	add
543	[BUG]  [BUGGY]  Type  type  =  f.getType(clazz,  classDefiningF);  [CE]  cannot  find  symbol  clazz  [FE]            com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  type  =  f.getType(clazz,  classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType(clazz,  classDefiningF);	  Type    type    =    f.getType(classDefiningF);    	non-compiled	[CE]  cannot  find  symbol  clazz	60	None	replace
544	[BUG]  [BUGGY]  Type  f  =  ClassUtils.toRawClass(classDefiningF);  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  ClassUtils.toRawClass(classDefiningF);  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  ClassUtils.toRawClass(classDefiningF);	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	23	None	replace
545	[BUG]  [BUGGY]  Type  f  =  ClassUtils.toRawClass(classDefiningF).getType();  [CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)  [FE]                  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  {     "key1     ":[1      [CONTEXT]      public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);      [BUGGY]  Type  f  =  ClassUtils.toRawClass(classDefiningF).getType();  [BUGGY]      Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  f  =  ClassUtils.toRawClass(classDefiningF).getType();	  Type    type    =    f.getType();    Type    f    =    classDefiningF.getType();    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getTypeInfoForField(Field,Type)	23	None	replace
