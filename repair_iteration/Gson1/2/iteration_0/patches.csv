bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type  type  =  classDefiningF.getGenericType();  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  classDefiningF.getGenericType();  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  classDefiningF.getGenericType();	Type  type  =  f.getGenericType();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
2	[BUG]  [BUGGY]  Type  type  =  f.getDeclaredType();  [CE]  cannot  find  symbol  [FE]      UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getDeclaredType();  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getDeclaredType();	Type  type  =  f.getGenericType();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]        UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getType();  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	add	Type  type  =  f.getType();	Type  type  =  f.getGenericType();  	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	3	1	replace
4	[BUG]  [BUGGY]  Type  type  =  f.getType();  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  [FE]        UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getType();  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getType();	Type  type  =  f.getGenericType();  	compilable	  [FE]  com.google.gson.JsonParseException:  The  JsonDeserializer  MapTypeAdapter  failed  to  deserialized  json  object  { "key1 ":[1  	3	1	replace
5	[BUG]  [BUGGY]  Type  type  =  f.getRawType();  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getRawType();  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getRawType();	Type  type  =  f.getGenericType();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
6	[BUG]  [BUGGY]  Type  type  =  f.getReturnType();  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getReturnType();  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getReturnType();	Type  type  =  f.getGenericType();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
7	[BUG]  [BUGGY]  Type  type  =  f.getTypeInfo();  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getTypeInfo();  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getTypeInfo();	Type  type  =  f.getGenericType();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  type  [FE]                UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]    [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	  	Type  type  =  f.getGenericType();  	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
9	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]    UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getGenericType(classDefiningF);  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(classDefiningF);	Type  type  =  f.getGenericType();  	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	3	None	replace
10	[BUG]  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF);  [CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;  [FE]    UnsupportedOperationException  [CONTEXT]  public  static  TypeInfo  getTypeInfoForField(Field  f,  Type  typeDefiningF)  {  Class<?>  classDefiningF  =  TypeUtils.toRawClass(typeDefiningF);  [BUGGY]  Type  type  =  f.getGenericType(typeDefiningF);  [BUGGY]  Type  actualType  =  getActualType(type,  typeDefiningF,  classDefiningF);  return  new  TypeInfo(actualType);  }  [CLASS]  TypeInfoFactory  [METHOD]  getTypeInfoForField  [RETURN_TYPE]  TypeInfo  Field  f  Type  typeDefiningF  [VARIABLES]  Field  f  Type  actualType  type  typeDefiningF  boolean  Class  classDefiningF  	projects/Gson1/gson/src/main/java/com/google/gson/TypeInfoFactory.java	1.0	53	53	1	replace	Type  type  =  f.getGenericType(typeDefiningF);	Type  type  =  f.getGenericType();  	non-compiled	[CE]  method  getGenericType  in  class  Field  cannot  be  applied  to  given  types;	3	None	replace
