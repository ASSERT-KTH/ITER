projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}else{
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(nextGaussian!=Double.NaN){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(nextGaussian==Double.NaN){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.cos(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(Double.isNaN(nextGaussian)){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(nextGaussian!=null){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=random*FastMath.cos(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(nextGaussian);nextGaussian=r*FastMath.sin(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(nextGaussian);r=r*FastMath.sin(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=FastMath.sin(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=FastMath.sin(x);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.cos(alpha);nextGaussian=r*FastMath.cos(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.cos(alpha);nextGaussian=r*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.cos(alpha);random=r*FastMath.cos(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=random*FastMath.sin(r);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=random*FastMath.sin(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(alpha);nextGaussian=r*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(alpha);r=r*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(nextGaussian==Double.PI){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(nextGaussian==null){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=random*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(x);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(Double.isNaN(x)||Double.isNaN(nextGaussian)){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(Double.isNaN(x)){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109doublenextGaussian=r*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109doublenextGaussian=r*FastMath.sin(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(Double.isNaN(nextGaussian)||Double.isNaN(nextGaussian)){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(alpha);random=r*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(nextGaussian);random=r*FastMath.sin(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.cos(alpha);random=r*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109doublenextGaussian=nextGaussian*FastMath.sin(x);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109doublenextGaussian=nextGaussian*FastMath.sin(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109}elseif(nextGaussian!=null&&nextGaussian.equals(r)){
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(nextGaussian);nextGaussian=r*FastMath.cos(nextGaussian);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(alpha);nextGaussian=r*FastMath.cos(alpha);
projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java109nextGaussian=r*FastMath.sin(alpha);random=r*FastMath.cos(alpha);
