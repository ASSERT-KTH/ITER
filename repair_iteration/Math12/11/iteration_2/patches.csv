bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  x  *  FastMath.cos(alpha);	  nextGaussian    =    random    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	1	None	replace
2	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  r  =  random  *  FastMath.sin(nextGaussian);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  r  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(nextGaussian);  r  =  random  *  FastMath.sin(nextGaussian);	          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    r    =    r    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	4	None	replace
3	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  random  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	random  =  r  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	26	None	replace
4	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	26	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	34	3	add
6	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	34	3	add
7	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    random  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	34	None	add
8	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  r  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  r  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    r  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	34	None	add
9	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.cos(alpha);    random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	28	None	replace
10	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  random  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	random  =  r  *  FastMath.sin(nextGaussian);	          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    random    =    r    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	27	None	replace
11	[BUG]  [BUGGY]  nextGaussian  =  nextGaussian  *  FastMath.sin(r);  random  =  r  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  nextGaussian  *  FastMath.sin(r);  random  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  nextGaussian  *  FastMath.sin(r);  random  =  r  *  FastMath.sin(nextGaussian);	          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    random    =    r    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	27	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
13	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
14	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	7	None	add
15	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  r  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  r  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    r  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	7	None	add
16	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  random  *  FastMath.sin(x);	  double    nextGaussian    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	29	None	replace
17	[BUG]  [BUGGY]  double  nextGaussian  =  x  *  FastMath.sin(nextGaussian);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  double  nextGaussian  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  x  *  FastMath.sin(nextGaussian);	  double    nextGaussian    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	29	None	replace
18	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  x  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	19	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	2	3	add
20	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	2	3	add
21	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    r  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	2	None	add
22	[BUG]  [BUGGY]  nextGaussian  =  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  FastMath.sin(r);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  FastMath.sin(r);	  nextGaussian    =    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
24	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
25	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    r  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	14	None	add
26	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.sin(random);	  nextGaussian    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	12	None	replace
27	[BUG]  [BUGGY]  }  else  if(Double.isNaN(y))  {  [CE]  cannot  find  symbol  y  [FE]              AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(Double.isNaN(y))  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(y))  {	  }    else    if(Double.isNaN(x))    {    	non-compiled	[CE]  cannot  find  symbol  y	22	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	compilable	  [FE]  AssertionError  	32	6	add
29	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	compilable	  [FE]  AssertionError  	32	6	add
30	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    r  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	32	None	add
31	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  random  *  FastMath.sin(r);	  double    nextGaussian    =    r    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	24	None	replace
32	[BUG]  [BUGGY]  double  nextGaussian  =  r  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  double  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  r  *  FastMath.sin(x);	  double    nextGaussian    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	23	None	replace
33	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  random  *  FastMath.sin(alpha);	  double    nextGaussian    =    nextGaussian    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	30	None	replace
34	[BUG]  [BUGGY]  double  nextGaussian  =  x  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  double  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  x  *  FastMath.sin(alpha);	  double    nextGaussian    =    nextGaussian    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	30	None	replace
35	[BUG]  [BUGGY]  }  else  if(Double.isNaN(random)||  Double.isNaN(nextGaussian))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(Double.isNaN(random)||  Double.isNaN(nextGaussian))  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(random)||  Double.isNaN(nextGaussian))  {	  }    else    if(Double.isNaN(nextGaussian)||    Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	25	None	replace
36	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(y);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.sin(y);	  nextGaussian    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	20	None	replace
37	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  r  =  random  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  r  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(alpha);  r  =  random  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    r    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	16	None	replace
38	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  r  =  y  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  r  =  y  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  x  *  FastMath.sin(alpha);  r  =  y  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    r    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	16	None	replace
39	[BUG]  [BUGGY]  nextGaussian  =  nextGaussian  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  nextGaussian  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  nextGaussian  *  FastMath.sin(nextGaussian);	  nextGaussian    =    random    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	13	None	replace
40	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  random  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	random  =  r  *  FastMath.cos(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    random    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	36	None	replace
41	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.cos(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    random    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	36	None	replace
42	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	35	None	replace
43	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.cos(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.cos(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.cos(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	10	None	replace
44	[BUG]  [BUGGY]  }  else  if(r!=  null  &&  nextGaussian.equals(nextGaussian))  {  [CE]  cannot  find  symbol  r  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(r!=  null  &&  nextGaussian.equals(nextGaussian))  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(r!=  null  &&  nextGaussian.equals(nextGaussian))  {	  }    else    if(nextGaussian!=    null    &&    nextGaussian.equals(r))    {    	non-compiled	[CE]  cannot  find  symbol  r	31	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	9	3	add
46	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	9	3	add
47	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	9	None	add
48	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    r  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	add
49	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	15	None	replace
50	[BUG]  [BUGGY]  }  else  if(nextGaussian  ==  Double.NaN  ||  nextGaussian  ==  Double.PI)  {  [CE]  cannot  find  symbol  PI  [FE]              AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(nextGaussian  ==  Double.NaN  ||  nextGaussian  ==  Double.PI)  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian  ==  Double.NaN  ||  nextGaussian  ==  Double.PI)  {	  }    else    if(nextGaussian    ==    Double.PI)    {    	non-compiled	[CE]  cannot  find  symbol  PI	17	None	replace
51	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.cos(alpha);	          nextGaussian    =    r    *    FastMath.cos(alpha);    random    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	11	None	replace
52	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.cos(nextGaussian);	          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian    =    r    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	33	None	replace
53	[BUG]  [BUGGY]  }  else  if(Double.isNaN(nextGaussian)&&  Double.isNaN(nextGaussian))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(Double.isNaN(nextGaussian)&&  Double.isNaN(nextGaussian))  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(nextGaussian)&&  Double.isNaN(nextGaussian))  {	  }    else    if(Double.isNaN(nextGaussian)||    Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	25	None	replace
54	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  random  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  random  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    random  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	2	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	2	3	add
56	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	2	3	add
57	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  x  *  FastMath.sin(r);	  nextGaussian    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	20	None	replace
58	[BUG]  [BUGGY]  }  else  if(nextGaussian  ==  Double.NEGATIVE)  {  [CE]  cannot  find  symbol  NEGATIVE  [FE]              AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(nextGaussian  ==  Double.NEGATIVE)  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian  ==  Double.NEGATIVE)  {	  }    else    if(nextGaussian    ==    Double.PI)    {    	non-compiled	[CE]  cannot  find  symbol  NEGATIVE	17	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
60	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	34	3	add
62	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	34	3	add
63	[BUG]  [BUGGY]  nextGaussian  =  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  FastMath.sin(alpha);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  FastMath.sin(alpha);	  nextGaussian    =    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	replace
64	[BUG]  [BUGGY]  }  else  if(nextGaussian!=  null  &&  random.equals(r))  {  [CE]  incomparable  types:  double  and  <null>  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(nextGaussian!=  null  &&  random.equals(r))  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian!=  null  &&  random.equals(r))  {	  }    else    if(nextGaussian!=    null    &&    nextGaussian.equals(r))    {    	non-compiled	[CE]  incomparable  types:  double  and  <null>	31	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	32	6	add
66	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	32	6	add
67	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  random  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  random  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    random  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	32	None	add
68	[BUG]  [BUGGY]  nextGaussian  =  FastMath.sin(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  FastMath.sin(y);  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  FastMath.sin(y);	  nextGaussian    =    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	6	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
70	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
72	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	9	3	add
74	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	9	3	add
75	[BUG]  [BUGGY]  }  else  if(Double.isNaN(y)||  Double.isNaN(nextGaussian))  {  [CE]  cannot  find  symbol  y  [FE]            AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(Double.isNaN(y)||  Double.isNaN(nextGaussian))  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(y)||  Double.isNaN(nextGaussian))  {	  }    else    if(Double.isNaN(x)||    Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  cannot  find  symbol  y	21	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	compilable	  [FE]  AssertionError  	32	6	add
77	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.cos(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	compilable	  [FE]  AssertionError  	32	6	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	2	6	add
79	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.sin(nextGaussian);        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	2	6	add
80	[BUG]  [BUGGY]  }  else  if(nextGaussian  ==  Double.NEGATIVE_INFINITY)  {  [CE]  variable  random  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  }  else  if(nextGaussian  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]        random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian  ==  Double.NEGATIVE_INFINITY)  {	  }    else    if(nextGaussian    ==    Double.PI)    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	17	None	replace
81	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);	          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	8	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
83	[BUG]  [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]          nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	                nextGaussian        =        r        *        FastMath.cos(alpha);        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
84	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError      [CONTEXT]      final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);	          nextGaussian    =    r    *    FastMath.sin(nextGaussian);    r    =    r    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	4	None	replace
