bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  nextGaussian  =  FastMath.cos(x);  random  =  r  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  final  double  nextGaussian  =  FastMath.cos(x);  random  =  r  *  FastMath.sin(alpha);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  nextGaussian  =  FastMath.cos(x);  random  =  r  *  FastMath.sin(alpha);	      final    double    nextGaussian    =    FastMath.cos(x);    random    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	11	None	replace
2	[BUG]  [BUGGY]  final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(y));  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(y));	      final    double    nextGaussian    =    FastMath.sqrt(-2    *    FastMath.log(x));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	9	None	replace
3	[BUG]  [BUGGY]  r  =  FastMath.cos(y);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  r  =  FastMath.cos(y);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	r  =  FastMath.cos(y);	      r    =    FastMath.cos(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	7	None	replace
4	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(x);    random  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	1	None	add
5	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  r  =  r  *  FastMath.sin(x);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  r  =  r  *  FastMath.sin(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(x);    Random  r  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
6	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(x);    r  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	1	None	add
7	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x,  alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  double  r  =  FastMath.sin(x,  alpha);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sin(x,  alpha);	      double    r    =    FastMath.sin(x);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	18	None	replace
8	[BUG]  [BUGGY]  r  =  FastMath.sin(y);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  r  =  FastMath.sin(y);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	r  =  FastMath.sin(y);	      r    =    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	6	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.sin(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  x  *  FastMath.sin(r);	  random    =    r    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	15	6	replace
10	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.sin(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.sin(r);	  random    =    r    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	15	6	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.cos(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  r  *  FastMath.cos(x);	  random    =    x    *    FastMath.cos(r);    	compilable	  [FE]  AssertionError  	4	6	replace
12	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.cos(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.cos(x);	  random    =    x    *    FastMath.cos(r);    	compilable	  [FE]  AssertionError  	4	6	replace
13	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  random  =  x  *  FastMath.cos(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(r);  random  =  x  *  FastMath.cos(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(r);    random  =  x  *  FastMath.cos(r);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	3	None	add
14	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  r  =  x  *  FastMath.cos(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(r);  r  =  x  *  FastMath.cos(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(r);    r  =  x  *  FastMath.cos(r);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	3	None	add
15	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  FastMath.cos(r);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  FastMath.cos(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(r);    Random  r  =  FastMath.cos(r);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
16	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x,  y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x,  y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(x,  y));	      double    r    =    FastMath.sqrt(-2    *    FastMath.log(y));    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	16	None	replace
17	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(x,  alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  final  double  r  =  FastMath.sin(x,  alpha);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  r  =  FastMath.sin(x,  alpha);	      final    double    r    =    FastMath.sin(x);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	8	None	replace
18	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  random  =  x  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(alpha);  random  =  x  *  FastMath.cos(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(alpha);    random  =  x  *  FastMath.cos(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	12	None	add
19	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  r  =  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  r  =  FastMath.cos(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(alpha);    Random  r  =  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
20	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  random  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  random  =  x  *  FastMath.cos(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(alpha);    Random  random  =  x  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
21	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(alpha);    random  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	14	None	add
22	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  Random  r  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(alpha);  Random  r  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(alpha);    Random  r  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
23	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  Random  random  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(alpha);  Random  random  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(alpha);    Random  random  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
24	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  x  *  FastMath.cos(r);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  x  *  FastMath.cos(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(r);    Random  r  =  x  *  FastMath.cos(r);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
25	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  =  x  *  FastMath.cos(r);  [CE]  cannot  find  symbol  Random  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  =  x  *  FastMath.cos(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(r);    Random  =  x  *  FastMath.cos(r);	  	non-compiled	[CE]  cannot  find  symbol  Random	3	None	add
26	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x,  y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  double  r  =  FastMath.sin(x,  y);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sin(x,  y);	      double    r    =    FastMath.sin(x);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	18	None	replace
27	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(y);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(x);    random  =  r  *  FastMath.sin(y);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	1	None	add
28	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  =  r  *  FastMath.sin(x);  [CE]  cannot  find  symbol  Random  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  =  r  *  FastMath.sin(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(x);    Random  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  find  symbol  Random	1	None	add
29	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  Random  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  Random  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(alpha);  Random  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(alpha);    Random  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol  Random	14	None	add
30	[BUG]  [BUGGY]  final  double  nextGaussian  =  FastMath.sin(x);  random  =  y  *  FastMath.cos(alpha);  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  final  double  nextGaussian  =  FastMath.sin(x);  random  =  y  *  FastMath.cos(alpha);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  nextGaussian  =  FastMath.sin(x);  random  =  y  *  FastMath.cos(alpha);	      final    double    nextGaussian    =    FastMath.sin(x);    random    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	10	None	replace
31	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y);	      double    r    =    FastMath.sqrt(-2    *    FastMath.log(x));    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	17	None	replace
32	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  final  double  r  =  FastMath.sin(y);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  r  =  FastMath.sin(y);	      final    double    r    =    FastMath.sin(x);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	8	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  x  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	15	6	replace
34	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	15	6	replace
35	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  r  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  r  =  x  *  FastMath.cos(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(alpha);    Random  r  =  x  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
36	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  Random  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(alpha);  Random  =  x  *  FastMath.cos(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(alpha);    Random  =  x  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol  Random	12	None	add
37	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.cos(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.cos(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.cos(alpha));	      double    r    =    FastMath.sqrt(-2    *    FastMath.log(y));    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	16	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(y);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  x  *  FastMath.cos(y);	  random    =    x    *    FastMath.cos(r);    	compilable	  [FE]  AssertionError  	4	6	replace
39	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(y);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(y);	  random    =    x    *    FastMath.cos(r);    	compilable	  [FE]  AssertionError  	4	6	replace
40	[BUG]  [BUGGY]  double  r  =  FastMath.sin(y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  double  r  =  FastMath.sin(y);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sin(y);	      double    r    =    FastMath.sin(x);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	18	None	replace
41	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  double  random  =  x  *  FastMath.cos(alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  x  *  FastMath.cos(alpha);  double  random  =  x  *  FastMath.cos(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(alpha);    double  random  =  x  *  FastMath.cos(alpha);	  	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	12	None	add
42	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  next  =  r  *  FastMath.sin(x);  [CE]  cannot  find  symbol  next  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));    [BUGGY]  random  =  r  *  FastMath.sin(x);  next  =  r  *  FastMath.sin(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.sin(x);    next  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  find  symbol  next	1	None	add
