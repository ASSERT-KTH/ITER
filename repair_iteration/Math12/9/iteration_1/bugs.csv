bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  r  *  FastMath.sin(x);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  r  *  FastMath.sin(x);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	6	replace
2	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  r  *  FastMath.sin(x);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	6	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  x  *  FastMath.cos(r);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  x  *  FastMath.cos(r);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	6	replace
4	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  x  *  FastMath.cos(r);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(r);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	6	replace
5	[BUG]  [BUGGY]    [CE]  variable  random  might  not  have  been  initialized  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	  	random  =  r  *  FastMath.cos(alpha);  	non-compiled	[CE]  variable  random  might  not  have  been  initialized	17	None	replace
6	[BUG]  [BUGGY]    r  =  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    r  =  FastMath.sin(x);  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    r  =  FastMath.sin(x);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	18	None	add
7	[BUG]  [BUGGY]    r  =  FastMath.cos(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    r  =  FastMath.cos(x);  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    r  =  FastMath.cos(x);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	18	None	add
8	[BUG]  [BUGGY]    final  double  r  =  FastMath.sin(x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    final  double  r  =  FastMath.sin(x);  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    final  double  r  =  FastMath.sin(x);		non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	18	None	add
9	[BUG]  [BUGGY]    final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(x));  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(x));  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(x));		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	18	None	add
10	[BUG]  [BUGGY]    final  double  nextGaussian  =  FastMath.sin(x);  random  =  r  *  FastMath.cos(alpha);  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    final  double  nextGaussian  =  FastMath.sin(x);  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    final  double  nextGaussian  =  FastMath.sin(x);  random  =  r  *  FastMath.cos(alpha);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	18	None	add
11	[BUG]  [BUGGY]    final  double  nextGaussian  =  FastMath.cos(x);  random  =  r  *  FastMath.cos(alpha);  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    final  double  nextGaussian  =  FastMath.cos(x);  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    final  double  nextGaussian  =  FastMath.cos(x);  random  =  r  *  FastMath.cos(alpha);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	18	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  x  *  FastMath.cos(alpha);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	6	replace
13	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(alpha);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	6	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  r  *  FastMath.sin(alpha);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	3	replace
15	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(alpha);	random  =  r  *  FastMath.cos(alpha);  	compilable	  [FE]  AssertionError  	17	3	replace
16	[BUG]  [BUGGY]    double  r  =  FastMath.sqrt(-2  *  FastMath.log(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    double  r  =  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    double  r  =  FastMath.sqrt(-2  *  FastMath.log(y));		non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	18	None	add
17	[BUG]  [BUGGY]    double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));		non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	18	None	add
18	[BUG]  [BUGGY]    double  r  =  FastMath.sin(x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    double  r  =  FastMath.sin(x);  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	    double  r  =  FastMath.sin(x);		non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	18	None	add
