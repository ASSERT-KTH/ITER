bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.cos(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.cos(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.cos(x));	  double    r    =    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	37	None	replace
2	[BUG]  [BUGGY]  Random  r  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  r  =  x  *  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  r  =  x  *  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    r    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
3	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  x  *  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(r);  Random  r  =  x  *  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    r    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
4	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.cos(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.cos(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.cos(x);    random  =  r  *  FastMath.cos(x);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	11	None	add
5	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  r  =  r  *  FastMath.cos(x);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  r  =  r  *  FastMath.cos(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.cos(x);    Random  r  =  r  *  FastMath.cos(x);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
6	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  r  =  r  *  FastMath.cos(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  r  =  r  *  FastMath.cos(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.cos(x);    r  =  r  *  FastMath.cos(x);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	11	None	add
7	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  Random  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x);  Random  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    Random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol  Random	29	None	replace
8	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  Random  =  r  *  FastMath.sin(alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  Random  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x,  alpha);  Random  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    Random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	29	None	replace
9	[BUG]  [BUGGY]  Random  random  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  random  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  random  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    Random    random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
10	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x,  y),  alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x,  y),  alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(x,  y),  alpha);	  double    r    =    FastMath.sqrt(-2    *    FastMath.log(x,    y));    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	16	None	replace
11	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  random  =  x  *  FastMath.cos(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  random  =  x  *  FastMath.cos(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(y);    random  =  x  *  FastMath.cos(y);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	38	None	add
12	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  x  =  x  *  FastMath.cos(y);  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  x  =  x  *  FastMath.cos(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(y);    x  =  x  *  FastMath.cos(y);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	38	None	add
13	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  r  =  FastMath.cos(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  r  =  FastMath.cos(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(y);    Random  r  =  FastMath.cos(x);	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
14	[BUG]  [BUGGY]  Random  r  =  x  *  FastMath.cos(r);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  r  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  r  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    Random    r    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
15	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.cos(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  random  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  random  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(alpha);    double    random    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	41	None	replace
16	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x,  y,  alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sin(x,  y,  alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sin(x,  y,  alpha);	  double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	7	None	replace
17	[BUG]  [BUGGY]  Random  =  x  *  FastMath.cos(r);  [CE]  cannot  find  symbol  Random  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    Random    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol  Random	25	None	replace
18	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  =  x  *  FastMath.cos(r);  [CE]  cannot  find  symbol  Random  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.cos(x);  Random  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    Random    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol  Random	25	None	replace
19	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  r  =  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(r);  Random  r  =  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    r    =    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
20	[BUG]  [BUGGY]  Random  r  =  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  r  =  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  r  =  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    r    =    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
21	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  r  =  FastMath.cos(r);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  r  =  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.cos(x);  Random  r  =  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    Random    r    =    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
22	[BUG]  [BUGGY]  Random  r  =  FastMath.cos(x);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  r  =  FastMath.cos(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  r  =  FastMath.cos(x);	  random    =    x    *    FastMath.cos(r);    Random    r    =    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
23	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  random  =  x  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  random  =  x  *  FastMath.sin(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(r);    random  =  x  *  FastMath.sin(r);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	9	None	add
24	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  r  =  x  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  r  =  x  *  FastMath.sin(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(r);    r  =  x  *  FastMath.sin(r);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	add
25	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  r  =  FastMath.sin(r);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  r  =  FastMath.sin(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(r);    Random  r  =  FastMath.sin(r);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
26	[BUG]  [BUGGY]  Random  r  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  r  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  r  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    Random    r    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
27	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  r  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x);  Random  r  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x);  Random  r  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    Random    r    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
28	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  r  =  y  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  r  =  y  *  FastMath.sin(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.sin(r);  r  =  y  *  FastMath.sin(x);	  random    =    r    *    FastMath.sin(x);    r    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	6	None	replace
29	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(x);    r    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	6	None	replace
30	[BUG]  [BUGGY]  Random  r  =  r  *  FastMath.sin(x);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  r  =  r  *  FastMath.sin(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  r  =  r  *  FastMath.sin(x);	  random    =    r    *    FastMath.sin(x);    Random    r    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
31	[BUG]  [BUGGY]  final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(x,  y));  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(x,  y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(x,  y));	  final    double    nextGaussian    =    FastMath.sqrt(-2    *    FastMath.log(y));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	2	None	replace
32	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  random  =  x  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  random  =  x  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(alpha);    random  =  x  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	33	None	add
33	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  random  =  x  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  random  =  x  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(alpha);    Random  random  =  x  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
34	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  r  =  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  r  =  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(alpha);    Random  r  =  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
35	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y  +  1);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y  +  1);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y  +  1);	  double    r    =    FastMath.sqrt(-2    *    FastMath.log(x),    y);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	31	None	replace
36	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y,  alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y,  alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y,  alpha);	  double    r    =    FastMath.sqrt(-2    *    FastMath.log(x),    y);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	31	None	replace
37	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  r  =  x  *  FastMath.cos(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  r  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(y);  r  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    r    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	14	None	replace
38	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(alpha);  r  =  x  *  FastMath.cos(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(alpha);  r  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(alpha);  r  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    r    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	14	None	replace
39	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  Random  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(r);  Random  =  x  *  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(r);  Random  =  x  *  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol  Random	36	None	replace
40	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(x,  y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  final  double  r  =  FastMath.sin(x,  y);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  r  =  FastMath.sin(x,  y);	  final    double    r    =    FastMath.sin(y);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	32	None	replace
41	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(x,  y,  alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  final  double  r  =  FastMath.sin(x,  y,  alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  r  =  FastMath.sin(x,  y,  alpha);	  final    double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	17	None	replace
42	[BUG]  [BUGGY]  final  double  nextGaussian  =  FastMath.cos(x);  random  =  y  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  final  double  nextGaussian  =  FastMath.cos(x);  random  =  y  *  FastMath.sin(alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  nextGaussian  =  FastMath.cos(x);  random  =  y  *  FastMath.sin(alpha);	  final    double    nextGaussian    =    FastMath.cos(x);    random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	1	None	replace
43	[BUG]  [BUGGY]  r  =  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  r  =  FastMath.sin(alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	r  =  FastMath.sin(alpha);	  r    =    FastMath.sin(y);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	8	None	replace
44	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(y,  x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(y,  x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(y,  x));	  double    r    =    FastMath.sqrt(-2    *    FastMath.log(x,    y));    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	16	None	replace
45	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.cos(alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  random  =  x  *  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  random  =  x  *  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    double    random    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	41	None	replace
46	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  =  r  *  FastMath.sin(x);  [CE]  cannot  find  symbol  Random  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  =  r  *  FastMath.sin(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.sin(r);  Random  =  r  *  FastMath.sin(x);	  random    =    r    *    FastMath.sin(x);    Random    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  Random	28	None	replace
47	[BUG]  [BUGGY]  final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(nextGaussian));  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(nextGaussian));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  nextGaussian  =  FastMath.sqrt(-2  *  FastMath.log(nextGaussian));	  final    double    nextGaussian    =    FastMath.sqrt(-2    *    FastMath.log(y));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	2	None	replace
48	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  r  =  x  *  FastMath.cos(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  r  =  x  *  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(y);  r  =  x  *  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(r);    r    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	14	None	replace
49	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y  +  2);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y  +  2);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(x),  y  +  2);	  double    r    =    FastMath.sqrt(-2    *    FastMath.log(x),    y);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	31	None	replace
50	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  =  x  *  FastMath.cos(r);  [CE]  cannot  find  symbol  Random  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.cos(y);  Random  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    Random    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol  Random	25	None	replace
51	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  r  =  r  *  FastMath.sin(x);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  r  =  r  *  FastMath.sin(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.sin(r);  Random  r  =  r  *  FastMath.sin(x);	  random    =    r    *    FastMath.sin(x);    Random    r    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
52	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  next  =  r  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  next  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x);  next  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x);  next  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(x);    next    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  next	42	None	replace
53	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(y);  next  =  r  *  FastMath.sin(x);  [CE]  cannot  find  symbol  next  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(y);  next  =  r  *  FastMath.sin(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(y);  next  =  r  *  FastMath.sin(x);	  random    =    r    *    FastMath.sin(x);    next    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  next	42	None	replace
54	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  r  =  x  *  FastMath.sin(r);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  r  =  x  *  FastMath.sin(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(r);    Random  r  =  x  *  FastMath.sin(r);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
55	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  =  x  *  FastMath.sin(r);  [CE]  cannot  find  symbol  Random  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  Random  =  x  *  FastMath.sin(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(r);    Random  =  x  *  FastMath.sin(r);	  	non-compiled	[CE]  cannot  find  symbol  Random	9	None	add
56	[BUG]  [BUGGY]  Random  random  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  random  =  x  *  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  random  =  x  *  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    random    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
57	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  Random  r  =  r  *  FastMath.sin(alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  Random  r  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x,  alpha);  Random  r  =  r  *  FastMath.sin(alpha);	  random    =    r    *    FastMath.sin(alpha);    Random    r    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	22	None	replace
58	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.sin(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.sin(x);	  random    =    r    *    FastMath.sin(x);    r    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	6	None	replace
59	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  r  =  x  *  FastMath.cos(y);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  r  =  x  *  FastMath.cos(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(y);    Random  r  =  x  *  FastMath.cos(y);	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
60	[BUG]  [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  =  x  *  FastMath.cos(y);  [CE]  cannot  find  symbol  Random  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.cos(y);  Random  =  x  *  FastMath.cos(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.cos(y);    Random  =  x  *  FastMath.cos(y);	  	non-compiled	[CE]  cannot  find  symbol  Random	38	None	add
61	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  r  =  x  *  FastMath.cos(r);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  r  =  x  *  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.cos(x);  Random  r  =  x  *  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    Random    r    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
62	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  =  x  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  Random  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  =  x  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(alpha);    Random  =  x  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol  Random	33	None	add
63	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  random  =  x  *  fastMath.sin(alpha);  [CE]  cannot  find  symbol  fastMath  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  random  =  x  *  fastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(alpha);    random  =  x  *  fastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	33	None	add
64	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  =  r  *  FastMath.cos(x);  [CE]  cannot  find  symbol  Random  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  Random  =  r  *  FastMath.cos(x);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.cos(x);    Random  =  r  *  FastMath.cos(x);	  	non-compiled	[CE]  cannot  find  symbol  Random	11	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  x  *  FastMath.sin(y);	  random    =    x    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	34	6	replace
66	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.sin(y);	  random    =    x    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	34	6	replace
67	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  double  random  =  x  *  FastMath.sin(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(r);  double  random  =  x  *  FastMath.sin(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(r);    double  random  =  x  *  FastMath.sin(r);	  	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	9	None	add
68	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(alpha);  Random  r  =  FastMath.cos(alpha);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(alpha);  Random  r  =  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.cos(alpha);  Random  r  =  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    r    =    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
69	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  final  double  r  =  FastMath.sin(alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  r  =  FastMath.sin(alpha);	  final    double    r    =    FastMath.sin(y);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	32	None	replace
70	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  r  =  x  *  FastMath.sin(alpha);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  r  =  x  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(alpha);    Random  r  =  x  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
71	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  random  =  y  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  random  =  y  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    x    *    FastMath.sin(alpha);    random  =  y  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	33	None	add
72	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x,  alpha);	  random    =    r    *    FastMath.sin(alpha);    random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	21	None	replace
73	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.cos(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(x);  random  =  r  *  FastMath.cos(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random    =    r    *    FastMath.cos(x);    random  =  r  *  FastMath.cos(y);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	11	None	add
74	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(alpha,  x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  final  double  r  =  FastMath.sin(alpha,  x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	final  double  r  =  FastMath.sin(alpha,  x);	  final    double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	17	None	replace
75	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  Random  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  x  *  FastMath.sin(alpha);  Random  =  x  *  FastMath.cos(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  x  *  FastMath.sin(alpha);  Random  =  x  *  FastMath.cos(alpha);	  random    =    x    *    FastMath.cos(alpha);    Random    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol  Random	36	None	replace
76	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(y,  alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(y,  alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(y,  alpha));	  double    r    =    FastMath.sqrt(-2    *    FastMath.log(x,    y));    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	16	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  r  *  FastMath.cos(y);	  random    =    x    *    FastMath.cos(y);    	compilable	  [FE]  AssertionError  	39	6	replace
78	[BUG]  [BUGGY]  random  =  r  *  FastMath.cos(y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.cos(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.cos(y);	  random    =    x    *    FastMath.cos(y);    	compilable	  [FE]  AssertionError  	39	6	replace
79	[BUG]  [BUGGY]  Random  r  =  FastMath.cos(r);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  Random  r  =  FastMath.cos(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	Random  r  =  FastMath.cos(r);	  random    =    x    *    FastMath.cos(r);    Random    r    =    FastMath.cos(r);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
80	[BUG]  [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(y),  alpha);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sqrt(-2  *  FastMath.log(y),  alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sqrt(-2  *  FastMath.log(y),  alpha);	  double    r    =    FastMath.sqrt(-2    *    FastMath.log(x),    y);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	31	None	replace
81	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x,  y);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  r  *  FastMath.sin(x,  y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  r  *  FastMath.sin(x,  y);	  random    =    r    *    FastMath.sin(x);    random    =    r    *    FastMath.sin(y);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	27	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  y  *  FastMath.cos(alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	random  =  y  *  FastMath.cos(alpha);	  final    double    nextGaussian    =    FastMath.sin(x);    random    =    y    *    FastMath.cos(alpha);    	compilable	  [FE]  AssertionError  	30	6	replace
83	[BUG]  [BUGGY]  random  =  y  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  random  =  y  *  FastMath.cos(alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	random  =  y  *  FastMath.cos(alpha);	  final    double    nextGaussian    =    FastMath.sin(x);    random    =    y    *    FastMath.cos(alpha);    	compilable	  [FE]  AssertionError  	30	6	replace
84	[BUG]  [BUGGY]  double  r  =  FastMath.sin(alpha,  x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sin(alpha,  x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sin(alpha,  x);	  double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	7	None	replace
85	[BUG]  [BUGGY]  double  r  =  FastMath.sin(y,  x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));      [BUGGY]  double  r  =  FastMath.sin(y,  x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	double  r  =  FastMath.sin(y,  x);	  double    r    =    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	26	None	replace
