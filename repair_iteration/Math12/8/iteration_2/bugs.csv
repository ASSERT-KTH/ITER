bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    	compilable	timeout	2	1	replace
2	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  timeout  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    	compilable	timeout	2	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));	  final    double    r=    FastMath.sqrt(2    *    FastMath.log(x));    timeout    	compilable	timeout	4	1	replace
4	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  timeout  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));	  final    double    r=    FastMath.sqrt(2    *    FastMath.log(x));    timeout    	compilable	timeout	4	1	replace
5	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(2    *    FastMath.log(x));    final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	3	None	add
6	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(2    *    FastMath.log(x));    final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	3	None	add
7	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  nextGaussian();  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	double  r  =  nextGaussian();	      	compilable	  [FE]  StackOverflowError  	5	6	replace
8	[BUG]  [BUGGY]  double  r  =  nextGaussian();  [FE]  StackOverflowError  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  nextGaussian();  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  nextGaussian();	      	compilable	  [FE]  StackOverflowError  	5	6	replace
9	[BUG]  [BUGGY]  double  nextGaussian  =  x  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  r  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  nextGaussian  =  x  *  FastMath.cos(alpha);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  nextGaussian  =  x  *  FastMath.cos(alpha);	      	non-compiled	[CE]  cannot  find  symbol  r	5	None	replace
10	[BUG]  [BUGGY]  double  y  =  nextDouble();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  y  =  nextDouble();  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  y  =  nextDouble();	      y    =    nextDouble();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	14	None	replace
11	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.cos(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  random  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  x  *  FastMath.cos(nextGaussian);	      double    random    =    nextGaussian    *    FastMath.cos(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	13	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	9	4	replace
13	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	9	4	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	9	6	replace
15	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	9	6	replace
16	[BUG]  [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(alpha))  {  return  alpha;  }  [CE]  cannot  find  symbol  r  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(alpha))  {  return  alpha;  }  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(x)||  Double.isNaN(alpha))  {  return  alpha;  }	      if(Double.isNaN(alpha)||    Double.isNaN(alpha))    {    return    random;    }    	non-compiled	[CE]  cannot  find  symbol  r	12	None	replace
17	[BUG]  [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(y))  {  return  alpha;  }  [CE]  cannot  find  symbol  r  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(y))  {  return  alpha;  }  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(x)||  Double.isNaN(y))  {  return  alpha;  }	      if(Double.isNaN(alpha)||    Double.isNaN(alpha))    {    return    random;    }    	non-compiled	[CE]  cannot  find  symbol  r	12	None	replace
18	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  FastMath.sin(x,  alpha);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(x,  alpha);	      double    r    =    FastMath.sin(x);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	6	None	replace
19	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(x,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r  =  FastMath.sin(x,  alpha);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.sin(x,  alpha);	      final    double    r    =    FastMath.sin(x);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	7	None	replace
20	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  x  *  FastMath.sin(nextGaussian);	      double    random    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	15	None	replace
21	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  alpha);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  alpha);	      double    random    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	15	None	replace
22	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	1	None	add
23	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	1	None	add
24	[BUG]  [BUGGY]  final  double  random  =  FastMath.cos(x,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  random  =  FastMath.cos(x,  y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.cos(x,  y);	      final    double    random    =    FastMath.cos(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	10	None	replace
25	[BUG]  [BUGGY]  final  double  random  =  FastMath.sin(x,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  random  =  FastMath.sin(x,  y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.sin(x,  y);	      final    double    random    =    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	11	None	replace
26	[BUG]  [BUGGY]  final  double  random  =  FastMath.sin(x,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  random  =  FastMath.sin(x,  alpha);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.sin(x,  alpha);	      final    double    random    =    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	11	None	replace
27	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(alpha));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(alpha));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	8	None	add
28	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(alpha));  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(alpha));  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	8	None	add
29	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  y);	      double    random    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	15	None	replace
30	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r  =  FastMath.sin(nextGaussian);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r  =  FastMath.sin(nextGaussian);	      final    double    r    =    FastMath.sin(x);    	compilable	timeout	7	1	replace
31	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(nextGaussian);  timeout  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r  =  FastMath.sin(nextGaussian);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.sin(nextGaussian);	      final    double    r    =    FastMath.sin(x);    	compilable	timeout	7	1	replace
32	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	timeout	9	1	replace
33	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  timeout  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	timeout	9	1	replace
34	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	1	None	add
35	[BUG]  [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(alpha))  {  return  random;  }  [CE]  cannot  find  symbol  r  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(alpha))  {  return  random;  }  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(x)||  Double.isNaN(alpha))  {  return  random;  }	      if(Double.isNaN(alpha)||    Double.isNaN(alpha))    {    return    random;    }    	non-compiled	[CE]  cannot  find  symbol  r	12	None	replace
36	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	double  r  =  nextGaussian  *  FastMath.cos(x);	      	compilable	timeout	5	1	replace
37	[BUG]  [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  timeout  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  nextGaussian  *  FastMath.cos(x);	      	compilable	timeout	5	1	replace
38	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x,  y);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  FastMath.sin(x,  y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(x,  y);	      double    r    =    FastMath.sin(x);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	6	None	replace
39	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    	compilable	timeout	2	1	replace
40	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  timeout  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    	compilable	timeout	2	1	replace
41	[BUG]  [BUGGY]  y  =  nextGaussian();  [CE]  cannot  assign  a  value  to  final  variable  y  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  y  =  nextGaussian();  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	y  =  nextGaussian();	      y    =    nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  y	14	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r  =  FastMath.sin(y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r  =  FastMath.sin(y);	      final    double    r    =    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	7	6	replace
43	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(y);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r  =  FastMath.sin(y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.sin(y);	      final    double    r    =    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	7	6	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	9	6	replace
45	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	9	6	replace
46	[BUG]  [BUGGY]  final  double  random  =  FastMath.cos(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  final  double  random  =  FastMath.cos(y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.cos(y);	      final    double    random    =    FastMath.cos(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	10	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  FastMath.sin(y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	double  r  =  FastMath.sin(y);	      double    r    =    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	6	6	replace
48	[BUG]  [BUGGY]  double  r  =  FastMath.sin(y);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  FastMath.sin(y);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(y);	      double    r    =    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	6	6	replace
49	[BUG]  [BUGGY]  double  r  =  nextGaussian.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;    [BUGGY]  double  r  =  nextGaussian.doubleValue();  [BUGGY]    random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  nextGaussian.doubleValue();	      	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
