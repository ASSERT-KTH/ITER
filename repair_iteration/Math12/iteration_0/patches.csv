bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action11	[BUG]  [BUGGY]    final  double  nextGaussian  =  random.next();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  [BUGGY]    final  double  nextGaussian  =  random.next();  [BUGGY]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	    final  double  nextGaussian  =  random.next();		non-compiled	[CE]  double  cannot  be  dereferenced	8	None	add
12	[BUG]  [BUGGY]    final  double  nextGaussian  =  random.doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  [BUGGY]    final  double  nextGaussian  =  random.doubleValue();  [BUGGY]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	    final  double  nextGaussian  =  random.doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	8	None	add
13	[BUG]  [BUGGY]    final  double  nextGaussian  =  random.nextDouble();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  [BUGGY]    final  double  nextGaussian  =  random.nextDouble();  [BUGGY]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	    final  double  nextGaussian  =  random.nextDouble();		non-compiled	[CE]  double  cannot  be  dereferenced	8	None	add
14	[BUG]  [BUGGY]    final  double  nextGaussian  =  Random.doubleValue();  [CE]  cannot  find  symbol  Random  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  [BUGGY]    final  double  nextGaussian  =  Random.doubleValue();  [BUGGY]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	    final  double  nextGaussian  =  Random.doubleValue();		non-compiled	[CE]  cannot  find  symbol  Random	8	None	add
15	[BUG]  [BUGGY]    final  double  nextGaussian  =  super.nextGaussian();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  [BUGGY]    final  double  nextGaussian  =  super.nextGaussian();  [BUGGY]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	    final  double  nextGaussian  =  super.nextGaussian();		non-compiled	[CE]  cannot  find  symbol	8	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  testDistributionClone  [CONTEXT]  public  double  nextDouble()  {  [BUGGY]  final  long  high  =((  long)next(26))  <<  27;  [BUGGY]  final  intlow=  next(26);  return  (high  |  low)  *  0x1.0p-52d;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextDouble  [RETURN_TYPE]  double  [VARIABLES]  boolean  double  nextGaussian  long  high  int  low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	87	87	3	add	final  long  high  =((  long)next(26))  <<  27;	final  long  high  =  ((long)  next(26))  <<  26;  	compilable	  [FE]  AssertionError  testDistributionClone	1	3
23	[BUG]  [BUGGY]  final  long  high  =((  long)next(26))  <<  27;  [FE]  AssertionError  testDistributionClone  [CONTEXT]  public  double  nextDouble()  {  [BUGGY]  final  long  high  =((  long)next(26))  <<  27;  [BUGGY]  final  intlow=  next(26);  return  (high  |  low)  *  0x1.0p-52d;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextDouble  [RETURN_TYPE]  double  [VARIABLES]  boolean  double  nextGaussian  long  high  int  low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	87	87	3	replace	final  long  high  =((  long)next(26))  <<  27;	final  long  high  =  ((long)  next(26))  <<  26;  	compilable	  [FE]  AssertionError  testDistributionClone	1	3	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  high  [CONTEXT]  public  double  nextDouble()  {  [BUGGY]    [BUGGY]  final  intlow=  next(26);  return  (high  |  low)  *  0x1.0p-52d;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextDouble  [RETURN_TYPE]  double  [VARIABLES]  boolean  double  nextGaussian  long  high  int  low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	87	87	3	replace	  	final  long  high  =  ((long)  next(26))  <<  26;  	non-compiled	[CE]  cannot  find  symbol  high	1	None	replace
