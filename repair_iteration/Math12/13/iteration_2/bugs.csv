bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  random  =  Math.pow(10,  random);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  random  =  Math.pow(10,  random);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  Math.pow(10,  random);	      if(nextGaussian!=    null)    {    random    =    Math.pow(10,    random);    }    else    {    random    =    Math.sqrt(0,    random);    }    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	11	None	replace
2	[BUG]  [BUGGY]  random  =  Math.pow(10,  nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]              AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  random  =  Math.pow(10,  nextGaussian);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  Math.pow(10,  nextGaussian);	      if(nextGaussian!=    null)    {    random    =    Math.pow(10,    random);    }    else    {    random    =    Math.sqrt(0,    random);    }    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	11	None	replace
3	[BUG]  [BUGGY]  random  =  Math.pow(10,  alpha);  [CE]  cannot  find  symbol  alpha  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  random  =  Math.pow(10,  alpha);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  Math.pow(10,  alpha);	      if(nextGaussian!=    null)    {    random    =    Math.pow(10,    random);    }    else    {    random    =    Math.sin(alpha);    }    	non-compiled	[CE]  cannot  find  symbol  alpha	10	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  y  =  nextDouble();  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	double  y  =  nextDouble();	      y    =    nextDouble();    	compilable	  [FE]  AssertionError  	9	6	replace
5	[BUG]  [BUGGY]  double  y  =  nextDouble();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  y  =  nextDouble();  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  y  =  nextDouble();	      y    =    nextDouble();    	compilable	  [FE]  AssertionError  	9	6	replace
6	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.log(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  x  *  FastMath.log(y);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  x  *  FastMath.log(y);	      double    random    =    random    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
7	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.log(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  r  *  FastMath.log(y);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  r  *  FastMath.log(y);	      double    random    =    random    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
8	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.log(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  r  *  FastMath.log(x);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  r  *  FastMath.log(x);	      double    random    =    random    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
9	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.log(random);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  x  *  FastMath.log(random);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  x  *  FastMath.log(random);	      double    random    =    random    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;	  timeout    	compilable	  [FE]  AssertionError  	4	3	add
11	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;	  timeout    	compilable	  [FE]  AssertionError  	4	3	add
12	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  secondGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  secondGaussian  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  secondGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY;    secondGaussian  =  Double.POSITIVE_INFINITY;	  timeout    	non-compiled	[CE]  cannot  find  symbol  secondGaussian	4	None	add
13	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  r  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  r  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  r  =  Double.POSITIVE_INFINITY;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY;    r  =  Double.POSITIVE_INFINITY;	  timeout    	non-compiled	[CE]  cannot  find  symbol  r	4	None	add
14	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian  =  Double.POSITIVE_INFINITY  +  1;	  nextGaussian    =    Double.POSITIVE_INFINITY;    timeout    	compilable	timeout	5	1	replace
15	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  timeout  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian  =  Double.POSITIVE_INFINITY  +  1;	  nextGaussian    =    Double.POSITIVE_INFINITY;    timeout    	compilable	timeout	5	1	replace
16	[BUG]  [BUGGY]  random  =  RandomMath.sin(x);  [CE]  cannot  find  symbol  x  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  random  =  RandomMath.sin(x);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  RandomMath.sin(x);	      random    =    RandomMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol  x	2	None	replace
17	[BUG]  [BUGGY]  random  =  RandomMath.sin(y);  [CE]  cannot  find  symbol  y  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  random  =  RandomMath.sin(y);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  RandomMath.sin(y);	      random    =    RandomMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol  y	2	None	replace
18	[BUG]  [BUGGY]  r  =  FastMath.sin(x);  [CE]  cannot  find  symbol  r  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  r  =  FastMath.sin(x);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	r  =  FastMath.sin(x);	      r    =    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol  r	1	None	replace
19	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  x  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  x  *  FastMath.sin(alpha);	      double    random    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	replace
20	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  r  *  FastMath.sin(alpha);	      double    random    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	replace
21	[BUG]  [BUGGY]  r  =  FastMath.log(x);  [CE]  cannot  find  symbol  r  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  r  =  FastMath.log(x);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	r  =  FastMath.log(x);	      r    =    FastMath.log(y);    	non-compiled	[CE]  cannot  find  symbol  r	3	None	replace
22	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  nGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  nGaussian  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  nGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY;    nGaussian  =  Double.POSITIVE_INFINITY;	  timeout    	non-compiled	[CE]  cannot  find  symbol  nGaussian	4	None	add
23	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  random  =  Double.POSITIVE_INFINITY;  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  Double.POSITIVE_INFINITY;	  nextGaussian    =    Double.POSITIVE_INFINITY;    timeout    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	replace
24	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.log(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  x  *  FastMath.log(nextGaussian);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  x  *  FastMath.log(nextGaussian);	      double    random    =    random    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
25	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(y);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  nextGaussian  *  FastMath.log(y);	      double    random    =    random    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
26	[BUG]  [BUGGY]  random  =  RandomMath.sin(nextGaussian);  [CE]  cannot  find  symbol  RandomMath  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  random  =  RandomMath.sin(nextGaussian);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  RandomMath.sin(nextGaussian);	      random    =    RandomMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol  RandomMath	2	None	replace
27	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  nextGaussian  *  FastMath.sin(alpha);	      double    random    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	replace
28	[BUG]  [BUGGY]  mutator  =  Math.pow(10,  random);  [CE]  cannot  find  symbol  mutator  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  mutator  =  Math.pow(10,  random);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	mutator  =  Math.pow(10,  random);	      if(nextGaussian!=    null)    {    random    =    Math.pow(10,    random);    }    else    {    random    =    Math.sqrt(0,    random);    }    	non-compiled	[CE]  cannot  find  symbol  mutator	11	None	replace
29	[BUG]  [BUGGY]  r  =  FastMath.log(nextGaussian);  [CE]  cannot  find  symbol  r  [FE]            AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  r  =  FastMath.log(nextGaussian);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	r  =  FastMath.log(nextGaussian);	      r    =    FastMath.log(y);    	non-compiled	[CE]  cannot  find  symbol  r	3	None	replace
30	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.log(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  random  =  y  *  FastMath.log(x);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  y  *  FastMath.log(x);	      double    random    =    random    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
31	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY);  [BUGGY]    }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY);	  timeout    	non-compiled	[CE]  ';'  expected	4	None	add
32	[BUG]  [BUGGY]  double  r  =  FastMath.sin(alpha);  [CE]  cannot  find  symbol  alpha  [FE]        AssertionError    [CONTEXT]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;    [BUGGY]  double  r  =  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  r  =  FastMath.sin(alpha);	      r    =    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol  alpha	1	None	replace
