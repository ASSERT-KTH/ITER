bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  nextGaussian  *  FastMath.cos(nextGaussian);	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  Random.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  Random.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	Random.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
3	[BUG]  [BUGGY]  double  nextGaussian  =  random.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  double  nextGaussian  =  random.doubleValue()  +  1;  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	double  nextGaussian  =  random.doubleValue()  +  1;	      double    nextGaussian    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  if(!Double.isNaN(random))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  if(!Double.isNaN(random))  {  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(!Double.isNaN(random))  {	  if(!Double.isNaN(nextGaussian))    {    timeout    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	6	None	replace
5	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(random);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(random);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(random);	      if(nextGaussian!=    null)    {    final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(nextGaussian);	      if(nextGaussian!=    null)    {    final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  if(Double.isNaN(random)||  Double.isNaN(random))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  if(Double.isNaN(random)||  Double.isNaN(random))  {  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(random)||  Double.isNaN(random))  {	  if(Double.isNaN(random))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	4	None	replace
8	[BUG]  [BUGGY]  random  =  random  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  random  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  random  *  FastMath.cos(nextGaussian);	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    random    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    random    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if(!Double.isNaN(nextGaussian))  {  if(!Double.isNaN(nextGaussian))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  if(!Double.isNaN(nextGaussian))  {  if(!Double.isNaN(nextGaussian))  {  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(!Double.isNaN(nextGaussian))    {    if(!Double.isNaN(nextGaussian))  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	5	None	add
11	[BUG]  [BUGGY]  if(!Double.isNaN(nextGaussian))  {  If(!Double.isNaN(nextGaussian))  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  if(!Double.isNaN(nextGaussian))  {  If(!Double.isNaN(nextGaussian))  {  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(!Double.isNaN(nextGaussian))    {    If(!Double.isNaN(nextGaussian))  {	  timeout    	non-compiled	[CE]  ';'  expected	5	None	add
12	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  random.doubleValue()  +  1;  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random.doubleValue()  +  1;	      final    double    nextGaussian    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  final  double  nextDouble();  random  =  nextDouble();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextDouble();  random  =  nextDouble();  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextDouble();  random  =  nextDouble();	      if(nextGaussian    ==    null)    {    final    double    nextDouble();    random    =    nextDouble();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  random  =  RandomMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  random  =  RandomMath.cos(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  RandomMath.cos(nextGaussian);	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  mutator  =  RandomMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  mutator  =  RandomMath.cos(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	mutator  =  RandomMath.cos(nextGaussian);	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.sin(nextGaussian);	      if(nextGaussian!=    null)    {    final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.sin(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();	      if(nextGaussian    ==    null)    {    final    double    nextDouble();    random    =    nextDouble();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextDouble();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextDouble();  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  nextDouble();	      if(nextGaussian    ==    null)    {    final    double    nextDouble();    random    =    nextDouble();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  double  random  =  random.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  double  random  =  random.doubleValue();  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	double  random  =  random.doubleValue();	      double    nextGaussian    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextGaussian);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextGaussian);  }  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextGaussian);  }	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextGaussian);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextGaussian);  }  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(nextGaussian)||  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextGaussian);  }	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  final  double  random  =  random.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  random  =  random.doubleValue();  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  random  =  random.doubleValue();	      final    double    nextGaussian    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.nextGaussian();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  random.nextGaussian();  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random.nextGaussian();	      final    double    nextGaussian    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  nextGaussian  =  nextGaussian  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  nextGaussian  =  nextGaussian  *  FastMath.cos(nextGaussian);  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	nextGaussian  =  nextGaussian  *  FastMath.cos(nextGaussian);	      if(Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(random);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(random);  }  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(random);  }	      if(nextGaussian!=    null)    {    final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  if(Double.isNaN(random)||  Double.isNaN(nextGaussian))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  if(Double.isNaN(random)||  Double.isNaN(nextGaussian))  {  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(random)||  Double.isNaN(nextGaussian))  {	  if(Double.isNaN(random))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	4	None	replace
27	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  }  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  }	      if(nextGaussian!=    null)    {    final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
28	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;    [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  }  [BUGGY]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  }	      if(nextGaussian!=    null)    {    final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.sin(nextGaussian);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
