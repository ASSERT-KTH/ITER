bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(nextGaussian  ==  nextGaussian)  {  if(!Double.isNaN(nextGaussian))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(nextGaussian  ==  nextGaussian)  {  if(!Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(nextGaussian  ==  nextGaussian)  {  if(!Double.isNaN(nextGaussian))  {	  if(!Double.isNaN(nextGaussian))    {    if(!Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  final  double  random  =  nextGaussian.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  random  =  nextGaussian.doubleValue();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  random  =  nextGaussian.doubleValue();	  final    double    random    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
3	[BUG]  [BUGGY]  final  double  random  =  this.random.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  random  =  this.random.doubleValue();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  random  =  this.random.doubleValue();	  final    double    random    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
4	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.nextGaussian()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random.nextGaussian()  +  1;  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random.nextGaussian()  +  1;	  final    double    nextGaussian    =    random.nextGaussian();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
5	[BUG]  [BUGGY]  double  nextGaussian  =  random.doubleValue()  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  double  nextGaussian  =  random.doubleValue()  /  1;  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	double  nextGaussian  =  random.doubleValue()  /  1;	  double    nextGaussian    =    random.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  random  =  RandomMath.cos(random);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  random  =  RandomMath.cos(random);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  RandomMath.cos(random);	  random    =    RandomMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
7	[BUG]  [BUGGY]  random  =  random  *  FastMath.sin(nextGaussian);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  random  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  random  *  FastMath.sin(nextGaussian);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
8	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(random);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(random);  }  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(random);  }	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
10	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(random);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(random);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(random);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	add	if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {	  if(Double.isNaN(random)||    Double.isNaN(random))    {    	compilable	  [FE]  AssertionError  	7	3	replace
12	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {	  if(Double.isNaN(random)||    Double.isNaN(random))    {    	compilable	  [FE]  AssertionError  	7	3	replace
13	[BUG]  [BUGGY]  random  =  nextDouble();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  random  =  nextDouble();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  nextDouble();	  final    double    nextGaussian    =    nextDouble();    random    =    nextDouble();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
14	[BUG]  [BUGGY]  nextGaussian  =  nextDouble();  random  =  nextDouble();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  nextGaussian  =  nextDouble();  random  =  nextDouble();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	nextGaussian  =  nextDouble();  random  =  nextDouble();	  final    double    nextGaussian    =    nextDouble();    random    =    nextDouble();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
15	[BUG]  [BUGGY]  Random.isNaN(random))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  Random.isNaN(random))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	Random.isNaN(random))  {  random  =  random  *  FastMath.cos(nextGaussian);  }	  Random.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  random  =  nextGaussian  *  FastMath.cos(random);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  random  =  nextGaussian  *  FastMath.cos(random);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  nextGaussian  *  FastMath.cos(random);	  random    =    random    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  double  random  =  nextGaussian.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  double  random  =  nextGaussian.doubleValue();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	double  random  =  nextGaussian.doubleValue();	  double    random    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
18	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	nextGaussian  =  random  *  FastMath.cos(nextGaussian);	  nextGaussian    =    nextGaussian    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
19	[BUG]  [BUGGY]  mutator  =  RandomMath.cos(random);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  mutator  =  RandomMath.cos(random);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	mutator  =  RandomMath.cos(random);	  mutator    =    RandomMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);	  final    double    nextGaussian    =    random    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random.nextDouble();	  final    double    nextGaussian    =    nextDouble();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
22	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  if(!Double.isNaN(random)||  Double.isNaN(nextGaussian))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(!Double.isNaN(random)||  Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(!Double.isNaN(random)||  Double.isNaN(nextGaussian))  {	  if(!Double.isNaN(random))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	4	None	replace
24	[BUG]  [BUGGY]  random  =  random  *  FastMath.cos(nextDouble());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  random  =  random  *  FastMath.cos(nextDouble());  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  random  *  FastMath.cos(nextDouble());	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  }  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  }	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.sin(nextGaussian);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
26	[BUG]  [BUGGY]  if(!Double.isNaN(random))  {  If(!Double.isNaN(nextGaussian))  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(!Double.isNaN(random))  {  If(!Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(!Double.isNaN(random))  {  If(!Double.isNaN(nextGaussian))  {	  if(!Double.isNaN(nextGaussian))    {    If(!Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
27	[BUG]  [BUGGY]  If(!Double.isNaN(random))  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  If(!Double.isNaN(random))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	If(!Double.isNaN(random))  {	  if(!Double.isNaN(nextGaussian))    {    If(!Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.doubleValue()  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random.doubleValue()  /  1;  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random.doubleValue()  /  1;	  final    double    nextGaussian    =    random.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  }  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  }	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
30	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(nextGaussian)||  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG	  if(Double.isNaN(nextGaussian)||    Double.isInfinite(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
31	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)&&  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(Double.isNaN(nextGaussian)&&  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(nextGaussian)&&  Double.isInfinite(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG	  if(Double.isNaN(nextGaussian)||    Double.isInfinite(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
32	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextGaussian();  random  =  nextDouble();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextGaussian();  random  =  nextDouble();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextGaussian();  random  =  nextDouble();	  final    double    nextGaussian    =    nextDouble();    random    =    nextDouble();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
33	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextGaussian();  random  =  random  *  FastMath.sin(nextGaussian);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  nextGaussian();  random  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  nextGaussian();  random  =  random  *  FastMath.sin(nextGaussian);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
34	[BUG]  [BUGGY]  if(Double.isNaN(random)||  Double.isNaN(random)||  Double.isInfinite(random))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(Double.isNaN(random)||  Double.isNaN(random)||  Double.isInfinite(random))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(random)||  Double.isNaN(random)||  Double.isInfinite(random))  {	  if(Double.isNaN(random)||    Double.isNaN(random))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	7	None	replace
35	[BUG]  [BUGGY]  static  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  static  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	static  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
36	[BUG]  [BUGGY]  final  double  nextGaussian  =  random();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random();	  final    double    nextGaussian    =    nextDouble();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random.nextDouble();  random  =  random  *  FastMath.cos(nextGaussian);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.cos(nextDouble());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.cos(nextDouble());  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random  *  FastMath.cos(nextDouble());	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  nextGaussian  *  FastMath.sin(nextGaussian);	  random    =    nextGaussian    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  random  =  random  *  FastMath.cos(nextGaussian);  }  else  {  random  =  RandomMath.cos(nextG	  if(Double.isNaN(nextGaussian)||    Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
41	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  random  =  random  *  FastMath.cos(random);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  random  =  random  *  FastMath.cos(random);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random.nextDouble();  random  =  random  *  FastMath.cos(random);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
42	[BUG]  [BUGGY]  If(!Double.isNaN(nextGaussian))  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  If(!Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	If(!Double.isNaN(nextGaussian))  {	  if(!Double.isNaN(nextGaussian))    {    If(!Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
43	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian))  {  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(Double.isNaN(nextGaussian))  {  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  }  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(Double.isNaN(nextGaussian))  {  final  double  nextGaussian  =  nextDouble();  random  =  random  *  FastMath.sin(nextGaussian);  }	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.sin(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
44	[BUG]  [BUGGY]  if(!Double.isNaN(random)||  Double.isInfinite(random))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(!Double.isNaN(random)||  Double.isInfinite(random))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(!Double.isNaN(random)||  Double.isInfinite(random))  {	  if(!Double.isNaN(random))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	4	None	replace
45	[BUG]  [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.cos(random);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  final  double  nextGaussian  =  random  *  FastMath.cos(random);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	final  double  nextGaussian  =  random  *  FastMath.cos(random);	  final    double    nextGaussian    =    random    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);	  if(Double.isNaN(nextGaussian)||    Double.isInfinite(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
47	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(!Double.isNaN(nextGaussian)&&!Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	add	if(!Double.isNaN(nextGaussian)&&!Double.isNaN(nextGaussian))  {	  if(!Double.isNaN(nextGaussian))    {    If(!Double.isNaN(nextGaussian))    {    	compilable	timeout	11	1	replace
48	[BUG]  [BUGGY]  if(!Double.isNaN(nextGaussian)&&!Double.isNaN(nextGaussian))  {  timeout  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(!Double.isNaN(nextGaussian)&&!Double.isNaN(nextGaussian))  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(!Double.isNaN(nextGaussian)&&!Double.isNaN(nextGaussian))  {	  if(!Double.isNaN(nextGaussian))    {    If(!Double.isNaN(nextGaussian))    {    	compilable	timeout	11	1	replace
49	[BUG]  [BUGGY]  if(nextGaussian!=  null)  {  final  double  nextDouble();  random  =  nextDouble();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(nextGaussian!=  null)  {  final  double  nextDouble();  random  =  nextDouble();  }  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(nextGaussian!=  null)  {  final  double  nextDouble();  random  =  nextDouble();  }	  final    double    nextDouble();    random    =    nextDouble();    	non-compiled	[CE]  ';'  expected	13	None	replace
50	[BUG]  [BUGGY]  RandomMath.sin(nextGaussian);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  RandomMath.sin(nextGaussian);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	RandomMath.sin(nextGaussian);	  if(Double.isNaN(nextGaussian)||    Double.isNaN(nextGaussian))    {    random    =    random    *    FastMath.cos(nextGaussian);    }    else    {    random    =    RandomMath.cos(nextGaussian);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(nextGaussian!=  nextGaussian)  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	add	if(nextGaussian!=  nextGaussian)  {	  if(!Double.isNaN(nextGaussian))    {    if(!Double.isNaN(nextGaussian))    {    	compilable	  [FE]  AssertionError  	10	3	replace
52	[BUG]  [BUGGY]  if(nextGaussian!=  nextGaussian)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  if(nextGaussian!=  nextGaussian)  {  [BUGGY]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	if(nextGaussian!=  nextGaussian)  {	  if(!Double.isNaN(nextGaussian))    {    if(!Double.isNaN(nextGaussian))    {    	compilable	  [FE]  AssertionError  	10	3	replace
53	[BUG]  [BUGGY]  Random  random  =  nextDouble();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  Random  random  =  nextDouble();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	Random  random  =  nextDouble();	  final    double    nextGaussian    =    nextDouble();    random    =    nextDouble();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
54	[BUG]  [BUGGY]  random  =  random  *  FastMath.cos(random);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  random  =  random  *  FastMath.cos(random);  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	random  =  random  *  FastMath.cos(random);	  final    double    nextGaussian    =    nextDouble();    random    =    nextGaussian    *    FastMath.cos(random);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  double  random  =  firstGaussian.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;      [BUGGY]  double  random  =  firstGaussian.doubleValue();  [BUGGY]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	double  random  =  firstGaussian.doubleValue();	  double    random    =    random.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
