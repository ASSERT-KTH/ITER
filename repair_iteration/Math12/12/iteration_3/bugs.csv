bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [CE]  variable  random  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);	  double    nextGaussian    =    nextGaussian    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	16	None	replace
2	[BUG]  [BUGGY]  double  nextGaussian  =  secondGaussian  *  FastMath.cos(nextGaussian);  [CE]  cannot  find  symbol  secondGaussian  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  nextGaussian  =  secondGaussian  *  FastMath.cos(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  secondGaussian  *  FastMath.cos(nextGaussian);	  double    nextGaussian    =    nextGaussian    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  secondGaussian	16	None	replace
3	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);	  double    nextGaussian    =    nextGaussian    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	21	None	replace
4	[BUG]  [BUGGY]  random  =  Math.pow(10.0,  alpha);  [CE]  cannot  find  symbol  alpha  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Math.pow(10.0,  alpha);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Math.pow(10.0,  alpha);	  mutator    =    Math.pow(10.0,    alpha);    	non-compiled	[CE]  cannot  find  symbol  alpha	35	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  2;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  nextGaussian  /  2;	  random    =    nextGaussian    +    2;    	compilable	  [FE]  AssertionError  	27	6	replace
6	[BUG]  [BUGGY]  random  =  nextGaussian  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  2;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  nextGaussian  /  2;	  random    =    nextGaussian    +    2;    	compilable	  [FE]  AssertionError  	27	6	replace
7	[BUG]  [BUGGY]  random  =  nextGaussian  /  1;  random  =  nextGaussian  /  1;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  1;  random  =  nextGaussian  /  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    /    1;    random  =  nextGaussian  /  1;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	36	None	add
8	[BUG]  [BUGGY]  random  =  nextGaussian  /  1;  nextGaussian  =  nextGaussian  /  1;  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  1;  nextGaussian  =  nextGaussian  /  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    /    1;    nextGaussian  =  nextGaussian  /  1;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	36	None	add
9	[BUG]  [BUGGY]  random  =  nextGaussian  /  1;  Random  random  =  nextGaussian  /  1;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  1;  Random  random  =  nextGaussian  /  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    /    1;    Random  random  =  nextGaussian  /  1;	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
10	[BUG]  [BUGGY]  nextGaussian  =  Double.NaN;  [CE]  variable  random  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  nextGaussian  =  Double.NaN;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	nextGaussian  =  Double.NaN;	  random    =    Double.NaN;    nextGaussian    =    Double.NaN;    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	2	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.sin(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  FastMath.sin(nextGaussian);	  mutator    =    FastMath.sin(nextGaussian);    	compilable	  [FE]  AssertionError  	38	3	replace
12	[BUG]  [BUGGY]  random  =  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.sin(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  FastMath.sin(nextGaussian);	  mutator    =    FastMath.sin(nextGaussian);    	compilable	  [FE]  AssertionError  	38	3	replace
13	[BUG]  [BUGGY]  nextGaussian  =  FastMath.sin(nextGaussian);  [CE]  variable  random  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  nextGaussian  =  FastMath.sin(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	nextGaussian  =  FastMath.sin(nextGaussian);	  mutator    =    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	38	None	replace
14	[BUG]  [BUGGY]  nextGaussian  =  nextGaussian  +  1;  [CE]  variable  random  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  nextGaussian  =  nextGaussian  +  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	nextGaussian  =  nextGaussian  +  1;	  random    =    nextGaussian    +    1;    nextGaussian    =    nextGaussian    +    1;    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	14	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Math.pow(0,  nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  Math.pow(0,  nextGaussian);	  random    =    Math.pow(0,    alpha);    	compilable	  [FE]  AssertionError  	34	6	replace
16	[BUG]  [BUGGY]  random  =  Math.pow(0,  nextGaussian);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Math.pow(0,  nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Math.pow(0,  nextGaussian);	  random    =    Math.pow(0,    alpha);    	compilable	  [FE]  AssertionError  	34	6	replace
17	[BUG]  [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    FastMath.cos(nextGaussian);    nextGaussian    =    Double.NaN;    random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	18	None	add
18	[BUG]  [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  Random  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  Random  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    FastMath.cos(nextGaussian);    nextGaussian    =    Double.NaN;    Random  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
19	[BUG]  [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  nextGaussian  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  nextGaussian  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    FastMath.cos(nextGaussian);    nextGaussian    =    Double.NaN;    nextGaussian  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	18	None	add
20	[BUG]  [BUGGY]  Random  random  =  nextGaussian  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  Random  random  =  nextGaussian  +  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	Random  random  =  nextGaussian  +  1;	  random    =    nextGaussian    +    1;    Random    random    =    nextGaussian    +    1;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
21	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.log(nextGaussian);  [CE]  variable  random  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  nextGaussian  =  random  *  FastMath.log(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  random  *  FastMath.log(nextGaussian);	  double    nextGaussian    =    nextGaussian    *    FastMath.log(nextGaussian);    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	25	None	replace
22	[BUG]  [BUGGY]  double  nextGaussian  =  random  *  FastMath.log(secondGaussian);  [CE]  cannot  find  symbol  secondGaussian  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  nextGaussian  =  random  *  FastMath.log(secondGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  random  *  FastMath.log(secondGaussian);	  double    nextGaussian    =    nextGaussian    *    FastMath.log(nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  secondGaussian	25	None	replace
23	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }  [CE]  cannot  find  symbol  y  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	if(Double.isNaN(nextGaussian)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }	  if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(2    *    FastMath.PI);    }    	non-compiled	[CE]  cannot  find  symbol  y	32	None	replace
24	[BUG]  [BUGGY]  random  =  x  +  1;  [CE]  cannot  find  symbol  x  [FE]        AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  x  +  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  x  +  1;	  random    =    random    +    1;    	non-compiled	[CE]  cannot  find  symbol  x	30	None	replace
25	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  y);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  x  *  FastMath.sin(nextGaussian,  y);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	10	None	replace
26	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y,  alpha);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  y,  alpha);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	10	None	replace
27	[BUG]  [BUGGY]  random  =  nextGaussian  +  2;  random  =  nextGaussian  +  2;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  +  2;  random  =  nextGaussian  +  2;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    +    2;    random  =  nextGaussian  +  2;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	26	None	add
28	[BUG]  [BUGGY]  random  =  nextGaussian  +  2;  nextGaussian  =  nextGaussian  +  2;  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  +  2;  nextGaussian  =  nextGaussian  +  2;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    +    2;    nextGaussian  =  nextGaussian  +  2;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	26	None	add
29	[BUG]  [BUGGY]  random  =  nextGaussian  +  2;  Random  random  =  nextGaussian  +  2;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  +  2;  Random  random  =  nextGaussian  +  2;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    +    2;    Random  random  =  nextGaussian  +  2;	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
30	[BUG]  [BUGGY]  random  =  0;  random  =  0;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  0;  random  =  0;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    0;    random  =  0;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	8	None	add
31	[BUG]  [BUGGY]  random  =  0;  Random  random  =  0;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  0;  Random  random  =  0;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    0;    Random  random  =  0;	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
32	[BUG]  [BUGGY]  random  =  0;  nextGaussian  =  0;  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  0;  nextGaussian  =  0;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    0;    nextGaussian  =  0;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	8	None	add
33	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  random  =  Double.POSITIVE_INFINITY;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY;  random  =  Double.POSITIVE_INFINITY;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.POSITIVE_INFINITY;    random  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	6	None	add
34	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  Random  random  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY;  Random  random  =  Double.POSITIVE_INFINITY;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.POSITIVE_INFINITY;    Random  random  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
35	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	6	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  4;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  nextGaussian  /  4;	  random    =    nextGaussian    /    1;    	compilable	  [FE]  AssertionError  	37	6	replace
37	[BUG]  [BUGGY]  random  =  nextGaussian  /  4;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  4;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  nextGaussian  /  4;	  random    =    nextGaussian    /    1;    	compilable	  [FE]  AssertionError  	37	6	replace
38	[BUG]  [BUGGY]  double  mutator  =  Double.parseDouble(x,  y);  [CE]  cannot  find  symbol  x  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  mutator  =  Double.parseDouble(x,  y);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  mutator  =  Double.parseDouble(x,  y);	  mutator    =    Double.parseDouble(x,    y);    	non-compiled	[CE]  cannot  find  symbol  x	4	None	replace
39	[BUG]  [BUGGY]  random  =  Double.parseDouble(x,  y);  [CE]  cannot  find  symbol  x  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.parseDouble(x,  y);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Double.parseDouble(x,  y);	  mutator    =    Double.parseDouble(x,    y);    	non-compiled	[CE]  cannot  find  symbol  x	4	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  Double.POSITIVE_INFINITY  +  1;	  random    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionError  	7	5	replace
41	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Double.POSITIVE_INFINITY  +  1;	  random    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionError  	7	5	replace
42	[BUG]  [BUGGY]  Random  random  =  Double.NaN;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  Random  random  =  Double.NaN;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	Random  random  =  Double.NaN;	  random    =    Double.NaN;    Random    random    =    Double.NaN;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  random  =  x  *  FastMath.sin(y);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  x  *  FastMath.sin(y);	  double    random    =    x    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	11	None	replace
44	[BUG]  [BUGGY]  random  =  Math.pow(2  *  FastMath.PI,  alpha);  [CE]  cannot  find  symbol  alpha  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Math.pow(2  *  FastMath.PI,  alpha);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Math.pow(2  *  FastMath.PI,  alpha);	  random    =    Math.pow(2    *    FastMath.PI);    	non-compiled	[CE]  cannot  find  symbol  alpha	28	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Math.pow(2  *  FastMath.PI,  nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  Math.pow(2  *  FastMath.PI,  nextGaussian);	  random    =    Math.pow(2    *    FastMath.PI);    	compilable	  [FE]  AssertionError  	28	6	replace
46	[BUG]  [BUGGY]  random  =  Math.pow(2  *  FastMath.PI,  nextGaussian);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Math.pow(2  *  FastMath.PI,  nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Math.pow(2  *  FastMath.PI,  nextGaussian);	  random    =    Math.pow(2    *    FastMath.PI);    	compilable	  [FE]  AssertionError  	28	6	replace
47	[BUG]  [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  random  =  FastMath.cos(nextGaussian);  naN  =  Double.NaN;  [CE]  cannot  find  symbol  naN  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  random  =  FastMath.cos(nextGaussian);  naN  =  Double.NaN;  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    FastMath.cos(nextGaussian);    nextGaussian    =    Double.NaN;    random  =  FastMath.cos(nextGaussian);  naN  =  Double.NaN;	  	non-compiled	[CE]  cannot  find  symbol  naN	18	None	add
48	[BUG]  [BUGGY]  random  =  nextGaussian  /  1;  random  =  nextGaussian  /  2;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  /  1;  random  =  nextGaussian  /  2;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    /    1;    random  =  nextGaussian  /  2;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	36	None	add
49	[BUG]  [BUGGY]  random  =  0;  Random  r  =  0;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  0;  Random  r  =  0;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    0;    Random  r  =  0;	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
50	[BUG]  [BUGGY]  random  =  Math.pow(2  *  FastMath.PI,  y);  [CE]  cannot  find  symbol  y  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Math.pow(2  *  FastMath.PI,  y);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Math.pow(2  *  FastMath.PI,  y);	  random    =    Math.pow(2    *    FastMath.PI);    	non-compiled	[CE]  cannot  find  symbol  y	28	None	replace
51	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  secondGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  secondGaussian  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY;  secondGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.POSITIVE_INFINITY;    secondGaussian  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  cannot  find  symbol  secondGaussian	6	None	add
52	[BUG]  [BUGGY]  double  mutator  =  Math.pow(10.0,  alpha);  [CE]  cannot  find  symbol  alpha  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  mutator  =  Math.pow(10.0,  alpha);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  mutator  =  Math.pow(10.0,  alpha);	  mutator    =    Math.pow(10.0,    alpha);    	non-compiled	[CE]  cannot  find  symbol  alpha	35	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  *  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  nextGaussian  *  1;	  random    =    nextGaussian    /    1;    	compilable	  [FE]  AssertionError  	37	3	replace
54	[BUG]  [BUGGY]  random  =  nextGaussian  *  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  *  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  nextGaussian  *  1;	  random    =    nextGaussian    /    1;    	compilable	  [FE]  AssertionError  	37	3	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY  -  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  Double.POSITIVE_INFINITY  -  1;	  random    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionError  	7	5	replace
56	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY  -  1;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Double.POSITIVE_INFINITY  -  1;	  random    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionError  	7	5	replace
57	[BUG]  [BUGGY]  double  mutator  =  Math.pow(0,  alpha);  [CE]  cannot  find  symbol  alpha  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  mutator  =  Math.pow(0,  alpha);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  mutator  =  Math.pow(0,  alpha);	  mutator    =    Math.pow(0,    alpha);    	non-compiled	[CE]  cannot  find  symbol  alpha	5	None	replace
58	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.sin(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  random  =  y  *  FastMath.sin(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  y  *  FastMath.sin(nextGaussian);	  double    random    =    x    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	11	None	replace
59	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y  +  1);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y  +  1);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  y  +  1);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	10	None	replace
60	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.log(random);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.log(random);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.log(random);	  double    nextGaussian    =    nextGaussian    *    FastMath.log(nextGaussian);    	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	25	None	replace
61	[BUG]  [BUGGY]  random  =  nextGaussian  +  2;  next  =  nextGaussian  +  2;  [CE]  cannot  find  symbol  next  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  nextGaussian  +  2;  next  =  nextGaussian  +  2;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    +    2;    next  =  nextGaussian  +  2;	  	non-compiled	[CE]  cannot  find  symbol  next	26	None	add
62	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  next  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  next  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  Double.POSITIVE_INFINITY;  next  =  Double.POSITIVE_INFINITY;  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.POSITIVE_INFINITY;    next  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  cannot  find  symbol  next	6	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.sin(nextGaussian);  nextGaussian  =  Double.NaN;  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  FastMath.sin(nextGaussian);  nextGaussian  =  Double.NaN;	  random    =    FastMath.cos(nextGaussian);    nextGaussian    =    Double.NaN;    	compilable	  [FE]  AssertionError  	19	3	replace
64	[BUG]  [BUGGY]  random  =  FastMath.sin(nextGaussian);  nextGaussian  =  Double.NaN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.sin(nextGaussian);  nextGaussian  =  Double.NaN;  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  FastMath.sin(nextGaussian);  nextGaussian  =  Double.NaN;	  random    =    FastMath.cos(nextGaussian);    nextGaussian    =    Double.NaN;    	compilable	  [FE]  AssertionError  	19	3	replace
65	[BUG]  [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  random  =  FastMath.cos(nextGaussian);  naGaussian  =  Double.NaN;  [CE]  cannot  find  symbol  naGaussian  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {        [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  random  =  FastMath.cos(nextGaussian);  naGaussian  =  Double.NaN;  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    FastMath.cos(nextGaussian);    nextGaussian    =    Double.NaN;    random  =  FastMath.cos(nextGaussian);  naGaussian  =  Double.NaN;	  	non-compiled	[CE]  cannot  find  symbol  naGaussian	18	None	add
