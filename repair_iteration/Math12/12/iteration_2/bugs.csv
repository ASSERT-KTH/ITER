bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  random  =  Double.NaN;  random  =  Double.NaN;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  Double.NaN;  random  =  Double.NaN;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.NaN;    random  =  Double.NaN;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	add
2	[BUG]  [BUGGY]  random  =  Double.NaN;  nextGaussian  =  Double.NaN;  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  Double.NaN;  nextGaussian  =  Double.NaN;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.NaN;    nextGaussian  =  Double.NaN;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	add
3	[BUG]  [BUGGY]  random  =  Double.NaN;  Random  random  =  Double.NaN;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  Double.NaN;  Random  random  =  Double.NaN;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    Double.NaN;    Random  random  =  Double.NaN;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
4	[BUG]  [BUGGY]  mutator  =  Double.parseDouble(x,  y);  [CE]  cannot  find  symbol  mutator  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  mutator  =  Double.parseDouble(x,  y);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	mutator  =  Double.parseDouble(x,  y);	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(0,    alpha);    }    	non-compiled	[CE]  cannot  find  symbol  mutator	2	None	replace
5	[BUG]  [BUGGY]  mutator  =  Math.pow(0,  alpha);  [CE]  cannot  find  symbol  mutator  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  mutator  =  Math.pow(0,  alpha);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	mutator  =  Math.pow(0,  alpha);	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(0,    alpha);    }    	non-compiled	[CE]  cannot  find  symbol  mutator	2	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  Double.POSITIVE_INFINITY;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  Double.POSITIVE_INFINITY;	  random    =    Double.NaN;    	compilable	  [FE]  AssertionError  	6	5	replace
7	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  Double.POSITIVE_INFINITY;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Double.POSITIVE_INFINITY;	  random    =    Double.NaN;    	compilable	  [FE]  AssertionError  	6	5	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  0;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  0;	  random    =    Double.NaN;    	compilable	  [FE]  AssertionError  	6	6	replace
9	[BUG]  [BUGGY]  random  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  0;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  0;	  random    =    Double.NaN;    	compilable	  [FE]  AssertionError  	6	6	replace
10	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  y);	      double    random    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
11	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  x  *  FastMath.sin(nextGaussian);	      double    random    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
12	[BUG]  [BUGGY]  random  =  y;  [CE]  cannot  find  symbol  y  [FE]        AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  y;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  y;	  random    =    x;    	non-compiled	[CE]  cannot  find  symbol  y	4	None	replace
13	[BUG]  [BUGGY]  random  =  nextGaussian  +  1;  random  =  nextGaussian  +  1;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  nextGaussian  +  1;  random  =  nextGaussian  +  1;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    +    1;    random  =  nextGaussian  +  1;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	13	None	add
14	[BUG]  [BUGGY]  random  =  nextGaussian  +  1;  nextGaussian  =  nextGaussian  +  1;  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  nextGaussian  +  1;  nextGaussian  =  nextGaussian  +  1;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    +    1;    nextGaussian  =  nextGaussian  +  1;	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	13	None	add
15	[BUG]  [BUGGY]  random  =  nextGaussian  +  1;  Random  random  =  nextGaussian  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  nextGaussian  +  1;  Random  random  =  nextGaussian  +  1;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random    =    nextGaussian    +    1;    Random  random  =  nextGaussian  +  1;	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
16	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.cos(nextGaussian);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.cos(nextGaussian);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.cos(nextGaussian);	      double    nextGaussian    =    nextGaussian    *    FastMath.cos(x);    	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	11	None	replace
17	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.cos(y);  [CE]  cannot  find  symbol  y  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.cos(y);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.cos(y);	      double    nextGaussian    =    nextGaussian    *    FastMath.cos(x);    	non-compiled	[CE]  cannot  find  symbol  y	11	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;	      random    =    FastMath.cos(x);    nextGaussian    =    Double.NaN;    	compilable	  [FE]  AssertionError  	3	6	replace
19	[BUG]  [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  FastMath.cos(nextGaussian);  nextGaussian  =  Double.NaN;	      random    =    FastMath.cos(x);    nextGaussian    =    Double.NaN;    	compilable	  [FE]  AssertionError  	3	6	replace
20	[BUG]  [BUGGY]  random  =  FastMath.cos(y);  nextGaussian  =  Double.NaN;  [CE]  cannot  find  symbol  y  [FE]              AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  FastMath.cos(y);  nextGaussian  =  Double.NaN;  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  FastMath.cos(y);  nextGaussian  =  Double.NaN;	      random    =    FastMath.cos(x);    nextGaussian    =    Double.NaN;    	non-compiled	[CE]  cannot  find  symbol  y	3	None	replace
21	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(nextGaussian);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]        AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(nextGaussian);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.sin(nextGaussian);	      double    nextGaussian    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	10	None	replace
22	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(y);  [CE]  cannot  find  symbol  y  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(y);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.sin(y);	      double    nextGaussian    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  y	10	None	replace
23	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.cos(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  random  =  nextGaussian  *  FastMath.cos(y);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  nextGaussian  *  FastMath.cos(y);	      double    random    =    nextGaussian    *    FastMath.cos(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
24	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.log(x);  [CE]  cannot  find  symbol  x  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.log(x);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.log(x);	      double    nextGaussian    =    nextGaussian    *    FastMath.log(y);    	non-compiled	[CE]  cannot  find  symbol  x	12	None	replace
25	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.log(nextGaussian);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]              AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.log(nextGaussian);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.log(nextGaussian);	      double    nextGaussian    =    nextGaussian    *    FastMath.log(y);    	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	12	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  nextGaussian  +  2;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  nextGaussian  +  2;	  random    =    nextGaussian    +    1;    	compilable	  [FE]  AssertionError  	14	6	replace
27	[BUG]  [BUGGY]  random  =  nextGaussian  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  nextGaussian  +  2;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  nextGaussian  +  2;	  random    =    nextGaussian    +    1;    	compilable	  [FE]  AssertionError  	14	6	replace
28	[BUG]  [BUGGY]  random  =  Math.pow(2  *  FastMath.PI);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  Math.pow(2  *  FastMath.PI);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Math.pow(2  *  FastMath.PI);	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(2    *    FastMath.PI);    }    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	1	None	replace
29	[BUG]  [BUGGY]  mutator  =  Math.pow(2  *  FastMath.PI);  [CE]  cannot  find  symbol  mutator  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  mutator  =  Math.pow(2  *  FastMath.PI);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	mutator  =  Math.pow(2  *  FastMath.PI);	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(2    *    FastMath.PI);    }    	non-compiled	[CE]  cannot  find  symbol  mutator	1	None	replace
30	[BUG]  [BUGGY]  random  =  random  +  1;  [CE]  variable  random  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  random  +  1;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  random  +  1;	  random    =    nextGaussian    +    1;    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	14	None	replace
31	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  nextGaussian  *  FastMath.sin(nextGaussian);	      double    random    =    nextGaussian    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	9	None	replace
32	[BUG]  [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }  [CE]  cannot  find  symbol  x  [FE]        AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(2    *    FastMath.PI);    }    	non-compiled	[CE]  cannot  find  symbol  x	1	None	replace
33	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(y);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	double  random  =  nextGaussian  *  FastMath.sin(y);	      double    random    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
34	[BUG]  [BUGGY]  random  =  Math.pow(0,  alpha);  [CE]  cannot  find  symbol  alpha  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  Math.pow(0,  alpha);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Math.pow(0,  alpha);	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(0,    alpha);    }    	non-compiled	[CE]  cannot  find  symbol  alpha	2	None	replace
35	[BUG]  [BUGGY]  mutator  =  Math.pow(10.0,  alpha);  [CE]  cannot  find  symbol  mutator  [FE]            AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  mutator  =  Math.pow(10.0,  alpha);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	mutator  =  Math.pow(10.0,  alpha);	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(0,    alpha);    }    	non-compiled	[CE]  cannot  find  symbol  mutator	2	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  nextGaussian  /  1;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  nextGaussian  /  1;	  random    =    nextGaussian    +    1;    	compilable	  [FE]  AssertionError  	14	3	replace
37	[BUG]  [BUGGY]  random  =  nextGaussian  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  random  =  nextGaussian  /  1;  [BUGGY]    nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  nextGaussian  /  1;	  random    =    nextGaussian    +    1;    	compilable	  [FE]  AssertionError  	14	3	replace
38	[BUG]  [BUGGY]  mutator  =  FastMath.sin(nextGaussian);  [CE]  cannot  find  symbol  mutator  [FE]          AssertionError    [CONTEXT]    if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {      [BUGGY]  mutator  =  FastMath.sin(nextGaussian);  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	mutator  =  FastMath.sin(nextGaussian);	      if(nextGaussian!=    null)    {    if(Double.isNaN(x)||    Double.isNaN(y))    {    random    =    Math.pow(0,    alpha);    }    	non-compiled	[CE]  cannot  find  symbol  mutator	2	None	replace
