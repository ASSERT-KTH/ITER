bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.cos(nextGaussian);  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.cos(nextGaussian);	  final    double    x    =    nextDouble();    final    double    y    =    nextDouble();    random    =    y    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	1	None	replace
2	[BUG]  [BUGGY]  static  final  double  nextDouble  =  nextGaussian();  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  static  final  double  nextDouble  =  nextGaussian();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	static  final  double  nextDouble  =  nextGaussian();	          final    double    nextDouble    =    nextGaussian();    static    final    double    nextDouble    =    nextGaussian();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  final  double  x  =  nextGaussian();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  x  =  nextGaussian();  final  double  x  =  nextGaussian();  [BUGGY]      final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final    double    x    =    nextGaussian();    final  double  x  =  nextGaussian();	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	15	None	add
4	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  static  final  double  x  =  nextGaussian();  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  x  =  nextGaussian();  static  final  double  x  =  nextGaussian();  [BUGGY]      final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final    double    x    =    nextGaussian();    static  final  double  x  =  nextGaussian();	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
5	[BUG]  [BUGGY]  final  double  nextDouble  =  nextGaussian.nextDouble();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  nextDouble  =  nextGaussian.nextDouble();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  nextDouble  =  nextGaussian.nextDouble();	  final    double    nextDouble    =    random.nextDouble();    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
6	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextNaN();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  nextGaussian  =  nextNaN();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  nextGaussian  =  nextNaN();	  final    double    nextGaussian();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
7	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.sin(nextGaussian);  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.sin(nextGaussian);  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.sin(nextGaussian);	  final    double    x    =    nextDouble();    final    double    y    =    nextDouble();    random    =    y    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	14	None	replace
8	[BUG]  [BUGGY]  double  nextGaussian  =  random();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  double  nextGaussian  =  random();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	double  nextGaussian  =  random();	  double    nextGaussian    =    nextGaussian();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
9	[BUG]  [BUGGY]  final  double  nextDouble  =  Random.nextGaussian();  [CE]  cannot  find  symbol  Random  [FE]        StackOverflowError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  nextDouble  =  Random.nextGaussian();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  nextDouble  =  Random.nextGaussian();	  final    double    nextDouble    =    random.nextGaussian();    	non-compiled	[CE]  cannot  find  symbol  Random	12	None	replace
10	[BUG]  [BUGGY]  static  final  double  nextDouble  =  nextDouble();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  static  final  double  nextDouble  =  nextDouble();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	static  final  double  nextDouble  =  nextDouble();	          final    double    nextDouble    =    nextDouble();    static    final    double    nextDouble    =    nextDouble();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  nextGaussian  =  random.nextDouble();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  nextGaussian  =  random.nextDouble();	  final    double    nextGaussian    =    nextDouble();    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
12	[BUG]  [BUGGY]  final  double  nextGaussian  =  random.nextGaussian();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  nextGaussian  =  random.nextGaussian();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  nextGaussian  =  random.nextGaussian();	  final    double    nextGaussian();    	non-compiled	[CE]  double  cannot  be  dereferenced	18	None	replace
13	[BUG]  [BUGGY]  final  double  nextDouble  =  random.nextGaussian()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]        StackOverflowError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  nextDouble  =  random.nextGaussian()  +  1;  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  nextDouble  =  random.nextGaussian()  +  1;	  final    double    nextDouble    =    random.nextGaussian();    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
14	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  Final  double  x  =  nextGaussian();  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  x  =  nextGaussian();  Final  double  x  =  nextGaussian();  [BUGGY]      final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final    double    x    =    nextGaussian();    Final  double  x  =  nextGaussian();	  	non-compiled	[CE]  not  a  statement	15	None	add
15	[BUG]  [BUGGY]  double  nextGaussian  =  random.doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  double  nextGaussian  =  random.doubleValue()  +  1;  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	double  nextGaussian  =  random.doubleValue()  +  1;	  double    nextGaussian    =    random.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
16	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  double  nextGaussian  =  nextGaussian().doubleValue();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	double  nextGaussian  =  nextGaussian().doubleValue();	  double    nextGaussian    =    nextGaussian();    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
17	[BUG]  [BUGGY]  double  nextGaussian  =  random;  [CE]  cannot  find  symbol  x  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  double  nextGaussian  =  random;  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	double  nextGaussian  =  random;	  double    nextGaussian();    	non-compiled	[CE]  cannot  find  symbol  x	13	None	replace
18	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian;  [CE]  cannot  find  symbol  x  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  double  nextGaussian  =  nextGaussian;  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	double  nextGaussian  =  nextGaussian;	  double    nextGaussian();    	non-compiled	[CE]  cannot  find  symbol  x	13	None	replace
19	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  final  double  x  =  firstGaussian();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  x  =  nextGaussian();  final  double  x  =  firstGaussian();  [BUGGY]      final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final    double    x    =    nextGaussian();    final  double  x  =  firstGaussian();	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	15	None	add
20	[BUG]  [BUGGY]  random  =  random  *  FastMath.sin(nextGaussian);  [CE]  cannot  find  symbol  x  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  random  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	random  =  random  *  FastMath.sin(nextGaussian);	  final    double    x    =    nextDouble();    final    double    y    =    nextDouble();    random    =    y    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  x	14	None	replace
21	[BUG]  [BUGGY]  final  double  nextGaussian  =  nextGaussian.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  final  double  nextGaussian  =  nextGaussian.doubleValue();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  nextGaussian  =  nextGaussian.doubleValue();	  final    double    nextGaussian();    	non-compiled	[CE]  double  cannot  be  dereferenced	18	None	replace
22	[BUG]  [BUGGY]  double  nextGaussian  =  random.doubleValue()  /  random.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  double  nextGaussian  =  random.doubleValue()  /  random.doubleValue();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	double  nextGaussian  =  random.doubleValue()  /  random.doubleValue();	  double    nextGaussian    =    random.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
23	[BUG]  [BUGGY]  static  final  double  nextDouble  =  random();  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  static  final  double  nextDouble  =  random();  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	static  final  double  nextDouble  =  random();	          final    double    nextDouble    =    nextGaussian();    static    final    double    nextDouble    =    nextGaussian();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  random  =  random  *  FastMath.cos(nextGaussian);  [CE]  cannot  find  symbol  x  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {        [BUGGY]  random  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	random  =  random  *  FastMath.cos(nextGaussian);	  final    double    x    =    nextDouble();    final    double    y    =    nextDouble();    random    =    y    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  x	1	None	replace
