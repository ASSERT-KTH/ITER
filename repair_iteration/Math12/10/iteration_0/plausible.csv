2	[BUG]  [BUGGY]  [FE]  AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double    [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean    	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	    double  nextGaussian  =  r  *  FastMath.sin(x);		plausible		20	0
9	[BUG]  [BUGGY]  [FE]  AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double    [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean    	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	    double  nextGaussian  =  random  *  FastMath.sin(x);		plausible		20	0
11	[BUG]  [BUGGY]  [FE]  AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double    [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean    	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	    double  nextGaussian  =  r  *  FastMath.sin(alpha);		plausible		20	0
