bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  random  =  r  *  FastMath.sin(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  r  *  FastMath.sin(x);	      random    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	10	None	replace
2	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  random  =  x  *  FastMath.sin(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  x  *  FastMath.sin(r);	      random    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	10	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  random  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	6	6	replace
4	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	6	6	replace
5	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  r  *  FastMath.sin(x,  alpha);	      random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	1	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	3	3	add
7	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	3	3	add
8	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  random  =  random  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  random  =  random  *  FastMath.sin(r);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(r);    random  =  random  *  FastMath.sin(r);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	3	None	add
9	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  r  =  random  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  r  =  random  *  FastMath.sin(r);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(r);    r  =  random  *  FastMath.sin(r);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	3	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
11	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	7	3	add
12	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  random  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  random  =  random  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(alpha);    random  =  random  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	7	None	add
13	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  r  =  random  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  r  =  random  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(alpha);    r  =  random  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	7	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  x  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	8	6	replace
15	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  x  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	8	6	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	5	3	add
17	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	5	3	add
18	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(x);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    r    *    FastMath.sin(x);    r  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	5	None	add
19	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  random  =  r  *  FastMath.sin(x);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    r    *    FastMath.sin(x);    random  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  r  *  FastMath.sin(random);	  nextGaussian    =    random    *    FastMath.sin(r);    	compilable	  [FE]  AssertionError  	4	3	replace
21	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  r  *  FastMath.sin(random);	  nextGaussian    =    random    *    FastMath.sin(r);    	compilable	  [FE]  AssertionError  	4	3	replace
22	[BUG]  [BUGGY]  r  =  FastMath.sin(nextGaussian);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  r  =  FastMath.sin(nextGaussian);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  FastMath.sin(nextGaussian);	      r    =    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	2	None	replace
23	[BUG]  [BUGGY]  r  =  x  *  FastMath.sin(random);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  r  =  x  *  FastMath.sin(random);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  x  *  FastMath.sin(random);	      r    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	replace
24	[BUG]  [BUGGY]  r  =  x  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  r  =  x  *  FastMath.sin(r);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  x  *  FastMath.sin(r);	      r    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	replace
25	[BUG]  [BUGGY]  r  =  FastMath.sin(y);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  r  =  FastMath.sin(y);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  FastMath.sin(y);	      r    =    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	2	None	replace
26	[BUG]  [BUGGY]  r  =  random  *  FastMath.sin(y);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  r  =  random  *  FastMath.sin(y);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  random  *  FastMath.sin(y);	      r    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	7	6	add
28	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	7	6	add
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  x  *  FastMath.sin(r);	  nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	6	6	replace
30	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  x  *  FastMath.sin(r);	  nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	6	6	replace
31	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(random);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  random  =  x  *  FastMath.sin(random);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  x  *  FastMath.sin(random);	      random    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	10	None	replace
32	[BUG]  [BUGGY]  random  =  y  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);    [BUGGY]  random  =  y  *  FastMath.sin(x);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  y  *  FastMath.sin(x);	      random    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	10	None	replace
