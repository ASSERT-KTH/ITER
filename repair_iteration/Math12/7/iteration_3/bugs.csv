bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  final  double  alpha  =  2  *  FastMath.PI  /  y;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  final  double  alpha  =  2  *  FastMath.PI  /  y;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    /    y;    final  double  alpha  =  2  *  FastMath.PI  /  y;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	13	None	add
2	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  final  double  alpha  =  2  *  FastMath.PI  /  x;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  final  double  alpha  =  2  *  FastMath.PI  /  x;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    /    y;    final  double  alpha  =  2  *  FastMath.PI  /  x;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	13	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  FastMath.log(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  FastMath.log(x);	  final    double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	35	6	replace
4	[BUG]  [BUGGY]  final  double  alpha  =  FastMath.log(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  FastMath.log(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  FastMath.log(x);	  final    double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	35	6	replace
5	[BUG]  [BUGGY]  final  double  y  =  nextGaussian().doubleValue()  +  1;  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  y  =  nextGaussian().doubleValue()  +  1;  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  y  =  nextGaussian().doubleValue()  +  1;	  final    double    y    =    nextGaussian().doubleValue();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	15	None	replace
6	[BUG]  [BUGGY]  final  double  alpha  =  FastMath.cos(x);  final  double  alpha  =  FastMath.cos(x);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  FastMath.cos(x);  final  double  alpha  =  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    FastMath.cos(x);    final  double  alpha  =  FastMath.cos(x);	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	34	None	add
7	[BUG]  [BUGGY]  final  double  alpha  =  FastMath.cos(x);  Final  double  alpha  =  FastMath.cos(x);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  FastMath.cos(x);  Final  double  alpha  =  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    FastMath.cos(x);    Final  double  alpha  =  FastMath.cos(x);	  	non-compiled	[CE]  not  a  statement	34	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  nextDouble();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  nextDouble();	  double    alpha    =    nextGaussian();    	compilable	  [FE]  AssertionError  	19	6	replace
9	[BUG]  [BUGGY]  double  alpha  =  nextDouble();  [FE]  AssertionError  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  nextDouble();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  nextDouble();	  double    alpha    =    nextGaussian();    	compilable	  [FE]  AssertionError  	19	6	replace
10	[BUG]  [BUGGY]  double  alpha  =  random();  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  random();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  random();	  double    alpha    =    nextGaussian();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
11	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian);  double  alpha  =  x  *  FastMath.sin(nextGaussian);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian);  double  alpha  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    x    *    FastMath.sin(nextGaussian);    double  alpha  =  x  *  FastMath.sin(nextGaussian);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	10	None	add
12	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian);  Double  alpha  =  x  *  FastMath.sin(nextGaussian);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian);  Double  alpha  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    x    *    FastMath.sin(nextGaussian);    Double  alpha  =  x  *  FastMath.sin(nextGaussian);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	10	None	add
13	[BUG]  [BUGGY]  double  alpha  =  nextGaussian  *  FastMath.sin(x,  y,  random);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  nextGaussian  *  FastMath.sin(x,  y,  random);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  nextGaussian  *  FastMath.sin(x,  y,  random);	  double    alpha    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	12	None	replace
14	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian,  y);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian,  y);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.sin(nextGaussian,  y);	  double    alpha    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	12	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.sin(x);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  x  *  FastMath.sin(x);	  double    alpha    =    x    *    FastMath.sin(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	11	6	replace
16	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.sin(x);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.sin(x);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.sin(x);	  double    alpha    =    x    *    FastMath.sin(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	11	6	replace
17	[BUG]  [BUGGY]  double  alpha  =  nextGaussian();  double  alpha  =  nextGaussian();  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  nextGaussian();  double  alpha  =  nextGaussian();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    nextGaussian();    double  alpha  =  nextGaussian();	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	18	None	add
18	[BUG]  [BUGGY]  double  alpha  =  nextGaussian();  Double  alpha  =  nextGaussian();  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]      StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  nextGaussian();  Double  alpha  =  nextGaussian();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    nextGaussian();    Double  alpha  =  nextGaussian();	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	18	None	add
19	[BUG]  [BUGGY]  double  x  =  random();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  x  =  random();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  x  =  random();	  double    x    =    nextGaussian();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	20	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(x);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  x  *  FastMath.cos(x);	  double    alpha    =    random    *    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	27	6	replace
21	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.cos(x);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(x);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.cos(x);	  double    alpha    =    random    *    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	27	6	replace
22	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.cos(random);  [CE]  variable  random  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(random);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.cos(random);	  double    alpha    =    random    *    FastMath.cos(x);    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	27	None	replace
23	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  x  *  FastMath.cos(nextGaussian);	  final    double    alpha    =    nextGaussian    *    FastMath.cos(x);    timeout    	compilable	timeout	37	1	replace
24	[BUG]  [BUGGY]  final  double  alpha  =  x  *  FastMath.cos(nextGaussian);  timeout  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  x  *  FastMath.cos(nextGaussian);	  final    double    alpha    =    nextGaussian    *    FastMath.cos(x);    timeout    	compilable	timeout	37	1	replace
25	[BUG]  [BUGGY]  final  double  alpha  =  random  *  FastMath.cos(x);  [CE]  variable  random  might  not  have  been  initialized  [FE]                    AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  random  *  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  random  *  FastMath.cos(x);	  final    double    alpha    =    nextGaussian    *    FastMath.cos(x);    timeout    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	37	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x  +  1;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  3  *  FastMath.PI  /  x  +  1;	  final    double    alpha    =    3    *    FastMath.PI    /    x;    	compilable	  [FE]  AssertionError  	22	3	replace
27	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x  +  1;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  3  *  FastMath.PI  /  x  +  1;	  final    double    alpha    =    3    *    FastMath.PI    /    x;    	compilable	  [FE]  AssertionError  	22	3	replace
28	[BUG]  [BUGGY]  final  double  x  =  random.nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  x  =  random.nextDouble();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  random.nextDouble();	  final    double    x    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	32	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;	  final    double    alpha    =    2    *    FastMath.PI    /    x    +    1;    	compilable	  [FE]  AssertionError  	6	3	replace
30	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;	  final    double    alpha    =    2    *    FastMath.PI    /    x    +    1;    	compilable	  [FE]  AssertionError  	6	3	replace
31	[BUG]  [BUGGY]  final  double  y  =  random().nextGaussian();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  y  =  random().nextGaussian();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  y  =  random().nextGaussian();	  final    double    y    =    random();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	31	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  FastMath.log(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  FastMath.log(x);	  double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	17	6	replace
33	[BUG]  [BUGGY]  double  alpha  =  FastMath.log(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  FastMath.log(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  FastMath.log(x);	  double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	17	6	replace
34	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x;  final  double  alpha  =  3  *  FastMath.PI  /  x;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x;  final  double  alpha  =  3  *  FastMath.PI  /  x;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    3    *    FastMath.PI    /    x;    final  double  alpha  =  3  *  FastMath.PI  /  x;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	21	None	add
35	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x;  final  double  alpha  =  3  *  FastMath.PI  /  y;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x;  final  double  alpha  =  3  *  FastMath.PI  /  y;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    3    *    FastMath.PI    /    x;    final  double  alpha  =  3  *  FastMath.PI  /  y;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	21	None	add
36	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    /    x    +    1;    final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	5	None	add
37	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    /    x    +    1;    final  double  alpha  =  2  *  FastMath.PI  /  y  +  1;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	5	None	add
38	[BUG]  [BUGGY]  double  x  =  nextGaussian.nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  x  =  nextGaussian.nextDouble();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  x  =  nextGaussian.nextDouble();	  double    x    =    random.nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	39	None	replace
39	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  double  alpha  =  x  *  FastMath.cos(nextGaussian);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  double  alpha  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    x    *    FastMath.cos(nextGaussian);    double  alpha  =  x  *  FastMath.cos(nextGaussian);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	25	None	add
40	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  Double  alpha  =  x  *  FastMath.cos(nextGaussian);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  Double  alpha  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    x    *    FastMath.cos(nextGaussian);    Double  alpha  =  x  *  FastMath.cos(nextGaussian);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	25	None	add
41	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  long  alpha  =  x  *  FastMath.cos(nextGaussian);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  long  alpha  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    x    *    FastMath.cos(nextGaussian);    long  alpha  =  x  *  FastMath.cos(nextGaussian);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	25	None	add
42	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  nextGaussian;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  2  *  FastMath.PI  /  nextGaussian;	  final    double    alpha    =    2    *    FastMath.PI    /    random;    	compilable	timeout	30	1	replace
43	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  nextGaussian;  timeout  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  nextGaussian;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  2  *  FastMath.PI  /  nextGaussian;	  final    double    alpha    =    2    *    FastMath.PI    /    random;    	compilable	timeout	30	1	replace
44	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  y;  final  double  alpha  =  3  *  FastMath.PI  *  y;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  y;  final  double  alpha  =  3  *  FastMath.PI  *  y;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    3    *    FastMath.PI    *    y;    final  double  alpha  =  3  *  FastMath.PI  *  y;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	23	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  y;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  3  *  FastMath.PI  /  y;	  final    double    alpha    =    3    *    FastMath.PI    *    y;    	compilable	  [FE]  AssertionError  	24	6	replace
46	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  y;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  y;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  3  *  FastMath.PI  /  y;	  final    double    alpha    =    3    *    FastMath.PI    *    y;    	compilable	  [FE]  AssertionError  	24	6	replace
47	[BUG]  [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    nextGaussian    *    FastMath.cos(x);    final  double  alpha  =  nextGaussian  *  FastMath.cos(x);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	36	None	add
48	[BUG]  [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  Final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  Final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    nextGaussian    *    FastMath.cos(x);    Final  double  alpha  =  nextGaussian  *  FastMath.cos(x);	  timeout    	non-compiled	[CE]  not  a  statement	36	None	add
49	[BUG]  [BUGGY]  double  alpha  =  FastMath.cos(x);  double  alpha  =  FastMath.cos(x);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  FastMath.cos(x);  double  alpha  =  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    FastMath.cos(x);    double  alpha  =  FastMath.cos(x);	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	16	None	add
50	[BUG]  [BUGGY]  double  alpha  =  FastMath.cos(x);  Double  alpha  =  FastMath.cos(x);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  FastMath.cos(x);  Double  alpha  =  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    FastMath.cos(x);    Double  alpha  =  FastMath.cos(x);	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	16	None	add
51	[BUG]  [BUGGY]  double  alpha  =  FastMath.cos(x);  long  alpha  =  FastMath.cos(x);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  FastMath.cos(x);  long  alpha  =  FastMath.cos(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    FastMath.cos(x);    long  alpha  =  FastMath.cos(x);	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	16	None	add
52	[BUG]  [BUGGY]  final  double  x  =  random();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  x  =  random();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  random();	  final    double    x    =    nextGaussian();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	7	None	replace
53	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  random;  [CE]  variable  random  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  random;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  3  *  FastMath.PI  /  random;	  final    double    alpha    =    3    *    FastMath.PI    /    x;    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	22	None	replace
54	[BUG]  [BUGGY]  double  alpha  =  random  *  FastMath.cos(nextGaussian);  [CE]  variable  random  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  random  *  FastMath.cos(nextGaussian);	  double    alpha    =    x    *    FastMath.cos(nextGaussian);    timeout    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	26	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  FastMath.sin(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  FastMath.sin(x);	  double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	17	6	replace
56	[BUG]  [BUGGY]  double  alpha  =  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  FastMath.sin(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  FastMath.sin(x);	  double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	17	6	replace
57	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  random  +  1;  [CE]  variable  random  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  random  +  1;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  2  *  FastMath.PI  /  random  +  1;	  final    double    alpha    =    2    *    FastMath.PI    /    x    +    1;    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	6	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  FastMath.sin(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  FastMath.sin(x);	  final    double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	35	6	replace
59	[BUG]  [BUGGY]  final  double  alpha  =  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  FastMath.sin(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  FastMath.sin(x);	  final    double    alpha    =    FastMath.cos(x);    	compilable	  [FE]  AssertionError  	35	6	replace
60	[BUG]  [BUGGY]  final  double  y  =  random().doubleValue();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  y  =  random().doubleValue();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  y  =  random().doubleValue();	  final    double    y    =    nextGaussian().doubleValue();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	15	None	replace
61	[BUG]  [BUGGY]  final  double  x  =  random.nextGaussian();  final  double  y  =  nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  x  =  random.nextGaussian();  final  double  y  =  nextDouble();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  random.nextGaussian();  final  double  y  =  nextDouble();	  final    double    x    =    random.nextDouble();    final    double    y    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	8	None	replace
62	[BUG]  [BUGGY]  final  double  x  =  nextGaussian.nextDouble();  final  double  y  =  nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  x  =  nextGaussian.nextDouble();  final  double  y  =  nextDouble();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  nextGaussian.nextDouble();  final  double  y  =  nextDouble();	  final    double    x    =    random.nextDouble();    final    double    y    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	8	None	replace
63	[BUG]  [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  final  double  alpha  =  nextGaussian  *  FastMath.cos(y);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  final  double  alpha  =  nextGaussian  *  FastMath.cos(y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    nextGaussian    *    FastMath.cos(x);    final  double  alpha  =  nextGaussian  *  FastMath.cos(y);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	36	None	add
64	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  Final  double  alpha  =  2  *  FastMath.PI  /  y;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  Final  double  alpha  =  2  *  FastMath.PI  /  y;  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    /    y;    Final  double  alpha  =  2  *  FastMath.PI  /  y;	  	non-compiled	[CE]  not  a  statement	13	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.sin(y);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  x  *  FastMath.sin(y);	  double    alpha    =    x    *    FastMath.sin(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	11	6	replace
66	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.sin(y);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.sin(y);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.sin(y);	  double    alpha    =    x    *    FastMath.sin(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	11	6	replace
67	[BUG]  [BUGGY]  double  alpha  =  nextGaussian();  final  double  alpha  =  nextGaussian();  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  nextGaussian();  final  double  alpha  =  nextGaussian();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double    alpha    =    nextGaussian();    final  double  alpha  =  nextGaussian();	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	18	None	add
68	[BUG]  [BUGGY]  final  double  x  =  nextGaussian.nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  x  =  nextGaussian.nextDouble();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  nextGaussian.nextDouble();	  final    double    x    =    random.nextDouble();    final    double    y    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	8	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(y);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  x  *  FastMath.cos(y);	  double    alpha    =    x    *    FastMath.cos(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	26	6	replace
70	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.cos(y);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  alpha  =  x  *  FastMath.cos(y);  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.cos(y);	  double    alpha    =    x    *    FastMath.cos(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	26	6	replace
71	[BUG]  [BUGGY]  double  x  =  random.nextGaussian();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  double  x  =  random.nextGaussian();  [BUGGY]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  x  =  random.nextGaussian();	  double    x    =    random.nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	39	None	replace
72	[BUG]  [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  final  double  alpha  =  nextGaussian  *  FastMath.sin(x);  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();      [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  final  double  alpha  =  nextGaussian  *  FastMath.sin(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    nextGaussian    *    FastMath.cos(x);    final  double  alpha  =  nextGaussian  *  FastMath.sin(x);	  timeout    	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	36	None	add
