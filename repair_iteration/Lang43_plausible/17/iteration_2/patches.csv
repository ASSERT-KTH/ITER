bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    i++)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	127	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    i++)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	127	None	replace
3	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  stripCustom.append(',');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    i++)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	127	None	replace
4	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  stripCustom.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  stripCustom.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  stripCustom.length();  i++)  {  stripCustom.append(',');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    i++)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	127	None	replace
5	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    0)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	98	None	replace
6	[BUG]  [BUGGY]  if(c.getIndex()  <  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.getIndex()  <  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.getIndex()  <  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    0)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	98	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  origFormats.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  origFormats.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  origFormats.length();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length;  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
10	[BUG]  [BUGGY]  toPattern  =  insertFormats(c[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(c[pos.getIndex()]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c[pos.getIndex()]);	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
11	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(c[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(c[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(c[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
12	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty()    &&    toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	111	None	replace
13	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty()  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty()  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(!stripCustom.isEmpty()  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty()    &&    toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	111	None	replace
14	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  ||  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty()    &&    toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	111	None	replace
15	[BUG]  [BUGGY]  pos  =  insertFormats(stripCustom,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(stripCustom,  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(stripCustom,  origFormats);	  pos    =    insertFormats(origFormats,    stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
16	[BUG]  [BUGGY]  pos  =  insertFormats(c,  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c,  stripCustom);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  stripCustom);	  pos    =    insertFormats(origFormats,    stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
17	[BUG]  [BUGGY]  pos  =  insertFormats(pattern,  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(pattern,  stripCustom);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern,  stripCustom);	  pos    =    insertFormats(origFormats,    stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
18	[BUG]  [BUGGY]  pos  =  insertFormats(destCustom,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(destCustom,  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(destCustom,  origFormats);	  pos    =    insertFormats(origFormats,    stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
19	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start  +  1);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start  +  1);	  pos.setIndex(index    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
20	[BUG]  [BUGGY]  pos.setIndex(index  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  2);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  2);	  pos.setIndex(index    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
21	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  '/')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  '/')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  '/')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '/')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
22	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '/')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
23	[BUG]  [BUGGY]  if(stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '/')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
24	[BUG]  [BUGGY]  if(c.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    ==    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
25	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
26	[BUG]  [BUGGY]  pos  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
27	[BUG]  [BUGGY]  int  index  =  indexOf(c,  pattern[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c,  pattern[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  pattern[pos.getIndex()  ]);	  int    index    =    indexOf(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	121	None	replace
28	[BUG]  [BUGGY]  int  index  =  indexOf(c,  origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c,  origFormats[pos.getIndex()  -  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  origFormats[pos.getIndex()  -  1]);	  int    index    =    indexOf(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	121	None	replace
29	[BUG]  [BUGGY]  int  index  =  indexOf(c,  c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c,  c[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  c[pos.getIndex()  ]);	  int    index    =    indexOf(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	121	None	replace
30	[BUG]  [BUGGY]  int  index  =  indexOf(c,  charBuffer[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c,  charBuffer[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  charBuffer[pos.getIndex()  ]);	  int    index    =    indexOf(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	121	None	replace
31	[BUG]  [BUGGY]  pos  =  insertFormats(c.toString(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c.toString(),  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c.toString(),  pattern);	  pos    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
32	[BUG]  [BUGGY]  pos  =  insertFormats(origFormats.toString(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(origFormats.toString(),  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(origFormats.toString(),  pattern);	  pos    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
33	[BUG]  [BUGGY]  pos  =  insertFormats(c.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c.toPattern(),  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c.toPattern(),  origFormats);	  pos    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
34	[BUG]  [BUGGY]  pos  =  insertFormats(c.toString(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c.toString(),  foundDescriptions);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c.toString(),  foundDescriptions);	  pos    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
35	[BUG]  [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
36	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(pattern,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(pattern,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(pattern,  pattern);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
37	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(pattern,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(pattern,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(pattern,  origFormats);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
38	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c,  pattern);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
39	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats,  pattern);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
40	[BUG]  [BUGGY]  pos  =  insertFormats(stripCustom.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(stripCustom.toString(),  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(stripCustom.toString(),  origFormats);	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
41	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
42	[BUG]  [BUGGY]  pos  =  insertFormats(c,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c,  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  pattern);	  pos    =    insertFormats(pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	100	None	replace
43	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
44	[BUG]  [BUGGY]  if(stripCustom  ==  null  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null    ||!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
45	[BUG]  [BUGGY]  if(stripCustom  ==  null  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null    ||!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
46	[BUG]  [BUGGY]  applyPattern(toPattern,  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(toPattern,  stripCustom);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(toPattern,  stripCustom);	  applyPattern(toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
47	[BUG]  [BUGGY]  applyPattern(toPattern,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(toPattern,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(toPattern,  toPattern);	  applyPattern(toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
48	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(0);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	105	None	replace
49	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(0);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	105	None	replace
50	[BUG]  [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }	  if(toPattern!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
51	[BUG]  [BUGGY]  pos  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
52	[BUG]  [BUGGY]  toPattern  =  insertFormats(c.toString(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(c.toString(),  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c.toString(),  pattern);	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
53	[BUG]  [BUGGY]  toPattern  =  insertFormats(c.toString(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(c.toString(),  foundDescriptions);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c.toString(),  foundDescriptions);	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
54	[BUG]  [BUGGY]  toPattern  =  insertFormats(c.toString(),  left);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(c.toString(),  left);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c.toString(),  left);	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
55	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	103	None	replace
56	[BUG]  [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	103	None	replace
57	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	103	None	replace
58	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }	  if(toPattern    ==    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
59	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
60	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  'n')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  'n')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  'n')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    'n')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	128	None	replace
61	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(c);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(c);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    'n')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	128	None	replace
62	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    'n')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	128	None	replace
63	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	  pos.setIndex(index);    toPattern    =    insertFormats(super.toPattern(),    foundDescriptions);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
64	[BUG]  [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(toPattern    ==    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
65	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(toPattern    ==    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
66	[BUG]  [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(toPattern    ==    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
67	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  format);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  format);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    format);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
68	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats,  format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats,  format);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats,  format);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    format);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
69	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats,  format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats,  format);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats,  format);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    format);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
70	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(format,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(format,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(format,  origFormats);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    format);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
71	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c[pos.getIndex()  -  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c[pos.getIndex()  -  1]);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	129	None	replace
72	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()  -  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()  -  1]);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	129	None	replace
73	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	129	None	replace
74	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(fmtCount);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(fmtCount);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	  pos.setIndex(start);    toPattern    =    insertFormats(super.toPattern(),    foundDescriptions);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
75	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    ==    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	114	None	replace
76	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    ==    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	114	None	replace
77	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(foundDescriptions!=    null)    {    for(int    pos    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
78	[BUG]  [BUGGY]  toPattern  =  insertFormats(pattern.toString(),  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(pattern.toString(),  stripCustom);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(pattern.toString(),  stripCustom);	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
79	[BUG]  [BUGGY]  toPattern  =  insertFormats(pattern.toString(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(pattern.toString(),  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(pattern.toString(),  pattern);	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
80	[BUG]  [BUGGY]  ToPattern  toPattern  =  insertFormats(pattern.toString(),  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  ToPattern  toPattern  =  insertFormats(pattern.toString(),  stripCustom);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	ToPattern  toPattern  =  insertFormats(pattern.toString(),  stripCustom);	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
81	[BUG]  [BUGGY]  if(pos!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
82	[BUG]  [BUGGY]  if(i  ==  0)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(i  ==  0)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(i  ==  0)  {  if(!stripCustom.isEmpty())  {  next(pos);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
83	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(c    ==    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
84	[BUG]  [BUGGY]  if(c!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	107	None	replace
85	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	107	None	replace
86	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	107	None	replace
87	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
88	[BUG]  [BUGGY]  pos  =  insertFormats(origFormats,  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(origFormats,  c);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(origFormats,  c);	  pos    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
89	[BUG]  [BUGGY]  pos  =  insertFormats(c,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  toPattern);	  pos    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
90	[BUG]  [BUGGY]  pos  =  insertFormats(pattern,  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(pattern,  c);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern,  c);	  pos    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
92	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
93	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
94	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  elementCount;  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  elementCount;  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  elementCount;  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
95	[BUG]  [BUGGY]  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(stripCustom.toString(),  origFormats);	  toPattern    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
96	[BUG]  [BUGGY]  toPattern  =  insertFormats(origFormats.toString(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(origFormats.toString(),  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(origFormats.toString(),  pattern);	  toPattern    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
97	[BUG]  [BUGGY]  applyPattern(c,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(c,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c,  toPattern);	  applyPattern(stripCustom,    toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
98	[BUG]  [BUGGY]  applyPattern(dogFormats,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(dogFormats,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(dogFormats,  toPattern);	  applyPattern(stripCustom,    toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
99	[BUG]  [BUGGY]  applyPattern(stripCustom,  toPattern,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(stripCustom,  toPattern,  i);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom,  toPattern,  i);	  applyPattern(stripCustom,    toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
100	[BUG]  [BUGGY]  if(c  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	124	None	replace
101	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	124	None	replace
102	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  formatDescription.length();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	124	None	replace
103	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(i  +  1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty())  {  next(i  +  1);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(i  +  1);  }	  if(!stripCustom.isEmpty())    {    next(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
104	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(i)!=  '-')  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(i)!=  '-')  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(i)!=  '-')  {  next(i);  }	  if(!stripCustom.isEmpty())    {    next(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
105	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(i)  ==  '-')  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(i)  ==  '-')  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(i)  ==  '-')  {  next(i);  }	  if(!stripCustom.isEmpty())    {    next(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
106	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
107	[BUG]  [BUGGY]  applyPattern(c.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(c.toString());  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c.toString());	  applyPattern(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
108	[BUG]  [BUGGY]  applyPattern(toPattern.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(toPattern.toString());  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(toPattern.toString());	  applyPattern(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
109	[BUG]  [BUGGY]  applyPattern(pattern.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(pattern.toString());  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern.toString());	  applyPattern(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
110	[BUG]  [BUGGY]  applyPattern(stripCustom.toString(),  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(stripCustom.toString(),  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom.toString(),  toPattern);	  applyPattern(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
111	[BUG]  [BUGGY]  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);	  toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
112	[BUG]  [BUGGY]  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);	  toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
113	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
114	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
115	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
116	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  origFormats.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    stripCustom.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundFormats.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundFormats.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundFormats.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    stripCustom.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
119	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "Unreadable    format    element    at    position       "    +    start);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	113	None	replace
120	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "Unreadable    format    element    at    position       "    +    start);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	113	None	replace
121	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
122	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
123	[BUG]  [BUGGY]  applyPattern(origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(origFormats);	  applyPattern(dogFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
124	[BUG]  [BUGGY]  applyPattern(origFormats,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(origFormats,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(origFormats,  toPattern);	  applyPattern(dogFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
125	[BUG]  [BUGGY]  pos  =  insertFormats(c,  origFormats,  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c,  origFormats,  stripCustom);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  origFormats,  stripCustom);	  pos    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
126	[BUG]  [BUGGY]  pos  =  insertFormats(c,  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c,  foundDescriptions);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  foundDescriptions);	  pos    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
127	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	109	None	replace
128	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescription.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescription.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  formatDescription.size();  ++i)  {  stripCustom.append(',');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	109	None	replace
129	[BUG]  [BUGGY]  if(stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }	  if(stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
130	[BUG]  [BUGGY]  if(stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }	  if(stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
131	[BUG]  [BUGGY]  if(stripCustom.isEmpty()  ||  pattern.length()  ==  0)  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.isEmpty()  ||  pattern.length()  ==  0)  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty()  ||  pattern.length()  ==  0)  {  next(pos);  }	  if(stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
132	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c.toPattern(),  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(c.toPattern(),  origFormats);	  pos.setIndex(index);    toPattern    =    insertFormats(c.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
133	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(c.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(c.toPattern(),  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(c.toPattern(),  origFormats);	  pos.setIndex(index);    toPattern    =    insertFormats(c.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
134	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  foundDescriptions);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  foundDescriptions);	  pos.setIndex(index);    toPattern    =    insertFormats(c.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
135	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
136	[BUG]  [BUGGY]  if(foundDescriptions!=  null  ||  foundDescriptions.size()  ==  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null  ||  foundDescriptions.size()  ==  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null  ||  foundDescriptions.size()  ==  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
137	[BUG]  [BUGGY]  ||(stripCustom!=  null  &&  stripCustom.isEmpty()))  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  ||(stripCustom!=  null  &&  stripCustom.isEmpty()))  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	||(stripCustom!=  null  &&  stripCustom.isEmpty()))  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ||!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
138	[BUG]  [BUGGY]  ||!stripCustom.isEmpty())  {  next(i);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  ||!stripCustom.isEmpty())  {  next(i);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	||!stripCustom.isEmpty())  {  next(i);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ||!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
139	[BUG]  [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
140	[BUG]  [BUGGY]  if(foundDescriptions  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
141	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(stripCustom.toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(stripCustom.toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(stripCustom.toString());  }	  if(stripCustom!=    null)    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
142	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(c);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(c);  }	  if(stripCustom!=    null)    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
143	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(stripCustom);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(stripCustom);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(stripCustom);  }	  if(stripCustom!=    null)    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
144	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	91	None	replace
145	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
146	[BUG]  [BUGGY]  pos.setIndex(0);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(0);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(0);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  origFormats.size();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('[');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('[');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
149	[BUG]  [BUGGY]  int  i  =  0;  foundDescriptions.size()  >  0;  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  i  =  0;  foundDescriptions.size()  >  0;  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  i  =  0;  foundDescriptions.size()  >  0;  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
150	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(super.toPattern(),    foundDescriptions);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
151	[BUG]  [BUGGY]  applyPattern(stripCustom,  DUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(stripCustom,  DUMMY_PATTERN);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom,  DUMMY_PATTERN);	  applyPattern(DUMMY_PATTERN);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	101	None	replace
152	[BUG]  [BUGGY]  applyPattern(pattern,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(pattern,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern,  toPattern);	  applyPattern(DUMMY_PATTERN);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	101	None	replace
153	[BUG]  [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  -  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c[pos.getIndex()  -  1]);	  int    index    =    indexOf(origFormats[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
154	[BUG]  [BUGGY]  applyPattern(c,  origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(c,  origFormats[pos.getIndex()  -  1]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c,  origFormats[pos.getIndex()  -  1]);	  applyPattern(origFormats[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	125	None	replace
155	[BUG]  [BUGGY]  applyPattern(c[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(c[pos.getIndex()  -  1]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c[pos.getIndex()  -  1]);	  applyPattern(origFormats[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	125	None	replace
156	[BUG]  [BUGGY]  applyPattern(pattern,  origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(pattern,  origFormats[pos.getIndex()  -  1]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern,  origFormats[pos.getIndex()  -  1]);	  applyPattern(origFormats[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	125	None	replace
157	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
158	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
159	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  origFormats.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  origFormats.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  origFormats.length();  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length;  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
163	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c[pos.getIndex()]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(c[pos.getIndex()]);	  pos.setIndex(i);    toPattern    =    insertFormats(c[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
164	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(c[pos.getIndex()  ]);	  pos.setIndex(i);    toPattern    =    insertFormats(c[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
165	[BUG]  [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c[pos.getIndex()  -  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i);  toPattern  =  insertFormats(c[pos.getIndex()  -  1]);	  pos.setIndex(i);    toPattern    =    insertFormats(c[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
166	[BUG]  [BUGGY]  pos  =  insertFormats(pattern,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(pattern,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern,  toPattern);	  pos    =    insertFormats(pattern,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
167	[BUG]  [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	110	None	replace
168	[BUG]  [BUGGY]  if(foundDescriptions  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	110	None	replace
169	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty())  {  next(1);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(1);  }	  if(!stripCustom.isEmpty())    {    next(0);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
170	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(1);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(1);  }	  if(!stripCustom.isEmpty())    {    next(0);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
171	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(1);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(1);  }	  if(!stripCustom.isEmpty())    {    next(0);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
172	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  '-')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  '-')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)  ==  '-')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '-')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
173	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '-')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
174	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(c);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(c);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '-')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
175	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
176	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
177	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i].toString());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i].toString());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
179	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  patternFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  patternFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  patternFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i].toString());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
180	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i].toString());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
181	[BUG]  [BUGGY]  applyPattern(c,  toPattern[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(c,  toPattern[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c,  toPattern[pos.getIndex()  ]);	  applyPattern(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
182	[BUG]  [BUGGY]  applyPattern(ptr,  c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(ptr,  c[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(ptr,  c[pos.getIndex()  ]);	  applyPattern(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
183	[BUG]  [BUGGY]  applyPattern(pattern,  c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(pattern,  c[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern,  c[pos.getIndex()  ]);	  applyPattern(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
184	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty()    ||    pattern    ==    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	123	None	replace
185	[BUG]  [BUGGY]  if(stripCustom!=  null  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty()    ||    pattern    ==    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	123	None	replace
186	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  origFormats);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
187	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(c,  origFormats);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
188	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
189	[BUG]  [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c,  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c,  foundDescriptions);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i);  toPattern  =  insertFormats(c,  foundDescriptions);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
190	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
192	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
193	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
194	[BUG]  [BUGGY]  applyPattern(p[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(p[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(p[pos.getIndex()  ]);	  applyPattern(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
195	[BUG]  [BUGGY]  applyPattern(stripCustom,  c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(stripCustom,  c[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom,  c[pos.getIndex()  ]);	  applyPattern(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
196	[BUG]  [BUGGY]  applyPattern(pattern,  toPattern[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(pattern,  toPattern[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern,  toPattern[pos.getIndex()  ]);	  applyPattern(pattern,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
197	[BUG]  [BUGGY]  applyPattern(origFormats,  pattern[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(origFormats,  pattern[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(origFormats,  pattern[pos.getIndex()  ]);	  applyPattern(pattern,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
198	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c[pos.getIndex()  ]);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
199	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()  ]);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
200	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  ]);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
201	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	92	None	replace
202	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	92	None	replace
203	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  next(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  0)  {  next(c);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  0)  {  next(c);  }	  if(pos.getIndex()    >=    0)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	99	None	replace
204	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	115	None	replace
205	[BUG]  [BUGGY]  pos  =  insertFormats(pattern,  format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(pattern,  format);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern,  format);	  pos    =    insertFormats(format);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	118	None	replace
206	[BUG]  [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  +  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  +  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c[pos.getIndex()  +  1]);	  int    index    =    indexOf(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
207	[BUG]  [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  -  start]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  -  start]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c[pos.getIndex()  -  start]);	  int    index    =    indexOf(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
209	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
210	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(origFormats[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
211	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  patternFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  patternFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  patternFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
212	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    pos    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	104	None	replace
213	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
214	[BUG]  [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
215	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }  else  {  super.toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
216	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  stripCustom);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  stripCustom);	  pos.setIndex(index    +    1);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
217	[BUG]  [BUGGY]  int  i  =  0;  foundDescriptions.size()  >  0;  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  i  =  0;  foundDescriptions.size()  >  0;  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  i  =  0;  foundDescriptions.size()  >  0;  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('N');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('N');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('N');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
219	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
220	[BUG]  [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
221	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
222	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(1);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(1);  }	  if(!stripCustom.isEmpty())    {    next(0);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
223	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty())  {  next(1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(0);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
224	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(0);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(0);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(0);  }	  if(!stripCustom.isEmpty())    {    next(0);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
225	[BUG]  [BUGGY]  applyPattern(stripCustom,  toPattern[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(stripCustom,  toPattern[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom,  toPattern[pos.getIndex()  ]);	  applyPattern(stripCustom,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	108	None	replace
226	[BUG]  [BUGGY]  applyPattern(ptr,  origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(ptr,  origFormats[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(ptr,  origFormats[pos.getIndex()  ]);	  applyPattern(stripCustom,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	108	None	replace
227	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
228	[BUG]  [BUGGY]  ||  stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  ||  stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	||  stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
229	[BUG]  [BUGGY]  if(stripCustom.length()  ==  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.length()  ==  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.length()  ==  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
230	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  origFormats);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
231	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  pattern);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
232	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  pattern);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
233	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats,  pattern);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
234	[BUG]  [BUGGY]  pos.setIndex(indent);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(indent);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(indent);	  pos.setIndex(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
235	[BUG]  [BUGGY]  pos.setIndex(i  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  2);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  2);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
236	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('[');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('[');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
238	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  i++)  {  stripCustom.append('[');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('[');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
239	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  i++)  {  stripCustom.append('[');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('[');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
240	[BUG]  [BUGGY]  pos  =  insertFormats(pattern,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(pattern,  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern,  pattern);	  pos    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	116	None	replace
241	[BUG]  [BUGGY]  pos  =  insertFormats(origFormats,  pattern,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(origFormats,  pattern,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(origFormats,  pattern,  toPattern);	  pos    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	116	None	replace
242	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
244	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  i++)  {  stripCustom.append('n');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
245	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  i++)  {  stripCustom.append('n');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
246	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
247	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
248	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
249	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  ++i)  {  stripCustom.append('n');  }	  if(c    ==    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
250	[BUG]  [BUGGY]  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
251	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
252	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
253	[BUG]  [BUGGY]  if(stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
254	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE    ||    pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	112	None	replace
255	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE    ||    pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	112	None	replace
256	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE    ||    pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	112	None	replace
257	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE    ||    pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	112	None	replace
258	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
259	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
260	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
261	[BUG]  [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	81	None	replace
262	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions  ==  null)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	81	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundFormats.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  foundFormats.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundFormats.size();  ++i)  {  stripCustom.append(',');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    stripCustom.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
264	[BUG]  [BUGGY]  pos  =  insertFormats(pattern,  formatDescription);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(pattern,  formatDescription);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern,  formatDescription);	  pos    =    insertFormats(pattern,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
265	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
266	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(pattern,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(pattern,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(pattern,  origFormats);	  pos.setIndex(index);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
267	[BUG]  [BUGGY]  applyPattern(descCustom.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(descCustom.toString());  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(descCustom.toString());	  applyPattern(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
268	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append('[');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('[');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
269	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(formatDescription!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(formatDescription!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	109	None	replace
270	[BUG]  [BUGGY]  pos  =  insertFormats(dupCustom,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(dupCustom,  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(dupCustom,  pattern);	  pos    =    insertFormats(pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	100	None	replace
271	[BUG]  [BUGGY]  if(formatDescription  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(formatDescription  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(formatDescription  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
272	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	115	None	replace
273	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	115	None	replace
274	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
275	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
276	[BUG]  [BUGGY]  if(stripCustom.length()  ==  0)  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.length()  ==  0)  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.length()  ==  0)  {  next(pos);  }	  if(stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
277	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.length()  >  0)  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.length()  >  0)  {  next(pos);  }	  if(stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
278	[BUG]  [BUGGY]  if(stripCustom!=  null  ||  stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null  ||  stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  ||  stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
279	[BUG]  [BUGGY]  if(c!=  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	124	None	replace
280	[BUG]  [BUGGY]  if(c  ==  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c  ==  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	124	None	replace
281	[BUG]  [BUGGY]  pos.setIndex(i  +  1,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1,  pattern);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
282	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c,  END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c,  END_FE);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(c,  END_FE);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
283	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c,  DUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(c,  DUMMY_PATTERN);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(c,  DUMMY_PATTERN);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
284	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  DUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  DUMMY_PATTERN);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c,  DUMMY_PATTERN);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
285	[BUG]  [BUGGY]  if(pattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pattern!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
286	[BUG]  [BUGGY]  TokenBuffer  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  TokenBuffer  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	TokenBuffer  toPattern  =  insertFormats(stripCustom.toString(),  pattern);	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
287	[BUG]  [BUGGY]  TokenBuffer  toPattern  =  insertFormats(pattern.toString(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  TokenBuffer  toPattern  =  insertFormats(pattern.toString(),  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	TokenBuffer  toPattern  =  insertFormats(pattern.toString(),  pattern);	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
288	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
289	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
290	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
291	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  findDescriptions.size();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  ArrayList  foundDescriptions  =  findDescriptions.size();  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	ArrayList  foundDescriptions  =  findDescriptions.size();	  if(foundDescriptions!=    null)    {    for(int    pos    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	104	None	replace
292	[BUG]  [BUGGY]  if(index  >=  0)  {  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(index  >=  0)  {  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(index  >=  0)  {  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  pos.setIndex(index    +    1);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
293	[BUG]  [BUGGY]  pos  =  insertFormats(c,  END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c,  END_FE);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  END_FE);	  pos    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
294	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	103	None	replace
295	[BUG]  [BUGGY]  if(format  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
296	[BUG]  [BUGGY]  if(c.getIndex()  <  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.getIndex()  <  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.getIndex()  <  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
297	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append('n');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
298	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(pattern,  format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(pattern,  format);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(pattern,  format);	  pos.setIndex(start);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
299	[BUG]  [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(pattern,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(pattern,  origFormats);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i);  toPattern  =  insertFormats(pattern,  origFormats);	  pos.setIndex(start);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
300	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
301	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
302	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  findDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	81	None	replace
303	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  ==  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE    ||    pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	112	None	replace
304	[BUG]  [BUGGY]  if(super.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(super.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(super.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  }	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
305	[BUG]  [BUGGY]  if(stripCustom!=  null  ||!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null  ||!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  ||!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(0);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
306	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "Unreadable    format    element    at    position       "    +    start);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	113	None	replace
307	[BUG]  [BUGGY]  if(c.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position "  +  start);  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "Unreadable    format    element    at    position       "    +    start);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	113	None	replace
308	[BUG]  [BUGGY]  if(c.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
309	[BUG]  [BUGGY]  if(c!=  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c!=  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	107	None	replace
310	[BUG]  [BUGGY]  if(c  ==  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c  ==  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null)  {  if(formatDescription  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	107	None	replace
311	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
312	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i].toString());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
313	[BUG]  [BUGGY]  if(c.length()  >  0)  {  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString()  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.length()  >  0)  {  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString()  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.length()  >  0)  {  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString()	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
314	[BUG]  [BUGGY]  if(pos.getIndex()  >  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
315	[BUG]  [BUGGY]  if(c.length()  >  0)  {  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.length()  >  0)  {  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.length()  >  0)  {  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
316	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
317	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(i);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    'n')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	128	None	replace
318	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(p);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(p);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(p);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    'n')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	128	None	replace
319	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
320	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
321	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    stripCustom.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
322	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
323	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null)  {  next(pos);  }	  if(stripCustom!=    null)    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
324	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(0);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(0);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(0);  }	  if(stripCustom!=    null)    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
325	[BUG]  [BUGGY]  int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  orderedDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
327	[BUG]  [BUGGY]  pos  =  insertFormats(format,  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(format,  foundDescriptions);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format,  foundDescriptions);	  pos    =    insertFormats(format,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	117	None	replace
328	[BUG]  [BUGGY]  pos  =  insertFormats(c,  DUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(c,  DUMMY_PATTERN);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  DUMMY_PATTERN);	  pos    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
329	[BUG]  [BUGGY]  pos  =  insertFormats(padding);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(padding);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(padding);	  pos    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
330	[BUG]  [BUGGY]  applyPattern(DUMMY_PATTERN,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(DUMMY_PATTERN,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(DUMMY_PATTERN,  toPattern);	  applyPattern(stripCustom,    toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
331	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(i);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '-')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
332	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(p);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(p);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(p);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '-')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
333	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(c,  origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
334	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(formatDescription!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(formatDescription!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	119	None	replace
335	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(1);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(1);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(1);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(0);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	105	None	replace
336	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(0);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(0);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(0);  }	  if(!stripCustom.isEmpty())    {    next(0);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
337	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(i);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '/')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
338	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(p);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(p);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(p);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '/')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
339	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    0)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	99	None	replace
340	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	91	None	replace
341	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
342	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    i++)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	127	None	replace
343	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    i++)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	127	None	replace
344	[BUG]  [BUGGY]  int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
345	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
346	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
347	[BUG]  [BUGGY]  toPattern  =  insertFormats(c.toString(),  fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(c.toString(),  fmtCount);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c.toString(),  fmtCount);	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
348	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
349	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(i);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
350	[BUG]  [BUGGY]  pos  =  insertFormats(format.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(format.toString(),  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format.toString(),  origFormats);	  pos    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
351	[BUG]  [BUGGY]  pos  =  insertFormats(pattern.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(pattern.toString(),  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern.toString(),  origFormats);	  pos    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
352	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
353	[BUG]  [BUGGY]  int  index  =  indexOf(c,  END_FE,  origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c,  END_FE,  origFormats[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  END_FE,  origFormats[pos.getIndex()  ]);	  int    index    =    indexOf(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	121	None	replace
354	[BUG]  [BUGGY]  int  index  =  indexOf(c,  DUMMY_PATTERN[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c,  DUMMY_PATTERN[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  DUMMY_PATTERN[pos.getIndex()  ]);	  int    index    =    indexOf(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	121	None	replace
355	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
356	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(i);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
357	[BUG]  [BUGGY]  int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
358	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  next(c,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
359	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next();  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next();  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next();  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern!=    null)    {    next(0);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	106	None	replace
360	[BUG]  [BUGGY]  int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
361	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
362	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  orderedDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
363	[BUG]  [BUGGY]  applyPattern(pattern,  ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(pattern,  ESCAPED_QUOTE);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern,  ESCAPED_QUOTE);	  applyPattern(DUMMY_PATTERN);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	101	None	replace
364	[BUG]  [BUGGY]  if(origFormats!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(origFormats!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(origFormats!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
365	[BUG]  [BUGGY]  if(super.isEmpty())  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(super.isEmpty())  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(super.isEmpty())  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
366	[BUG]  [BUGGY]  toPattern  =  insertFormats(format.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(format.toString(),  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(format.toString(),  origFormats);	  toPattern    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
367	[BUG]  [BUGGY]  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	&&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ||!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
368	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    stripCustom.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
369	[BUG]  [BUGGY]  applyPattern(toPattern,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(toPattern,  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(toPattern,  pattern);	  applyPattern(stripCustom,    toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
370	[BUG]  [BUGGY]  applyPattern(descCustom,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(descCustom,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(descCustom,  toPattern);	  applyPattern(stripCustom,    toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
371	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(c);  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "Unreadable    format    element    at    position       "    +    start);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	113	None	replace
372	[BUG]  [BUGGY]  if(pos.getIndex()  <  =  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  =  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  =  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
373	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
374	[BUG]  [BUGGY]  applyPattern(stripCustom,  origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(stripCustom,  origFormats[pos.getIndex()  -  1]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom,  origFormats[pos.getIndex()  -  1]);	  applyPattern(stripCustom,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	108	None	replace
375	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
376	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
377	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
378	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	91	None	replace
379	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '-')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
380	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  format);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(pattern,  format);	  pos.setIndex(i    +    1);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
381	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    pos    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	104	None	replace
382	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
383	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
384	[BUG]  [BUGGY]  if(pos.getIndex()  <  =  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  =  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  =  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	115	None	replace
385	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  toPattern  =  insertFormats(c.toString(),  pattern);  }	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
386	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	ArrayList  <  String>  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	81	None	replace
387	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern.length()  ==  0)  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern.length()  ==  0)  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  pattern.length()  ==  0)  {  next(i);  }	  if(!stripCustom.isEmpty())    {    next(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
388	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.length()  >  0)  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.length()  >  0)  {  next(i);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  pattern.length()  >  0)  {  next(i);  }	  if(!stripCustom.isEmpty())    {    next(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
389	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  }	  if(!stripCustom.isEmpty())    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
390	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(p);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(p);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(p);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
391	[BUG]  [BUGGY]  if(c.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    0)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	98	None	replace
392	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(c,  END_FE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  next(c,  END_FE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(c,  END_FE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    0)    {    next(c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	98	None	replace
393	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    stripCustom.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
394	[BUG]  [BUGGY]  char[]  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  char[]  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	char[]  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
395	[BUG]  [BUGGY]  char[]  foundDescriptions  =  foundDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  char[]  foundDescriptions  =  foundDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	char[]  foundDescriptions  =  foundDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
396	[BUG]  [BUGGY]  int  i  =  0;  foundDescriptions.size()  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  i  =  0;  foundDescriptions.size()  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  i  =  0;  foundDescriptions.size()  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
397	[BUG]  [BUGGY]  if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(pos);  }	  if(stripCustom!=    null)    {    if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
398	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
399	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.length()  >  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.length()  >  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
400	[BUG]  [BUGGY]  if(stripCustom.length()  <  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.length()  <  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.length()  <  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
401	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(0);  }	  if(toPattern!=    null)    {    next(0);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	106	None	replace
402	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    'n')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	128	None	replace
403	[BUG]  [BUGGY]  applyPattern(c,  pattern.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(c,  pattern.toString());  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c,  pattern.toString());	  applyPattern(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
404	[BUG]  [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null  ||  formatDescription.length()  ==  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	103	None	replace
405	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	ArrayList  <  String>  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	103	None	replace
406	[BUG]  [BUGGY]  if(pos.getIndex()  <  =  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  =  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  =  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
407	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(stripCustom);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0)  {  next(stripCustom);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(stripCustom);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    <    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
408	[BUG]  [BUGGY]  pos  =  insertFormats(format,  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(format,  stripCustom);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format,  stripCustom);	  pos    =    insertFormats(origFormats,    stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
409	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(0);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	105	None	replace
410	[BUG]  [BUGGY]  if(formatDescription!=  null  &&  formatDescription.length()  >  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(formatDescription!=  null  &&  formatDescription.length()  >  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(formatDescription!=  null  &&  formatDescription.length()  >  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
411	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  pattern.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }	  if(!stripCustom.isEmpty()    &&    stripCustom.charAt(pos.getIndex()    -    1)!=    '/')    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
412	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
413	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
414	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  elements.size();  i++)  {  stripCustom.append(elements[i]);  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(elements[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
415	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  next(stripCustom);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >=  0)  {  next(stripCustom);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  0)  {  next(stripCustom);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    0)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	92	None	replace
416	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
417	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(pattern.toString(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  insertFormats(pattern.toString(),  pattern);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  toPattern  =  insertFormats(pattern.toString(),  pattern);  }	  if(stripCustom!=    null)    {    toPattern    =    insertFormats(stripCustom.toString(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	126	None	replace
418	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
419	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
420	[BUG]  [BUGGY]  if(stripCustom!=  null  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty()    &&    toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	111	None	replace
421	[BUG]  [BUGGY]  pos  =  insertFormats(format,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(format,  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format,  pattern);	  pos    =    insertFormats(format,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	117	None	replace
422	[BUG]  [BUGGY]  pos  =  insertFormats(format,  origFormats,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(format,  origFormats,  pattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format,  origFormats,  pattern);	  pos    =    insertFormats(format,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	117	None	replace
423	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern  ==  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern  ==  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  pattern  ==  null)  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(0);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
424	[BUG]  [BUGGY]  applyPattern(stripCustom.toString(),  c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  applyPattern(stripCustom.toString(),  c[pos.getIndex()  ]);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom.toString(),  c[pos.getIndex()  ]);	  applyPattern(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
425	[BUG]  [BUGGY]  if(pos.getIndex()  >  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  >  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
426	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
427	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
428	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
429	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(toPattern    ==    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
430	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  pattern);	  pos.setIndex(index);    toPattern    =    insertFormats(c.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
431	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats.toPattern(),  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats.toPattern(),  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(origFormats.toPattern(),  pattern);	  pos.setIndex(index);    toPattern    =    insertFormats(c.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
432	[BUG]  [BUGGY]  if(c  ==  null  ||  formatDescription.length()  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(c  ==  null  ||  formatDescription.length()  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null  ||  formatDescription.length()  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	  if(format    ==    null?    null    :    formatDescription)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
433	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  char[]  c  =  pattern.toCharArray();  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	char[]  c  =  pattern.toCharArray();	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	124	None	replace
434	[BUG]  [BUGGY]  if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stripCustom!=    null    &&!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	122	None	replace
435	[BUG]  [BUGGY]  if(stripCustom  ==  null  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom  ==  null  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom  ==  null  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty()    ||    pattern    ==    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	123	None	replace
436	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern!=  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern!=  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  pattern!=  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty()    ||    pattern    ==    null)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	123	None	replace
437	[BUG]  [BUGGY]  int  index  =  indexOf(c,  format[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  int  index  =  indexOf(c,  format[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  format[pos.getIndex()  ]);	  int    index    =    indexOf(c,    origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	121	None	replace
438	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(foundDescriptions!=    null)    {    for(int    pos    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
439	[BUG]  [BUGGY]  char[]  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  char[]  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	char[]  foundDescriptions  =  findDescriptions.size();  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
440	[BUG]  [BUGGY]  pos  =  insertFormats(format,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos  =  insertFormats(format,  toPattern);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format,  toPattern);	  pos    =    insertFormats(format);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	118	None	replace
441	[BUG]  [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(pattern,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(pattern,  pattern);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i);  toPattern  =  insertFormats(pattern,  pattern);	  pos.setIndex(start);    toPattern    =    insertFormats(origFormats,    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
442	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(toPattern!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(c.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
443	[BUG]  [BUGGY]  toPattern  =  insertFormats(c,  stripCustom.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  toPattern  =  insertFormats(c,  stripCustom.toString(),  origFormats);  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c,  stripCustom.toString(),  origFormats);	  toPattern    =    insertFormats(c.toString(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
444	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	109	None	replace
445	[BUG]  [BUGGY]  if(format  <  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  <  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  <  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	109	None	replace
446	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    i++)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	127	None	replace
447	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }	  if(foundDescriptions!=    null)    {    for(int    i    =    0;    i    <    stripCustom.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
448	[BUG]  [BUGGY]  if(stripCustom.isEmpty()  ||  stripCustom.equals(c))  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.isEmpty()  ||  stripCustom.equals(c))  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty()  ||  stripCustom.equals(c))  {  next(pos);  }	  if(stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
449	[BUG]  [BUGGY]  if(stripCustom.isEmpty()  ||  pattern.equals( " "))  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom.isEmpty()  ||  pattern.equals( " "))  {  next(pos);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty()  ||  pattern.equals( " "))  {  next(pos);  }	  if(stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
450	[BUG]  [BUGGY]  char  index  =  indexOf(c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  char  index  =  indexOf(c[pos.getIndex()  ]);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	char  index  =  indexOf(c[pos.getIndex()  ]);	  int    index    =    indexOf(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
451	[BUG]  [BUGGY]  if(pos.getIndex()  <  0  ||  pos.getIndex()  >  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(pos.getIndex()  <  0  ||  pos.getIndex()  >  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0  ||  pos.getIndex()  >  0)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    <    END_FE    ||    pos.getIndex()    >    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	112	None	replace
452	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(0);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(0);  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(0);  }	  if(!stripCustom.isEmpty())    {    next(0);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
453	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i].toString());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
454	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    origFormats.size();    i++)    {    stripCustom.append(origFormats[i].toString());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
455	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append('n');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
456	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append( ",');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append( ",');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append( ",');  }	  if(format    ==    null?    null    :    formatDescription.toString())    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	110	None	replace
457	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append(',');  }	  for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
458	[BUG]  [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c,  END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c,  END_FE);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i);  toPattern  =  insertFormats(c,  END_FE);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
459	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c,  END_FE);  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c,  END_FE);	  pos.setIndex(i);    toPattern    =    insertFormats(c,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
460	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	119	None	replace
461	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]      next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  >=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	119	None	replace
462	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('[');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
463	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);      [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]      }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }	  if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append('[');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
