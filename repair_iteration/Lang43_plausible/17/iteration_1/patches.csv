bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c,  origFormats);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i);  toPattern  =  insertFormats(c,  origFormats);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
2	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats,  pattern);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats,  pattern);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
3	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats,  pattern);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(origFormats,  pattern);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
4	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(origFormats,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(origFormats,  pattern);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(origFormats,  pattern);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
5	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
7	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
8	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
9	[BUG]  [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
10	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
11	[BUG]  [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  new  Format[]  {  pattern  }  );  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
12	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
14	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  i  =  0;  i  <  stripCustom.size();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
15	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	      pos.setIndex(i);    toPattern    =    insertFormats(super.toPattern(),    foundDescriptions);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
16	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	      pos.setIndex(i);    toPattern    =    insertFormats(super.toPattern(),    foundDescriptions);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
17	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);	      pos.setIndex(i);    toPattern    =    insertFormats(super.toPattern(),    foundDescriptions);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
18	[BUG]  [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  int  index  =  indexOf(c[pos.getIndex()  ]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c[pos.getIndex()  ]);	      int    index    =    indexOf(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
19	[BUG]  [BUGGY]  int  index  =  indexOf(origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  int  index  =  indexOf(origFormats[pos.getIndex()  -  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(origFormats[pos.getIndex()  -  1]);	      int    index    =    indexOf(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
20	[BUG]  [BUGGY]  int  index  =  indexOf(origFormats[pos.getIndex()  +  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  int  index  =  indexOf(origFormats[pos.getIndex()  +  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(origFormats[pos.getIndex()  +  1]);	      int    index    =    indexOf(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
21	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
23	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
24	[BUG]  [BUGGY]  if(stripCustom!=  null  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
25	[BUG]  [BUGGY]  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  ||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	||!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
26	[BUG]  [BUGGY]  if(stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
27	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
28	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
30	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);	      pos.setIndex(i);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
31	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(super.toPattern(),  origFormats);	      pos.setIndex(i);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
32	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(index  +  1);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);	      pos.setIndex(index);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
33	[BUG]  [BUGGY]  pos.setIndex(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(start);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);	      pos.setIndex(index);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
34	[BUG]  [BUGGY]  if(stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom.isEmpty())  {  next(pos);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
35	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '-')  {  next(pos);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
36	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  '/')  {  next(pos);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
37	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i  +  1);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);	      pos.setIndex(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
38	[BUG]  [BUGGY]  pos.setIndex(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(0);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(0);	      pos.setIndex(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
39	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
40	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
41	[BUG]  [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
42	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
43	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
44	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
45	[BUG]  [BUGGY]  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(origFormats[pos.getIndex()]);	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
46	[BUG]  [BUGGY]  toPattern  =  insertFormats(c.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  toPattern  =  insertFormats(c.toString(),  origFormats);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	toPattern  =  insertFormats(c.toString(),  origFormats);	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
47	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
48	[BUG]  [BUGGY]  pos  =  insertFormats(c.toString(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(c.toString(),  origFormats);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c.toString(),  origFormats);	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
49	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
50	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
51	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
52	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
53	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
54	[BUG]  [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(start);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(start);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
55	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats[pos.getIndex()  ]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(origFormats[pos.getIndex()  ]);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
56	[BUG]  [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i);  toPattern  =  insertFormats(c[pos.getIndex()]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i);  toPattern  =  insertFormats(c[pos.getIndex()]);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
57	[BUG]  [BUGGY]  applyPattern(c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(c[pos.getIndex()  ]);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c[pos.getIndex()  ]);	  applyPattern(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
58	[BUG]  [BUGGY]  applyPattern(c,  origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(c,  origFormats[pos.getIndex()  ]);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(c,  origFormats[pos.getIndex()  ]);	  applyPattern(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
59	[BUG]  [BUGGY]  applyPattern(pattern,  origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(pattern,  origFormats[pos.getIndex()  ]);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern,  origFormats[pos.getIndex()  ]);	  applyPattern(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
60	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index  +  1);  toPattern  =  insertFormats(super.toPattern(),  origFormats);	      pos.setIndex(index);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
61	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  origFormats);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(c.toPattern(),  origFormats);	      pos.setIndex(index);    toPattern    =    insertFormats(super.toPattern(),    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
62	[BUG]  [BUGGY]  applyPattern(toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(toPattern);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(toPattern);	  applyPattern(stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
63	[BUG]  [BUGGY]  applyPattern(stripCustom,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(stripCustom,  toPattern);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom,  toPattern);	  applyPattern(stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
64	[BUG]  [BUGGY]  applyPattern(stripCustom.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(stripCustom.toString());  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom.toString());	  applyPattern(stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
65	[BUG]  [BUGGY]  applyPattern(dogFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(dogFormats);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(dogFormats);	  applyPattern(stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
66	[BUG]  [BUGGY]  pos  =  insertFormats(origFormats,  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(origFormats,  stripCustom);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(origFormats,  stripCustom);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
67	[BUG]  [BUGGY]  pos  =  insertFormats(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(c);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
68	[BUG]  [BUGGY]  pos  =  insertFormats(c,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(c,  origFormats);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(c,  origFormats);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
69	[BUG]  [BUGGY]  pos  =  insertFormats(pattern,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(pattern,  origFormats);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern,  origFormats);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
70	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
71	[BUG]  [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
72	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
73	[BUG]  [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
74	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i]);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
75	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(elements[i]);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
76	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(elements[i]);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
77	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  origFormats.size();  i++)  {  stripCustom.append(origFormats[i].toString());  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
78	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
79	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
80	[BUG]  [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
81	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
82	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(foundDescriptions!=  null)  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
83	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
84	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
85	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
86	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty())  {  next(i);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(i);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
87	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
88	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(0);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty())  {  next(0);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(0);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
89	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
90	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(super.toPattern(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
91	[BUG]  [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
92	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >=  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
93	[BUG]  [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
94	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(c.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
95	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats,  format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats,  format);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(i  +  1);  toPattern  =  insertFormats(origFormats,  format);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats,    origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
96	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('n');  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
97	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append('[');  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
98	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
99	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  >=  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  0)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
100	[BUG]  [BUGGY]  pos  =  insertFormats(pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(pattern);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(pattern);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
101	[BUG]  [BUGGY]  applyPattern(DUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(DUMMY_PATTERN);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(DUMMY_PATTERN);	  applyPattern(stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
102	[BUG]  [BUGGY]  applyPattern(pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(pattern);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(pattern);	  applyPattern(stripCustom);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
103	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
104	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(foundDescriptions!=  null)  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(foundDescriptions!=  null)  {  for(int  pos  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
105	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern  ==  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
106	[BUG]  [BUGGY]  if(toPattern!=  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(toPattern!=  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(toPattern!=  null)  {  next(0);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	  if(stripCustom!=    null)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    new    Format[]    {    pattern    }    );    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
107	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
108	[BUG]  [BUGGY]  applyPattern(stripCustom,  origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(stripCustom,  origFormats[pos.getIndex()  ]);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom,  origFormats[pos.getIndex()  ]);	  applyPattern(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
109	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
110	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
111	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty()  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  toPattern  ==  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
112	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE  ||  pos.getIndex()  >  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
113	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position   "  +  start);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position   "  +  start);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  END_FE)  {  next(c);  }  else  {  throw  new  IllegalArgumentException( "Unreadable  format  element  at  position   "  +  start);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
114	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  ==  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
115	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  <  0)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	  if(pos.getIndex()    >=    END_FE)    {    next(pos);    }    else    {    toPattern    =    insertFormats(stripCustom.toString(),    origFormats);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
116	[BUG]  [BUGGY]  pos  =  insertFormats(origFormats,  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(origFormats,  pattern);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(origFormats,  pattern);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
117	[BUG]  [BUGGY]  pos  =  insertFormats(format,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(format,  origFormats);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format,  origFormats);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
118	[BUG]  [BUGGY]  pos  =  insertFormats(format);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos  =  insertFormats(format);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(format);	  pos    =    insertFormats(origFormats);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
119	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
120	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    ++i)    {    stripCustom.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
121	[BUG]  [BUGGY]  int  index  =  indexOf(c,  origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  int  index  =  indexOf(c,  origFormats[pos.getIndex()  ]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	int  index  =  indexOf(c,  origFormats[pos.getIndex()  ]);	      int    index    =    indexOf(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
122	[BUG]  [BUGGY]  if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null  &&!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
123	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty()  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  ||  pattern  ==  null)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
124	[BUG]  [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(format  ==  null?  null  :  formatDescription.toString())  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }	      if(stripCustom!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    stripCustom.append(',');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
125	[BUG]  [BUGGY]  applyPattern(origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  applyPattern(origFormats[pos.getIndex()  -  1]);  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(origFormats[pos.getIndex()  -  1]);	  applyPattern(origFormats[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
126	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  toPattern  =  insertFormats(stripCustom.toString(),  pattern);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
127	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  i++)  {  stripCustom.append(',');  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
128	[BUG]  [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }  [BUGGY]    }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty()  &&  stripCustom.charAt(pos.getIndex()  -  1)!=  'n')  {  next(pos);  }	  if(!stripCustom.isEmpty())    {    next(pos);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
129	[BUG]  [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);    [BUGGY]  pos.setIndex(index);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos.setIndex(index);  toPattern  =  insertFormats(origFormats[pos.getIndex()  -  1]);	      pos.setIndex(i);    toPattern    =    insertFormats(origFormats[pos.getIndex()]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
