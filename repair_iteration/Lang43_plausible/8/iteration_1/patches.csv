bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
2	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
4	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  pattern.length()  +  1;  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	int  fmtCount  =  pattern.length()  +  1;	      int    fmtCount    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
5	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  toPattern.length();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	int  fmtCount  =  toPattern.length();	      int    fmtCount    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
6	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  pattern.length()  -  1;  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	int  fmtCount  =  pattern.length()  -  1;	      int    fmtCount    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
7	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  *  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  pattern.length()  *  2;  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	int  fmtCount  =  pattern.length()  *  2;	      int    fmtCount    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
8	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(fmtCount);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(fmtCount);	  ArrayList    foundFormats    =    new    ArrayList(0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
9	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(1);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(1);	  ArrayList    foundFormats    =    new    ArrayList(0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
10	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(6);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(6);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(6);	  ArrayList    foundFormats    =    new    ArrayList(5);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
11	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(size()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(size()  +  1);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(size()  +  1);	  ArrayList    foundFormats    =    new    ArrayList(size());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
12	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(size()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(size()  -  1);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(size()  -  1);	  ArrayList    foundFormats    =    new    ArrayList(size());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
13	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	char[]  c  =  toPattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
14	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  char[]  c  =  pattern.toCharArray()  +  1;  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	char[]  c  =  pattern.toCharArray()  +  1;	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
15	[BUG]  [BUGGY]  String[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  String[]  c  =  pattern.toCharArray();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	String[]  c  =  pattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
17	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
18	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
19	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
20	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
21	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
22	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.length()  +  1);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(toPattern.length()  +  1);	  ArrayList    foundFormats    =    new    ArrayList(toPattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
23	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.length()  -  1);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(toPattern.length()  -  1);	  ArrayList    foundFormats    =    new    ArrayList(toPattern.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
24	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
25	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
26	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
27	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
28	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
30	[BUG]  [BUGGY]  Set  foundFormats  =  new  HashSet();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Set  foundFormats  =  new  HashSet();  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Set  foundFormats  =  new  HashSet();	  List    foundFormats    =    new    ArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
31	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
32	[BUG]  [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
33	[BUG]  [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
34	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    toPatterns.iterator();    it.hasNext();)    {    appendPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
35	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    toPatterns.iterator();    it.hasNext();)    {    appendPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
36	[BUG]  [BUGGY]  Iterator  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    toPatterns.iterator();    it.hasNext();)    {    appendPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
37	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
38	[BUG]  [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  <  String>  it  =  toPattern.iterator();	      Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
39	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.iterator();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  <  String>  it  =  this.formatDescription.iterator();	      Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
40	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  <  String>  it  =  registry.iterator();	      Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
41	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.plots.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  this.plots.iterator();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  <  String>  it  =  this.plots.iterator();	      Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
42	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  toPattern.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  toPattern.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  toPattern.iterator();  it.hasNext();)  {  appendPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    toPattern.iterator();    it.hasNext();)    {    appendPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
43	[BUG]  [BUGGY]  Iterator  it  =  toPattern.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  it  =  toPattern.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  it  =  toPattern.iterator();  it.hasNext();)  {  appendPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    toPattern.iterator();    it.hasNext();)    {    appendPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
44	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i    +    1,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
45	[BUG]  [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i    +    1,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
46	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.length);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.length);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(toPattern.length);	  ArrayList    foundFormats    =    new    ArrayList(toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
47	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern,  toPattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern,  toPattern.length());  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(toPattern,  toPattern.length());	  ArrayList    foundFormats    =    new    ArrayList(toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
48	[BUG]  [BUGGY]  List  foundFormats  =  new  ArrayList(toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  List  foundFormats  =  new  ArrayList(toPattern);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	List  foundFormats  =  new  ArrayList(toPattern);	  ArrayList    foundFormats    =    new    ArrayList(toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
49	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[0];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[0];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[0];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i    +    1,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
50	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i    +    1,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
51	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
52	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  this.registry.iterator();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  <  String>  it  =  this.registry.iterator();	      Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
54	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
55	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(origFormats);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(origFormats);	  ArrayList    foundFormats    =    new    ArrayList(toPattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
56	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(4);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(4);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(4);	  ArrayList    foundFormats    =    new    ArrayList(5);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
58	[BUG]  [BUGGY]  StringBuffer  foundFormats  =  new  StringBuffer();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  StringBuffer  foundFormats  =  new  StringBuffer();  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	StringBuffer  foundFormats  =  new  StringBuffer();	  List    foundFormats    =    new    ArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
59	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
60	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
61	[BUG]  [BUGGY]  Iterator  <  String>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  <  String>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    toPatterns.iterator();    it.hasNext();)    {    appendPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
62	[BUG]  [BUGGY]  char[]  c  =  this.formatDescription.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  char[]  c  =  this.formatDescription.toCharArray();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	char[]  c  =  this.formatDescription.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
63	[BUG]  [BUGGY]  if(c!=  '.')  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c!=  '.')  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(c!=  '.')  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i    +    1,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
64	[BUG]  [BUGGY]  if(c!=  '.')  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c!=  '.')  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(c!=  '.')  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i  +  1,  c	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i    +    1,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
65	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
67	[BUG]  [BUGGY]  List  foundFormats  =  new  ArrayList(1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  List  foundFormats  =  new  ArrayList(1);  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	List  foundFormats  =  new  ArrayList(1);	  ArrayList    foundFormats    =    new    ArrayList(0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
68	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
69	[BUG]  [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.size());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  foundFormats  =  new  ArrayList(toPattern.size());  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	ArrayList  foundFormats  =  new  ArrayList(toPattern.size());	  ArrayList    foundFormats    =    new    ArrayList(size());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
70	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
72	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  ++i)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
73	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    ++i)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
74	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount  +  1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount  +  1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount  +  1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
75	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i,  c);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i,    c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
76	[BUG]  [BUGGY]  Set  <  String>  foundFormats  =  new  ArrayList();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Set  <  String>  foundFormats  =  new  ArrayList();  [BUGGY]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Set  <  String>  foundFormats  =  new  ArrayList();	  List    foundFormats    =    new    ArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
77	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.pattern.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  this.pattern.iterator();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	Iterator  <  String>  it  =  this.pattern.iterator();	      Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
78	[BUG]  [BUGGY]  char[]  c  =  pattern.toPattern();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  char[]  c  =  pattern.toPattern();  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	char[]  c  =  pattern.toPattern();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
79	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
80	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
