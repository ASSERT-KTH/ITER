bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] appendQuotedString(pattern, pos, stripCustom, true); [FE] OutOfMemoryError [CONTEXT] ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: [BUGGY] appendQuotedString(pattern, pos, stripCustom, true); [BUGGY] break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	158	158	1	replace	
2	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: [BUGGY] [BUGGY] appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	158	158	1	add	
3	[BUG] [BUGGY] break; [FE] OutOfMemoryError [CONTEXT] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [BUGGY] break; [BUGGY] case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; if (c[pos.getIndex()] == START_FMT) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	
4	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [BUGGY] [BUGGY] break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; if (c[pos.getIndex()] == START_FMT) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	add	
5	[BUG] [BUGGY] int start = pos.getIndex(); [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { [BUGGY] int start = pos.getIndex(); [BUGGY] char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	
6	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { [BUGGY] [BUGGY] int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	add	
7	[BUG] [BUGGY] char[] c = pattern.toCharArray(); [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); [BUGGY] char[] c = pattern.toCharArray(); [BUGGY] if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	420	420	1	replace	
8	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); [BUGGY] [BUGGY] char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	420	420	1	add	
9	[BUG] [BUGGY] if (escapingOn && c[start] == QUOTE) { [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); [BUGGY] if (escapingOn && c[start] == QUOTE) { [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	
10	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); [BUGGY] [BUGGY] if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	add	
11	[BUG] [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); [BUGGY] } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	
12	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { [BUGGY] [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	add	
13	[BUG] [BUGGY] this(pattern, Locale.getDefault(), registry); [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Map registry) { [BUGGY] this(pattern, Locale.getDefault(), registry); [BUGGY] } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5773502691896258	112	112	1	replace	
14	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Map registry) { [BUGGY] [BUGGY] this(pattern, Locale.getDefault(), registry); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5773502691896258	112	112	1	add	
15	[BUG] [BUGGY] ArrayList foundFormats = new ArrayList(); [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } [BUGGY] ArrayList foundFormats = new ArrayList(); [BUGGY] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	
16	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } [BUGGY] [BUGGY] ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	add	
17	[BUG] [BUGGY] ArrayList foundDescriptions = new ArrayList(); [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); [BUGGY] ArrayList foundDescriptions = new ArrayList(); [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	149	149	1	replace	
18	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); [BUGGY] [BUGGY] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	149	149	1	add	
19	[BUG] [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); [BUGGY]  ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	150	150	1	replace	
20	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); [BUGGY] [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	150	150	1	add	
21	[BUG] [BUGGY] ParsePosition pos = new ParsePosition(0); [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); [BUGGY] ParsePosition pos = new ParsePosition(0); [BUGGY] char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	152	152	1	replace	
22	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); [BUGGY] [BUGGY] ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	152	152	1	add	
23	[BUG] [BUGGY] char[] c = pattern.toCharArray(); [FE] OutOfMemoryError [CONTEXT] if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); [BUGGY] char[] c = pattern.toCharArray(); [BUGGY] int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	153	153	1	replace	
24	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); [BUGGY] [BUGGY] char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	153	153	1	add	
25	[BUG] [BUGGY] int fmtCount = 0; [FE] OutOfMemoryError [CONTEXT] super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); [BUGGY] int fmtCount = 0; [BUGGY] while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	154	154	1	replace	
26	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); [BUGGY] [BUGGY] int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	154	154	1	add	
27	[BUG] [BUGGY] while (pos.getIndex() < pattern.length()) { [FE] OutOfMemoryError [CONTEXT] toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; [BUGGY] while (pos.getIndex() < pattern.length()) { [BUGGY] switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	155	155	1	replace	
28	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; [BUGGY] [BUGGY] while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	155	155	1	add	
29	[BUG] [BUGGY] switch (c[pos.getIndex()]) { [FE] OutOfMemoryError [CONTEXT] return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { [BUGGY] switch (c[pos.getIndex()]) { [BUGGY] case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	156	156	1	replace	
30	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { [BUGGY] [BUGGY] switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	156	156	1	add	
31	[BUG] [BUGGY] stripCustom.append(c[pos.getIndex()]); [FE] OutOfMemoryError [CONTEXT] foundFormats.add(format); foundDescriptions.add(format == null ? null : formatDescription); Validate.isTrue(foundFormats.size() == fmtCount); Validate.isTrue(foundDescriptions.size() == fmtCount); if (c[pos.getIndex()] != END_FE) { throw new IllegalArgumentException( "Unreadable format element at position " + start); }  default: [BUGGY] stripCustom.append(c[pos.getIndex()]); [BUGGY] next(pos); } } super.applyPattern(stripCustom.toString()); toPattern = insertFormats(super.toPattern(), foundDescriptions); if (containsElements(foundFormats)) { Format[] origFormats = getFormats();   int i = 0; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	
32	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] foundFormats.add(format); foundDescriptions.add(format == null ? null : formatDescription); Validate.isTrue(foundFormats.size() == fmtCount); Validate.isTrue(foundDescriptions.size() == fmtCount); if (c[pos.getIndex()] != END_FE) { throw new IllegalArgumentException( "Unreadable format element at position " + start); }  default: [BUGGY] [BUGGY] stripCustom.append(c[pos.getIndex()]); next(pos); } } super.applyPattern(stripCustom.toString()); toPattern = insertFormats(super.toPattern(), foundDescriptions); if (containsElements(foundFormats)) { Format[] origFormats = getFormats();   int i = 0; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	add	
33	[BUG] [BUGGY] next(pos); [FE] OutOfMemoryError [CONTEXT] foundDescriptions.add(format == null ? null : formatDescription); Validate.isTrue(foundFormats.size() == fmtCount); Validate.isTrue(foundDescriptions.size() == fmtCount); if (c[pos.getIndex()] != END_FE) { throw new IllegalArgumentException( "Unreadable format element at position " + start); }  default: stripCustom.append(c[pos.getIndex()]); [BUGGY] next(pos); [BUGGY] } } super.applyPattern(stripCustom.toString()); toPattern = insertFormats(super.toPattern(), foundDescriptions); if (containsElements(foundFormats)) { Format[] origFormats = getFormats();   int i = 0; for (Iterator it = foundFormats.iterator(); it.hasNext(); i++) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	
34	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] foundDescriptions.add(format == null ? null : formatDescription); Validate.isTrue(foundFormats.size() == fmtCount); Validate.isTrue(foundDescriptions.size() == fmtCount); if (c[pos.getIndex()] != END_FE) { throw new IllegalArgumentException( "Unreadable format element at position " + start); }  default: stripCustom.append(c[pos.getIndex()]); [BUGGY] [BUGGY] next(pos); } } super.applyPattern(stripCustom.toString()); toPattern = insertFormats(super.toPattern(), foundDescriptions); if (containsElements(foundFormats)) { Format[] origFormats = getFormats();   int i = 0; for (Iterator it = foundFormats.iterator(); it.hasNext(); i++) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	add	
35	[BUG] [BUGGY] pos.setIndex(pos.getIndex() + 1); [FE] OutOfMemoryError [CONTEXT] private ParsePosition next(ParsePosition pos) { [BUGGY] pos.setIndex(pos.getIndex() + 1); [BUGGY] return pos; } [CLASS] ExtendedMessageFormat [METHOD] next [RETURN_TYPE] ParsePosition  ParsePosition pos [VARIABLES] char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern boolean Map registry long serialVersionUID ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	403	403	1	replace	
36	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] private ParsePosition next(ParsePosition pos) { [BUGGY] [BUGGY] pos.setIndex(pos.getIndex() + 1); return pos; } [CLASS] ExtendedMessageFormat [METHOD] next [RETURN_TYPE] ParsePosition  ParsePosition pos [VARIABLES] char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern boolean Map registry long serialVersionUID ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	403	403	1	add	
37	[BUG] [BUGGY] return pos; [FE] OutOfMemoryError [CONTEXT] private ParsePosition next(ParsePosition pos) { pos.setIndex(pos.getIndex() + 1); [BUGGY] return pos; [BUGGY] } [CLASS] ExtendedMessageFormat [METHOD] next [RETURN_TYPE] ParsePosition  ParsePosition pos [VARIABLES] char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern boolean Map registry long serialVersionUID ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	404	404	1	replace	
38	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] private ParsePosition next(ParsePosition pos) { pos.setIndex(pos.getIndex() + 1); [BUGGY] [BUGGY] return pos; } [CLASS] ExtendedMessageFormat [METHOD] next [RETURN_TYPE] ParsePosition  ParsePosition pos [VARIABLES] char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern boolean Map registry long serialVersionUID ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	404	404	1	add	
39	[BUG] [BUGGY] super(DUMMY_PATTERN); [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { [BUGGY] super(DUMMY_PATTERN); [BUGGY] setLocale(locale); this.registry = registry; applyPattern(pattern); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	124	124	1	replace	
40	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { [BUGGY] [BUGGY] super(DUMMY_PATTERN); setLocale(locale); this.registry = registry; applyPattern(pattern); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	124	124	1	add	
41	[BUG] [BUGGY] setLocale(locale); [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { super(DUMMY_PATTERN); [BUGGY] setLocale(locale); [BUGGY] this.registry = registry; applyPattern(pattern); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	125	125	1	replace	
42	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { super(DUMMY_PATTERN); [BUGGY] [BUGGY] setLocale(locale); this.registry = registry; applyPattern(pattern); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	125	125	1	add	
43	[BUG] [BUGGY] this.registry = registry; [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { super(DUMMY_PATTERN); setLocale(locale); [BUGGY] this.registry = registry; [BUGGY] applyPattern(pattern); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	126	126	1	replace	
44	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { super(DUMMY_PATTERN); setLocale(locale); [BUGGY] [BUGGY] this.registry = registry; applyPattern(pattern); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	126	126	1	add	
45	[BUG] [BUGGY] applyPattern(pattern); [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { super(DUMMY_PATTERN); setLocale(locale); this.registry = registry; [BUGGY] applyPattern(pattern); [BUGGY] } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	127	127	1	replace	
46	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public ExtendedMessageFormat(String pattern, Locale locale, Map registry) { super(DUMMY_PATTERN); setLocale(locale); this.registry = registry; [BUGGY] [BUGGY] applyPattern(pattern); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Locale locale Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT Locale locale String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	127	127	1	add	
47	[BUG] [BUGGY] if (registry == null) { [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { [BUGGY] if (registry == null) { [BUGGY] super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	143	143	1	replace	
48	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { [BUGGY] [BUGGY] if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	143	143	1	add	
49	[BUG] [BUGGY] super.applyPattern(pattern); [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { [BUGGY] super.applyPattern(pattern); [BUGGY] toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	144	144	1	replace	
50	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { [BUGGY] [BUGGY] super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	144	144	1	add	
51	[BUG] [BUGGY] toPattern = super.toPattern(); [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); [BUGGY] toPattern = super.toPattern(); [BUGGY] return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	145	145	1	replace	
52	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); [BUGGY] [BUGGY] toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	145	145	1	add	
53	[BUG] [BUGGY] return; [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); [BUGGY] return; [BUGGY] } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	
54	[BUG] [BUGGY] [FE] OutOfMemoryError [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); [BUGGY] [BUGGY] return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	add	
