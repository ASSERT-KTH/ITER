bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  ESCAPED_QUOTE);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  ESCAPED_QUOTE);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
2	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  foundDescriptions);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  foundDescriptions);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
3	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())+  1;  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char  c  =  pattern.charAt(pos.getIndex())+  1;	      char    c    =    pattern.charAt(pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
4	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()));  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char  c  =  pattern.charAt(pos.getIndex()));	      char    c    =    pattern.charAt(pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
5	[BUG]  [BUGGY]  char[]  c  =  getCharacters();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getCharacters();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getCharacters();	      char[]    c    =    getFormats();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
6	[BUG]  [BUGGY]  char[]  c  =  getCharacterEncoding();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getCharacterEncoding();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getCharacterEncoding();	      char[]    c    =    getFormats();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
7	[BUG]  [BUGGY]  char[]  c  =  getCharacterElements();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getCharacterElements();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getCharacterElements();	      char[]    c    =    getFormats();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
8	[BUG]  [BUGGY]  char[]  c  =  getChars();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getChars();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getChars();	      char[]    c    =    getFormats();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
9	[BUG]  [BUGGY]  posCustom.append(stripCustom[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  posCustom.append(stripCustom[pos.getIndex()  ]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	posCustom.append(stripCustom[pos.getIndex()  ]);	  stripCustom.append(stripCustom[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
10	[BUG]  [BUGGY]  stripCustom.append(stripCustom[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(stripCustom[pos.getIndex()  -  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(stripCustom[pos.getIndex()  -  1]);	  stripCustom.append(stripCustom[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
11	[BUG]  [BUGGY]  stripCustom.append(c.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(c.toString());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(c.toString());	  stripCustom.append(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
12	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
13	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }	  stripCustom.append(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
14	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  else  {  for(int  pos  =  0;  pos  <  foundDescriptions.size();  pos++)  {  stripCustom.append(stripCustom.toString());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  else  {  for(int  pos  =  0;  pos  <  foundDescriptions.size();  pos++)  {  stripCustom.append(stripCustom.toString());  }  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	if(stripCustom!=  null)  {  stripCustom.append(stripCustom.toString());  }  else  {  for(int  pos  =  0;  pos  <  foundDescriptions.size();  pos++)  {  stripCustom.append(stripCustom.toString());  }	  stripCustom.append(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
15	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char  c  =  pattern.charAt(pos.getIndex())-  1;  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char  c  =  pattern.charAt(pos.getIndex())-  1;	      char    c    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
16	[BUG]  [BUGGY]  StripCustom.append(c[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  StripCustom.append(c[pos.getIndex()]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	StripCustom.append(c[pos.getIndex()]);	  stripCustom.append(c[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
17	[BUG]  [BUGGY]  char[]  c  =  pattern.split( "- ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.split( "- ");  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.split( "- ");	      char[]    c    =    pattern.split(   "n   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
18	[BUG]  [BUGGY]  char[]  c  =  toPattern.split( "null ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  toPattern.split( "null ");  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  toPattern.split( "null ");	      char[]    c    =    pattern.split(   "n   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
19	[BUG]  [BUGGY]  char[]  c  =  toPattern.split( "n   ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  toPattern.split( "n   ");  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  toPattern.split( "n   ");	      char[]    c    =    pattern.split(   "n   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
20	[BUG]  [BUGGY]  char[]  c  =  toPattern.split( ", ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  toPattern.split( ", ");  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  toPattern.split( ", ");	      char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
21	[BUG]  [BUGGY]  char[]  c  =  pattern.split( ",n ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.split( ",n ");  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.split( ",n ");	      char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
22	[BUG]  [BUGGY]  stripCustom.append(charBuffer[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(charBuffer[pos.getIndex()  -  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(charBuffer[pos.getIndex()  -  1]);	  stripCustom.append(charBuffer[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
23	[BUG]  [BUGGY]  stripCustom.append(charBuffer[pos.getIndex()  +  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(charBuffer[pos.getIndex()  +  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(charBuffer[pos.getIndex()  +  1]);	  stripCustom.append(charBuffer[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
24	[BUG]  [BUGGY]  posCustom.append(c[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  posCustom.append(c[pos.getIndex()  -  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	posCustom.append(c[pos.getIndex()  -  1]);	  posCustom.append(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
25	[BUG]  [BUGGY]  posCustom.append(c[pos.getIndex()  +  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  posCustom.append(c[pos.getIndex()  +  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	posCustom.append(c[pos.getIndex()  +  1]);	  posCustom.append(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
26	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(pos,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.getChars(pos,  start);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.getChars(pos,  start);	      char[]    c    =    pattern.getChars(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
27	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(start,  index);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.getChars(start,  index);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.getChars(start,  index);	      char[]    c    =    pattern.getChars(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
28	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(i,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.getChars(i,  start);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.getChars(i,  start);	      char[]    c    =    pattern.getChars(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
29	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(0,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.getChars(0,  start);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.getChars(0,  start);	      char[]    c    =    pattern.getChars(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
30	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  toPattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
31	[BUG]  [BUGGY]  char[]  c  =  format.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  format.toCharArray();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  format.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
32	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  this.pattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
33	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  index);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  index);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  index);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
34	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  start);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  start);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
35	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i  +  1);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i  +  1);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
36	[BUG]  [BUGGY]  int  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  int  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	int  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
37	[BUG]  [BUGGY]  char[]  c  =  getChars(pos,  index);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getChars(pos,  index);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getChars(pos,  index);	      char[]    c    =    getChars(pos,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
38	[BUG]  [BUGGY]  char[]  c  =  getChars(pos,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getChars(pos,  start);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getChars(pos,  start);	      char[]    c    =    getChars(pos,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
39	[BUG]  [BUGGY]  char[]  c  =  getChars(pos,  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getChars(pos,  1);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getChars(pos,  1);	      char[]    c    =    getChars(pos,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
40	[BUG]  [BUGGY]  char[]  c  =  getChars(pos,  pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getChars(pos,  pos.getIndex());  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getChars(pos,  pos.getIndex());	      char[]    c    =    getChars(pos,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
41	[BUG]  [BUGGY]  char  c  =  toPattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char  c  =  toPattern.charAt(pos.getIndex());  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char  c  =  toPattern.charAt(pos.getIndex());	      char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
42	[BUG]  [BUGGY]  char  c  =  this.pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char  c  =  this.pattern.charAt(pos.getIndex());  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char  c  =  this.pattern.charAt(pos.getIndex());	      char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
43	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  END_FE);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  END_FE);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
44	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  DUMMY_PATTERN);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  DUMMY_PATTERN);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  DUMMY_PATTERN);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
45	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  d);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  d);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  d);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
46	[BUG]  [BUGGY]  int  pos  =  indexOf(stripCustom.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  int  pos  =  indexOf(stripCustom.toString());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	int  pos  =  indexOf(stripCustom.toString());	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
47	[BUG]  [BUGGY]  int  pos  =  indexOf(stripCustom.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  int  pos  =  indexOf(stripCustom.getIndex());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	int  pos  =  indexOf(stripCustom.getIndex());	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
48	[BUG]  [BUGGY]  pos.setIndex(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  pos.setIndex(i);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	pos.setIndex(i);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
49	[BUG]  [BUGGY]  pos.setIndex(index);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  pos.setIndex(index);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	pos.setIndex(index);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
50	[BUG]  [BUGGY]  stripCustom.append(c[pos.getIndex()  +  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(c[pos.getIndex()  +  1]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(c[pos.getIndex()  +  1]);	  stripCustom.append(c[pos.getIndex()    -    1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
51	[BUG]  [BUGGY]  stripCustom.append(charBuffer.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(charBuffer.toString());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(charBuffer.toString());	  stripCustom.append(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
52	[BUG]  [BUGGY]  stripCustom.append(format.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(format.toString());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(format.toString());	  stripCustom.append(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
53	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toCharArray();  toPattern  =  insertFormats(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  this.pattern.toCharArray();  toPattern  =  insertFormats(c);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  this.pattern.toCharArray();  toPattern  =  insertFormats(c);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
54	[BUG]  [BUGGY]  posCustom.append(stripCustom.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  posCustom.append(stripCustom.toString());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	posCustom.append(stripCustom.toString());	  posCustom.append(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
55	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  dummyPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  dummyPattern);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  dummyPattern);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
56	[BUG]  [BUGGY]  char[]  c  =  pattern.split( "n ".);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.split( "n ".);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.split( "n ".);	      char[]    c    =    pattern.split(   "n   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
57	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  0,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  0,  i);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  0,  i);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
58	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  0);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  0);	      char[]    c    =    pattern.toCharArray();    toPattern    =    insertFormats(c,    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
59	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.getChars(start,  pos);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.getChars(start,  pos);	      char[]    c    =    pattern.getChars(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
60	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(start,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.getChars(start,  i);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.getChars(start,  i);	      char[]    c    =    pattern.getChars(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
61	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(start,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.getChars(start,  0);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.getChars(start,  0);	      char[]    c    =    pattern.getChars(start,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
62	[BUG]  [BUGGY]  pos  =  insertFormats(stripCustom.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  pos  =  insertFormats(stripCustom.toString());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	pos  =  insertFormats(stripCustom.toString());	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
63	[BUG]  [BUGGY]  char[]  c  =  getChars(pos,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getChars(pos,  0);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getChars(pos,  0);	      char[]    c    =    getChars(pos,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
64	[BUG]  [BUGGY]  char[]  c  =  formatDescription.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  formatDescription.toCharArray();  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  formatDescription.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
65	[BUG]  [BUGGY]  String  c  =  pattern.charAt(pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  String  c  =  pattern.charAt(pos.getIndex()  +  1);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	String  c  =  pattern.charAt(pos.getIndex()  +  1);	      char    c    =    pattern.charAt(pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
66	[BUG]  [BUGGY]  stripCustom.append(c,  pattern.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  stripCustom.append(c,  pattern.toString());  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(c,  pattern.toString());	  stripCustom.append(stripCustom.toString());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
67	[BUG]  [BUGGY]  posCustom.append(format[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  posCustom.append(format[pos.getIndex()  ]);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	posCustom.append(format[pos.getIndex()  ]);	  posCustom.append(c[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
68	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()  +  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()  +  start);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char  c  =  pattern.charAt(pos.getIndex()  +  start);	      char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
69	[BUG]  [BUGGY]  char[]  c  =  pattern.split( ", ",  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.split( ", ",  2);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.split( ", ",  2);	      char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
70	[BUG]  [BUGGY]  char[]  c  =  stripCustom.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  stripCustom.toCharArray();  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  stripCustom.toCharArray();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
71	[BUG]  [BUGGY]  char[]  c  =  stripCustom.toCharArray();  toPattern  =  insertFormats(c,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  stripCustom.toCharArray();  toPattern  =  insertFormats(c,  i);  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  stripCustom.toCharArray();  toPattern  =  insertFormats(c,  i);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
72	[BUG]  [BUGGY]  char[]  c  =  getChars(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  getChars(start,  pos);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  getChars(start,  pos);	      char[]    c    =    getChars(pos,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
73	[BUG]  [BUGGY]  char[]  c  =  pattern.split( "/ ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.split( "/ ");  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.split( "/ ");	      char[]    c    =    pattern.split(   "n   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
74	[BUG]  [BUGGY]  char[]  c  =  pattern.split( "n ",  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  pattern.split( "n ",  2);  [BUGGY]    stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  pattern.split( "n ",  2);	      char[]    c    =    pattern.split(   "n   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
75	[BUG]  [BUGGY]  char[]  c  =  patternCustom[pos.getIndex()  ];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:    [BUGGY]  char[]  c  =  patternCustom[pos.getIndex()  ];  [BUGGY]    next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	char[]  c  =  patternCustom[pos.getIndex()  ];	  stripCustom.append(stripCustom[pos.getIndex()    ]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
