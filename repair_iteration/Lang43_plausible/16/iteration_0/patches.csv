bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  stripCustom.append(c[pos.getIndex()  -  1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]  stripCustom.append(c[pos.getIndex()  -  1]);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(c[pos.getIndex()  -  1]);	stripCustom.append(c[pos.getIndex()]);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
2	[BUG]  [BUGGY]  stripCustom.append(stripCustom[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]  stripCustom.append(stripCustom[pos.getIndex()  ]);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(stripCustom[pos.getIndex()  ]);	stripCustom.append(c[pos.getIndex()]);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
3	[BUG]  [BUGGY]  posCustom.append(c[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]  posCustom.append(c[pos.getIndex()  ]);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	posCustom.append(c[pos.getIndex()  ]);	stripCustom.append(c[pos.getIndex()]);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
4	[BUG]  [BUGGY]    [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	  	stripCustom.append(c[pos.getIndex()]);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
5	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  pattern.toCharArray();  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  pattern.toCharArray();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
6	[BUG]  [BUGGY]    char[]  c  =  pattern.split( ", ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  pattern.split( ", ");  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  pattern.split( ", ");		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
7	[BUG]  [BUGGY]    char[]  c  =  pattern.getChars(start,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  pattern.getChars(start,  start);  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  pattern.getChars(start,  start);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
8	[BUG]  [BUGGY]    char[]  c  =  pattern.split( "n ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  pattern.split( "n ");  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  pattern.split( "n ");		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
9	[BUG]  [BUGGY]    char[]  c  =  getChars(pos,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  getChars(pos,  pos);  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  getChars(pos,  pos);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
10	[BUG]  [BUGGY]  stripCustom.append(stripCustom.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]  stripCustom.append(stripCustom.toString());  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(stripCustom.toString());	stripCustom.append(c[pos.getIndex()]);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
11	[BUG]  [BUGGY]  stripCustom.append(charBuffer[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]  stripCustom.append(charBuffer[pos.getIndex()  ]);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	stripCustom.append(charBuffer[pos.getIndex()  ]);	stripCustom.append(c[pos.getIndex()]);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
12	[BUG]  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char  c  =  pattern.charAt(pos.getIndex()  -  1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
13	[BUG]  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char  c  =  pattern.charAt(pos.getIndex());		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
14	[BUG]  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char  c  =  pattern.charAt(pos.getIndex()  +  1);  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char  c  =  pattern.charAt(pos.getIndex()  +  1);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
15	[BUG]  [BUGGY]    char[]  c  =  getFormats();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  getFormats();  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  getFormats();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
16	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  c);  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  c);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
17	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c);  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
18	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  [BUGGY]    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i);  [BUGGY]  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	187	187	1	replace	    char[]  c  =  pattern.toCharArray();  toPattern  =  insertFormats(c,  i);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	add
