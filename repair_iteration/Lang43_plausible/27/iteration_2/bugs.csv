bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
2	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM	      if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
3	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM	      if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
4	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {	      if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
5	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM	      if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
6	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
7	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
8	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
9	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
10	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
11	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
12	[BUG]  [BUGGY]  ||  toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  ||  toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
13	[BUG]  [BUGGY]  pattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  pattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
14	[BUG]  [BUGGY]  if(toPattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
15	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
16	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  return;  }	  if(toPattern!=    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
17	[BUG]  [BUGGY]  ||  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  ||  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
18	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
19	[BUG]  [BUGGY]  if(toPattern!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
20	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
21	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPattern.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  this.toPattern.iterator();  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.toPattern.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
22	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  registry.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
23	[BUG]  [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  pattern.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
24	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
25	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('n');  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('n');  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
26	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
27	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('t');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('t');  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('t');  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
29	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
30	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  int  fmtCount  =  pattern.length()  +  1;  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  pattern.length()  +  1;	      int    fmtCount    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
31	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  int  fmtCount  =  pattern.length()  -  1;  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  pattern.length()  -  1;	      int    fmtCount    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
32	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  *  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  int  fmtCount  =  pattern.length()  *  2;  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  pattern.length()  *  2;	      int    fmtCount    =    pattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
34	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
35	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
36	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
37	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  RuntimeException( " ");	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
39	[BUG]  [BUGGY]  throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
40	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
41	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
42	[BUG]  [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
43	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	      if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
44	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
45	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
46	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
47	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
48	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  int  fmtCount  =  toPattern.length()  -  1;  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  toPattern.length()  -  1;	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
49	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  int  fmtCount  =  toPattern.length()  +  1;  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  toPattern.length()  +  1;	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
50	[BUG]  [BUGGY]  char  fmtCount  =  toPattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  char  fmtCount  =  toPattern.length();  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	char  fmtCount  =  toPattern.length();	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
51	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
52	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
53	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
54	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
55	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
56	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.iterator();  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.formatDescription.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
57	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
58	[BUG]  [BUGGY]  new  IllegalStateException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  new  IllegalStateException( " ");  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
59	[BUG]  [BUGGY]  new  IllegalArgumentException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  new  IllegalArgumentException( " ");  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
60	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }	      if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
61	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
62	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
63	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  foundDe  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  foundDe  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  foundDe	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
64	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats,  0,  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats,  0,	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
65	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( " "))  {  return;  }	  if(toPattern    ==    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
66	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
67	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
68	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
69	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
70	[BUG]  [BUGGY]  if(toPattern!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
71	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
72	[BUG]  [BUGGY]  ||  toPattern!=  null)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  ||  toPattern!=  null)  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern!=  null)  {  return;  }	  if(toPattern!=    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
73	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
74	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
75	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  return;  }	  if(toPattern!=    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
76	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  <  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  <  0)  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  <  0)  {  return;  }	  if(toPattern!=    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
77	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.equals( " "))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null  ||  toPattern.equals( " "))  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.equals( " "))  {  return;  }	  if(toPattern!=    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
78	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
79	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
80	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
81	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(toPattern!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
82	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(toPattern!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
83	[BUG]  [BUGGY]  if(formatDescription  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(formatDescription  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(formatDescription  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
84	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	      if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
85	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
86	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPatterns.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  Iterator  <  String>  it  =  this.toPatterns.iterator();  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.toPatterns.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
87	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
88	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {	      if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
89	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY	      if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
90	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  return;  }	  if(toPattern    ==    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
91	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  return;  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  return;  }	  if(toPattern    ==    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
92	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]    return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	      if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
93	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
94	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
95	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
96	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
97	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();    [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  }  [BUGGY]    }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  }	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
