bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  fmtCount  =  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  Integer  fmtCount  =  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	Integer  fmtCount  =  appendQuotedString(pattern,  pos,  stripCustom,  true);	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
2	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
3	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
4	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
5	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
6	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
7	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
8	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
9	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex());	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
10	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
11	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  true);	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
12	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
13	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
14	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
15	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  index);	  fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
16	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  start);	  fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
17	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(0));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(0));  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(0));	  fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
18	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
19	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(0));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(0));  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(0));	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
20	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
21	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  foundDescriptions.add(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  foundDescriptions.add(c);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  foundDescriptions.add(c);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    findDescriptions.add(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
22	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  findDescriptions.add(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  findDescriptions.add(c);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  findDescriptions.add(c);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    findDescriptions.add(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
23	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  findDescriptions.add(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  findDescriptions.add(c);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  findDescriptions.add(c);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    findDescriptions.add(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
24	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
25	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
26	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  pos.setIndex(fmtCount);  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	pos.setIndex(fmtCount);  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
27	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  pos.setIndex(fmtCount);  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	pos.setIndex(fmtCount);  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
28	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
29	[BUG]  [BUGGY]  if(!foundDescriptions.contains(c))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(!foundDescriptions.contains(c))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(!foundDescriptions.contains(c))  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
30	[BUG]  [BUGGY]  if(!foundDescriptions.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(!foundDescriptions.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(!foundDescriptions.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
31	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
32	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);	  fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
33	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));	  fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
34	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(FIELD_QUOTE);	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
35	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(FIELD_QUOTE);	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
36	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
37	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(END_FE);	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
38	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  break;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  1)  {  break;  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  1)  {  break;  }	  if(fmtCount    ==    0)    {    break;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
39	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  break;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >=  0)  {  break;  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >=  0)  {  break;  }	  if(fmtCount    ==    0)    {    break;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
40	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(QUOTE);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(QUOTE);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
41	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append(QUOTE);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  ++i)  {  stripCustom.append(QUOTE);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
42	[BUG]  [BUGGY]  Integer  fmtCount  =  appendQuotedString(pattern,  pos,  stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  Integer  fmtCount  =  appendQuotedString(pattern,  pos,  stripCustom);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	Integer  fmtCount  =  appendQuotedString(pattern,  pos,  stripCustom);	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
43	[BUG]  [BUGGY]  if(fmtCount  >  1)  {  break;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  1)  {  break;  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  1)  {  break;  }	  if(fmtCount    >    0)    {    break;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
44	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
45	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
46	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
47	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  foundDescriptions.size();  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  foundDescriptions.size();	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
48	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
49	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
50	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
51	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
52	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
53	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  pos));  break;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  pos));  break;  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	pos.setIndex(readArgumentIndex(pattern,  pos));  break;	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
54	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
55	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
56	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
57	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  break;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount!=  0)  {  break;  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount!=  0)  {  break;  }	  if(fmtCount    ==    0)    {    break;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
58	[BUG]  [BUGGY]  if(fmtCount  ==  0  ||!foundDescriptions.contains(c))  {  break;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0  ||!foundDescriptions.contains(c))  {  break;  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0  ||!foundDescriptions.contains(c))  {  break;  }	  if(fmtCount    ==    0)    {    break;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
59	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >=  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >=  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
60	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
61	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos).getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos).getIndex());  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos).getIndex());	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
62	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
63	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(QUOTE);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(QUOTE);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
64	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(c.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(c.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
65	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  stripCustom.append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  stripCustom.append(QUOTE);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  stripCustom.append(QUOTE);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
66	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
67	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(QUOTE);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(QUOTE);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
68	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  findDescriptions.add(c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  findDescriptions.add(c);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  findDescriptions.add(c);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    findDescriptions.add(c);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
69	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount  +  1);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount  +  1);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
70	[BUG]  [BUGGY]  float  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  float  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	float  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
71	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos  +  1);	  fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
72	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(FIELD_QUOTE);	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
73	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);  }	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
74	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
75	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos)+  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos)+  1);  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos)+  1);	  fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
76	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
77	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
78	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(QUOTE).append(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(QUOTE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
79	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos));  stripCustom.append(QUOTE).append(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos));  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos));  stripCustom.append(QUOTE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(fmtCount);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
80	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
81	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(fmtCount    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
82	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(END_FE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(END_FE);  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(END_FE);	      fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
83	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  break;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  <  0)  {  break;  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  <  0)  {  break;  }	  if(fmtCount    >    0)    {    break;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
84	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
85	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  numDescriptions;  ++i)  {  stripCustom.append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  numDescriptions;  ++i)  {  stripCustom.append(QUOTE);  }  [BUGGY]    break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  numDescriptions;  ++i)  {  stripCustom.append(QUOTE);  }	      if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
86	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(fmtCount  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(fmtCount  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
87	[BUG]  [BUGGY]  if(c.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  if(c.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	if(c.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
88	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  break;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  break;  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  break;	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
89	[BUG]  [BUGGY]  pos.setIndex(index);  break;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError    [CONTEXT]    ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);    [BUGGY]  pos.setIndex(index);  break;  [BUGGY]    case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	pos.setIndex(index);  break;	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
