bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]      IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {	return  true;  	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ "));  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	return(getName().endsWith( "/ ")||  getName().endsWith( "/ "));	return  true;  	compilable	  [FE]  IOException  	1	1	replace
3	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ "));  [FE]  IOException  [FE]        IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ "));  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "/ "));	return  true;  	compilable	  [FE]  IOException  	1	1	replace
4	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")));  [CE]  [FE]          IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")));  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")));	return  true;  	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")))  {  [CE]  [FE]            IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")))  {  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")))  {	return  true;  	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith( "/ "))  {  return  true;  }	return  true;  	compilable	  [FE]  IOException  	1	1	replace
7	[BUG]  [BUGGY]  if(getName().endsWith( "/ "))  {  return  true;  }  [FE]  IOException  [FE]                IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith( "/ "))  {  return  true;  }	return  true;  	compilable	  [FE]  IOException  	1	1	replace
8	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]    IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	return  true;  	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	1	None	replace
9	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]      IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	return  true;  	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	1	None	replace
10	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]        IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	return  true;  	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	1	None	replace
11	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]          IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	return  true;  	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	1	None	replace
12	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]            IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	return  true;  	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	1	None	replace
13	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]              IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	return  true;  	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	1	None	replace
14	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]    IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {	return  true;  	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith  [CE]  [FE]      IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith	return  true;  	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]        IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {	return  true;  	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]          IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(	return  true;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().  [CE]  <identifier>  expected  [FE]            IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().	return  true;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  [CE]  [FE]              IOException  [CONTEXT]  public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith( "/ "))  {  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  [BUGGY]  }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;	return  true;  	non-compiled	[CE]  	1	None	replace
