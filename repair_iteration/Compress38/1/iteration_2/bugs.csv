bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
2	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	14	None	replace
3	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	9	None	replace
7	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	9	None	replace
8	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
9	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	9	None	replace
11	[BUG]  [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  ';'  expected  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
12	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().endsWith( "/   "));  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().endsWith( "/   "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    return(getName().endsWith(   "/   ")||  getName().endsWith( "/   "));	  	non-compiled	[CE]  unreachable  statement	2	None	add
13	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().endsWith( "./   ")||  getName().endsWith( "/   "));  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().endsWith( "./   ")||  getName().endsWith( "/   "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    return(getName().endsWith( "./   ")||  getName().endsWith( "/   "));	  	non-compiled	[CE]  unreachable  statement	2	None	add
14	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().endsWith( "./   "));  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().endsWith( "./   "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    return(getName().endsWith(   "/   ")||  getName().endsWith( "./   "));	  	non-compiled	[CE]  unreachable  statement	2	None	add
15	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	13	None	replace
16	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
18	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	13	None	replace
19	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	13	None	replace
20	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	13	None	replace
21	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {  [CE]  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
27	[BUG]  [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
28	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
29	[BUG]  [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
30	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( ")/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( ")/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
31	[BUG]  [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( ")/   "))  {  return  true;  }  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( ")/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( ")/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
32	[BUG]  [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(? "/   "))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(? "/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith(? "/   "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
33	[BUG]  [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith('/   "))  {  return  true;  }  [CE]  unclosed  character  literal  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith('/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith('/   "))  {  return  true;  }	  	non-compiled	[CE]  unclosed  character  literal	6	None	add
34	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	11	None	replace
35	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	11	None	replace
36	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	11	None	replace
38	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
39	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	11	None	replace
40	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    	non-compiled	[CE]  	19	None	replace
41	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  [CE]  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    	non-compiled	[CE]  	19	None	replace
42	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [CE]  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    	non-compiled	[CE]  	19	None	replace
43	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  [CE]  unclosed  string  literal  [FE]                        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
44	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().    	non-compiled	[CE]  	18	None	replace
45	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName()  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName()  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName()	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().    	non-compiled	[CE]  	18	None	replace
46	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
47	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")|  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")|  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")|	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
49	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
50	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
51	[BUG]  [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
52	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
53	[BUG]  [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	return(getName().endsWith( "/ ")||  getName().startsWith( "/ "));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    	compilable	  [FE]  IOException  	3	1	replace
56	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ "));  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "/ "));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    	compilable	  [FE]  IOException  	3	1	replace
57	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "./ "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	return(getName().endsWith( "/ ")||  getName().endsWith( "./ "));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    	compilable	  [FE]  IOException  	3	1	replace
58	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "./ "));  [FE]  IOException  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "./ "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "./ "));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    	compilable	  [FE]  IOException  	3	1	replace
59	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ ")));  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().endsWith( "./ ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
60	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ ")));  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "/ ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( ".js ")));  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( ".js ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().endsWith( ".js ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
62	[BUG]  [BUGGY]  return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")));  [CE]  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "./ ")));  [CE]  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "./ ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "./ ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
64	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ ")))  {  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ ")))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "/ ")))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	5	None	replace
65	[BUG]  [BUGGY]  return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")))  {  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	5	None	replace
66	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( ".js ")))  {  [CE]  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( ".js ")))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().endsWith( ".js ")))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	5	None	replace
67	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ ")))  {  [CE]  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ ")))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().endsWith( "./ ")))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	5	None	replace
68	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ ")))  {  [CE]  [FE]                        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ ")))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "/ ")))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
71	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	8	None	replace
72	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	8	None	replace
73	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	8	None	replace
74	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	8	None	replace
75	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	10	None	replace
76	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
77	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	10	None	replace
78	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	10	None	replace
79	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	10	None	replace
80	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	10	None	replace
81	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  {  return  true;  [CE]  ';'  expected  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  {  return  true;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  {  return  true;	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
82	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  <  return  true;  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  <  return  true;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  <  return  true;	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
83	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  <  return  return  true;  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  <  return  return  true;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry  <  return  return  true;	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
84	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry[]  EMPTY_DIR  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry[]  EMPTY_DIR  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry[]  EMPTY_DIR	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
85	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiArchiveEntry  {  return  true;  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiArchiveEntry  {  return  true;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiArchiveEntry  {  return  true;	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
86	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiArchiveEntry  <  return  true;  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiArchiveEntry  <  return  true;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiArchiveEntry  <  return  true;	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
87	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry[]  EMPTY_TAR_  [CE]  ';'  expected  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry[]  EMPTY_TAR_  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  GuvernuluiTarArchiveEntry[]  EMPTY_TAR_	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
88	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	12	None	replace
89	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
90	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	12	None	replace
91	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	12	None	replace
93	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	12	None	replace
94	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	12	None	replace
95	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	12	None	replace
96	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SIZE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SIZE  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SIZE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SIZE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SIZE	12	None	replace
97	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	8	None	replace
98	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
99	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	11	None	replace
100	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	11	None	replace
101	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
102	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	11	None	replace
103	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().    	non-compiled	[CE]  	18	None	replace
104	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().    	non-compiled	[CE]  	18	None	replace
105	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	13	None	replace
106	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
107	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	13	None	replace
108	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "/ "))  {  return  true;  }  [CE]  not  a  statement  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().endsWith( "/ "))  {  return  true;  }	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
109	[BUG]  [BUGGY]  parent  ==  null  ||  getName().endsWith( "/   "))  {  return  true;  }  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  parent  ==  null  ||  getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  ||  getName().endsWith( "/   "))  {  return  true;  }	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
110	[BUG]  [BUGGY]  parent!=  null  &&  parent.getName().endsWith( "/ "))  {  return  true;  }  [CE]  not  a  statement  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  parent!=  null  &&  parent.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  parent.getName().endsWith( "/ "))  {  return  true;  }	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
111	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "./ "))  {  return  true;  }  [CE]  not  a  statement  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().endsWith( "./ "))  {  return  true;  }	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
112	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(    	non-compiled	[CE]  	17	None	replace
113	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
114	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    	non-compiled	[CE]  	19	None	replace
115	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/)))  {  [CE]  unclosed  string  literal  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/)))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "/)))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  unclosed  string  literal	5	None	replace
116	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
117	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	return(getName().startsWith( "/ ")||  getName().endsWith( "/ "));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    	compilable	  [FE]  IOException  	3	1	replace
118	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ "));  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ "));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "/ "));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "));    	compilable	  [FE]  IOException  	3	1	replace
119	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [CE]  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	14	None	replace
120	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* "))  {  [CE]  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
121	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
122	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
123	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ ")));  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "/ ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
124	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
125	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	9	None	replace
126	[BUG]  [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(. "/   "))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(. "/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith(. "/   "))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
127	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( ",/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
128	[BUG]  [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( ",/   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith( ",/   "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(   "/   "))    {    return    true;    }    if(getName().endsWith( ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	6	1	add
129	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
130	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	10	None	replace
131	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
132	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  [Delete]  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	[Delete]	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
133	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [CE]  [FE]      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
134	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [CE]  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
135	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [CE]  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }	  if(getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
136	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().    	non-compiled	[CE]  	18	None	replace
137	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().    	non-compiled	[CE]  	18	None	replace
138	[BUG]  [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
139	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [CE]  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
140	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "./ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "./ "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	1	None	replace
141	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    	non-compiled	[CE]  	19	None	replace
142	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	13	None	replace
143	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	13	None	replace
144	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                      IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	13	None	replace
145	[BUG]  [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")));  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
146	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".java ")));  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".java ")));  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().endsWith( ".java ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	4	None	replace
147	[BUG]  [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")))  {  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	5	None	replace
148	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".java ")))  {  [CE]  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".java ")))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().endsWith( ".java ")))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	5	None	replace
149	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL	12	None	replace
150	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	12	None	replace
151	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                    IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	12	None	replace
152	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith(  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith(	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
153	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	10	None	replace
154	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	10	None	replace
155	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	10	None	replace
156	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]          IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	9	None	replace
157	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	9	None	replace
158	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]            IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
159	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
160	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	16	None	replace
161	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]        IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	14	None	replace
162	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]              IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	11	None	replace
163	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	11	None	replace
164	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                  IOException    [CONTEXT]    public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(   "/   "))  {    [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]    }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	11	None	replace
