bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	7	None	replace
3	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	7	None	replace
4	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  }  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
5	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  not  a  statement	7	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	add	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
7	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [FE]  AssertionFailedError  [FE]    ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	add	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
9	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [FE]  AssertionFailedError  [FE]      ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	add	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
11	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [FE]  AssertionFailedError  [FE]        ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
12	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
13	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
14	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
15	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instancesof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instancesof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instancesof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
16	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instancesof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instancesof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instancesof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
17	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	10	None	replace
20	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  inconvertible  types	3	None	replace
23	[BUG]  [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  array  required,  but  UnparseableExtraFieldData  found  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  array  required,  but  UnparseableExtraFieldData  found	3	None	replace
24	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
25	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	add	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
27	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
28	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
29	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
30	[BUG]  [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i])  {  [CE]  incomparable  types:  boolean  and  UnparseableExtraFieldData  [FE]                    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  incomparable  types:  boolean  and  UnparseableExtraFieldData	5	None	replace
34	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)fields[i])  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
35	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  ')'  expected	5	None	replace
36	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getHeaderId();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getHeaderId();  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getHeaderId();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i]);  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId());  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getEntry();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getEntry();  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getEntry();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getValue();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getValue();  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getValue();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i])  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra)  {  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  >  expected	4	None	replace
45	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData))  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData))  {  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData))  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
47	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
49	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
50	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
51	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
52	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
53	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >>  null)  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >>  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
54	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[0]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[0]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[0]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
55	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
56	[BUG]  [BUGGY]  extraFields.put(fields[i].getHeaderId(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  extraFields.put(fields[i].getHeaderId(),  fields[i]);  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getHeaderId(),  fields[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getHeaderId();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getHeaderId();  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getHeaderId();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i];  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId());  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  ||  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	7	None	replace
62	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  }  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  not  a  statement	7	None	replace
64	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  not  a  statement	7	None	replace
65	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
66	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
67	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
68	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
71	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
72	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
73	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  fields[i])  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  fields[i])  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  if(fields[i]  instanceof  UniparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UniparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UniparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ';'  expected  [FE]    ClassCastException    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
77	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getHeaderId();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getHeaderId();  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getHeaderId();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
78	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i);  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
80	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instancesof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instancesof  UnparseableExtraFieldData)  {  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instancesof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
81	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  extraFields[i]  =(UnparseableExtraFieldData)fields[i];  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {    [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  extraFields[i]  =(UnparseableExtraFieldData)fields[i];  }  [BUGGY]    unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  extraFields[i]  =(UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
