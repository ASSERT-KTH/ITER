bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	add	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	compilable	  [FE]  AssertionFailedError  	1	2	replace
2	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	compilable	  [FE]  AssertionFailedError  	1	2	replace
3	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  inconvertible  types  [FE]      AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	non-compiled	[CE]  inconvertible  types	1	None	replace
4	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [FE]            AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]    [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	  	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	non-compiled	[CE]  'else'  without  'if'	1	None	replace
7	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	add	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	compilable	  [FE]  ClassCastException  	1	5	replace
9	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [FE]  ClassCastException  [FE]      AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	compilable	  [FE]  ClassCastException  	1	5	replace
10	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {	if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
