bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i],  fields[i]);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i],  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i],  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
2	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getName(),  fields[i]);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getName(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getName(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
3	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getId(),  fields[i]);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getId(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
4	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRawId(),  fields[i]);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRawId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRawId(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
5	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRealId(),  fields[i]);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRealId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRealId(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
6	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i]  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i]  +  1);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i]  +  1);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
7	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId(),  fields[i]);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
8	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getId());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getId());	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
9	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i],  fields[i].getHeaderId());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i],  fields[i].getHeaderId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i],  fields[i].getHeaderId());	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
10	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i]);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
11	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i],  fields[i]);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i],  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i],  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
12	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getRawId());  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getRawId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getRawId());	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
13	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
14	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
15	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
16	[BUG]  [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].setHeaderId(i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].setHeaderId(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].setHeaderId(i);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)extraFields[i].getHeaderId();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
18	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getParent();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getParent();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)extraFields[i].getHeaderId();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
19	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getExtra();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getExtra();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getExtra();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)extraFields[i].getHeaderId();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
20	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i];  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i];	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)extraFields[i].getHeaderId();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
21	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[0]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
22	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[0]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
23	[BUG]  [BUGGY]  extraFields[i]  =(UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields[i]  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields[i]  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
24	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ']'  expected	81	None	replace
25	[BUG]  [BUGGY]  (UnparseableExtraFieldData)fields[i];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  not  a  statement	81	None	replace
26	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra[]  =(UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra[]  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra[]  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
27	[BUG]  [BUGGY]  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
28	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra;  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra;  }	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  not  a  statement	64	None	replace
29	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  not  a  statement	64	None	replace
30	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getInput();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getInput();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getInput();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getEntry();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
31	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getParent();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getParent();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getParent();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getEntry();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
32	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setEntry(i);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setEntry(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setEntry(i);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getEntry();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
33	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getContent();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getContent();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getContent();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getEntry();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
34	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)fields[i])  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
35	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)fields[i])  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
36	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  (UnparseableExtraFieldData)fields[i])  {  [CE]  ']'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  ']'  expected	35	None	replace
37	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i]  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  ')'  expected	74	None	replace
38	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ==  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ==  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ==	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
39	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
40	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i]  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  ')'  expected	74	None	replace
41	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)fields[i]  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  ')'  expected	74	None	replace
42	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i]  {  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
43	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  files[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  files[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  files[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]    instanceof    UnparseableExtraFieldData    ||    files[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
44	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].clone();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].clone();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].clone();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instancesof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instancesof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instancesof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instancesof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
46	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().equals( "UnparseableExtra "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().equals( "UnparseableExtra "))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().equals( "UnparseableExtra "))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instancesof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
47	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instancesof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
48	[BUG]  [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
49	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
50	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData>)fields[i])  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData>)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData>)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i])    {    	non-compiled	[CE]  ')'  expected	70	None	replace
51	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ')'  expected	26	None	add
52	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
53	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instancesof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instancesof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instancesof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ')'  expected	26	None	add
54	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instancesof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instancesof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instancesof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ')'  expected	26	None	add
55	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i].  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i].  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i].  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  <identifier>  expected	26	None	add
56	[BUG]  [BUGGY]  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  unparseableExtra  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	unparseableExtra  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	62	None	replace
57	[BUG]  [BUGGY]  UnparseableExtra  =(UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtra  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtra  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	62	None	replace
58	[BUG]  [BUGGY]  UnparseableExtra  field  =(UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtra  field  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtra  field  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	62	None	replace
59	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(rawName);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(rawName);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(rawName);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
60	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extraFields[i]);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extraFields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extraFields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
61	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(this.extra);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(this.extra);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(this.extra);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
62	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(unparseableExtra);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(unparseableExtra);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(unparseableExtra);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
63	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(fields[i]);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(fields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
64	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(i);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(i);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
65	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ==  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ==  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ==	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
66	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]!=  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]!=  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]!=	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
67	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
68	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
69	[BUG]  [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
70	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
71	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  unparseableExtra[i]  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  unparseableExtra[i]  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  unparseableExtra[i]  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
72	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  field  :  fields[i])  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  field  :  fields[i])  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  field  :  fields[i])  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  not  a  statement	5	None	replace
73	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  unparseableExtraFields[i])  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  unparseableExtraFields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  unparseableExtraFields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
74	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >=  fields[i])  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >=  fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >=  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
75	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  {  fields[i])  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  {  fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  {  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
76	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  ==  fields[i])  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  ==  fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  ==  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
77	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >>  fields[i])  {  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >>  fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >>  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
78	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  unparseableExtra)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  unparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  unparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
79	[BUG]  [BUGGY]  for(UnparseableExtraField  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraField  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra;  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraField  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra;  }	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
80	[BUG]  [BUGGY]  (UnparseableExtraFieldData)fields[i].getHeaderId();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  (UnparseableExtraFieldData)fields[i].getHeaderId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	(UnparseableExtraFieldData)fields[i].getHeaderId();	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
81	[BUG]  [BUGGY]  (UnparseableExtraFieldData)fields[i].put(fields[i].getHeaderId(),  fields[i]);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  (UnparseableExtraFieldData)fields[i].put(fields[i].getHeaderId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	(UnparseableExtraFieldData)fields[i].put(fields[i].getHeaderId(),  fields[i]);	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
82	[BUG]  [BUGGY]  for(UnparseableExtraField  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraField  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraField  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)unparseableExtra	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
83	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpars  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpars  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpars	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
84	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unparse  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unparse  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unparse	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
85	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpar  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpar  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpar	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
86	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpars  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpars  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unpars	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
87	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i];	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	58	None	replace
88	[BUG]  [BUGGY]  unparseableExtra  =(ZipExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  unparseableExtra  =(ZipExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	unparseableExtra  =(ZipExtraFieldData)fields[i];	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	58	None	replace
89	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUnderId();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUnderId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUnderId();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	58	None	replace
90	[BUG]  [BUGGY]  UnparseableExtra  unparseableExtra  =(ZipExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtra  unparseableExtra  =(ZipExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtra  unparseableExtra  =(ZipExtraFieldData)fields[i];	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	58	None	replace
91	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  ')'  expected	34	None	replace
92	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
93	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
94	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
95	[BUG]  [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
96	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
97	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  ';'  expected  [FE]        ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
98	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [CE]  ';'  expected  [FE]          ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
99	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()!=  null)  {  [CE]  ';'  expected  [FE]            ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()!=  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
100	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()!=  0)  {  [CE]  ';'  expected  [FE]              ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()!=  0)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()!=  0)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
101	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [CE]  ';'  expected  [FE]                ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
102	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullName()!=  null)  {  [CE]  ';'  expected  [FE]                  ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullName()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullName()!=  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
103	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
104	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
105	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
106	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
107	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
108	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
109	[BUG]  [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
110	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
111	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
112	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	61	None	replace
113	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	61	None	replace
114	[BUG]  [BUGGY]  UnparseableExtraFieldData[]  fields[i]  =(UnparseableExtraFieldData[])fields[i];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData[]  fields[i]  =(UnparseableExtraFieldData[])fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData[]  fields[i]  =(UnparseableExtraFieldData[])fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ']'  expected	4	None	replace
115	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  ')'  expected	47	None	replace
116	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  ')'  expected	47	None	replace
117	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  ')'  expected	47	None	replace
118	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  ')'  expected	47	None	replace
119	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  ')'  expected	47	None	replace
120	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>  unpars  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>  unpars  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>  unpars	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
121	[BUG]  [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
122	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    	non-compiled	[CE]  not  a  statement	65	None	replace
123	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i];  }  else  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i];  }  else  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData)fields[i];  }  else  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    	non-compiled	[CE]  ')'  expected	65	None	replace
124	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
125	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData!=  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
126	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
127	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
128	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
129	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]    instanceof    UnparseableExtraData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
130	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  ==  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  ==  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  ==	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    ||    fields[i]    instanceof    UnparseableExtraFieldData    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
131	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >=  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >=  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >=	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    ||    fields[i]    instanceof    UnparseableExtraFieldData    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
132	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData!=  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData!=  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData!=	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    ||    fields[i]    instanceof    UnparseableExtraFieldData    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
133	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    ||    fields[i]    instanceof    UnparseableExtraFieldData    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
134	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  [Delete]	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    ||    fields[i]    instanceof    UnparseableExtraFieldData    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
135	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >  {  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  >  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    ||    fields[i]    instanceof    UnparseableExtraFieldData    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
136	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(unparseableExtra);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(unparseableExtra);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(unparseableExtra);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
137	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(unparseableExtra,  fields[i]);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(unparseableExtra,  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(unparseableExtra,  fields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
138	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extraFields[i]);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extraFields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extraFields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
139	[BUG]  [BUGGY]  ((  ZipExtraFieldData)extraFields[i].getHeaderId()).setExtra(fields[i]);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)extraFields[i].getHeaderId()).setExtra(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)extraFields[i].getHeaderId()).setExtra(fields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
140	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra,  fields[i]);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra,  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra,  fields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
141	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(rawName);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(rawName);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(rawName);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
142	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setHeaderId(i);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setHeaderId(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setHeaderId(i);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
143	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExtra();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExtra();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExtra();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
144	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getRawId();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getRawId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getRawId();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
145	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getId();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getId();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
146	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
147	[BUG]  [BUGGY]  if(fields[i]  instanceof  UniparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UniparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UniparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UniparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	75	None	replace
148	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
149	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
150	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
151	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
152	[BUG]  [BUGGY]  extraFields.put(fields[i].getName(),  fields[i]);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getName(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getName(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
153	[BUG]  [BUGGY]  extraFields.put(fields[i].getExtra(),  fields[i]);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getExtra(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getExtra(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
154	[BUG]  [BUGGY]  extraFields.put(fields[i].getFullName(),  fields[i]);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getFullName(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getFullName(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
155	[BUG]  [BUGGY]  extraFields.put(fields[i].getRawId(),  fields[i]);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getRawId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getRawId(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
156	[BUG]  [BUGGY]  extraFields.put(fields[i],  fields[i]);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i],  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i],  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
157	[BUG]  [BUGGY]  extraFields.put(fields[i].getShortId(),  fields[i]);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getShortId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getShortId(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
158	[BUG]  [BUGGY]  if(fields[i]!=  null  ||  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]        ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]!=  null  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]!=  null  ||  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
159	[BUG]  [BUGGY]  if(fields[i]!=  null  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]          ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]!=  null  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]!=  null  ||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
160	[BUG]  [BUGGY]  if(fields[i]  ==  null  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]            ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  ==  null  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  &&  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
161	[BUG]  [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getExtra()!=  null)  {  [CE]  ')'  expected  [FE]              ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getExtra()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  ||  fields[i].getExtra()!=  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
162	[BUG]  [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId()  >=  null)  {  [CE]  ')'  expected  [FE]                ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  ||  fields[i].getHeaderId()  >=  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
163	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].get(i);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].get(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].get(i);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)super.get(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
164	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].get(i);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].get(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].get(i);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)super.get(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
165	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i  +  1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i  +  1);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i  +  1);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)super.get(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
166	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i,  fields[i]);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i,  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(i,  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)super.get(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
167	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()  ==  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()  ==  0)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()  ==  0)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
168	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
169	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()  ==  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
170	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)&&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
171	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)&&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
172	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)&&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
173	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]                ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]    instanceof    UnparseableExtraData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
174	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	66	None	replace
175	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	66	None	replace
176	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
177	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
178	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
179	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
180	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
181	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
182	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
183	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setValue(i);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setValue(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].setValue(i);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getValue();    	non-compiled	[CE]  ')'  expected	42	None	replace
184	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getElement();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getElement();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getElement();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getValue();    	non-compiled	[CE]  ')'  expected	42	None	replace
185	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
186	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	1	None	replace
187	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	1	None	replace
188	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtra.getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]              ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtra.getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtra.getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
189	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtraFields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]                ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtraFields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtraFields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
190	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtra[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]                  ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtra[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  unparseableExtra[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
191	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i],  unparseableExtra.getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]                    ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i],  unparseableExtra.getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i],  unparseableExtra.getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
192	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(unparseableExtra  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	2	None	replace
193	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	2	None	replace
194	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparsableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
195	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparsableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
196	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparsableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
197	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ==    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
198	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ==    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
199	[BUG]  [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ==    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
200	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  ';'  expected  [FE]            ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
201	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  unparseableExtra)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  unparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  unparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    unparseableExtra)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
202	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    unparseableExtra)    {    	non-compiled	[CE]  >  expected	44	None	replace
203	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  unparseableExtra)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  unparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  unparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    unparseableExtra)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
204	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  unparseableExtra)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  unparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  unparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    unparseableExtra)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
205	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra  ||  fields[i]  instanceof  UnparseableExtraFieldData  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  unparseableExtra  ||  fields[i]  instanceof  UnparseableExtraFieldData  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    unparseableExtra)    {    	non-compiled	[CE]  >  expected	44	None	replace
206	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
207	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
208	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
209	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >=  null)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
210	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
211	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >>  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >>  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  >>  null)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
212	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ==  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ==  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ==	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
213	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]!=  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]!=  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]!=	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
214	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData>)fields[i]  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData>)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >=  (UnparseableExtraFieldData>)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
215	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData>)fields[i]  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData>)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ==  (UnparseableExtraFieldData>)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
216	[BUG]  [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
217	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
218	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId()  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId()  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId()	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
219	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()!=  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()!=  0)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId().length()!=  0)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
220	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()!=  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
221	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i],  fields[i].getHeaderId());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i],  fields[i].getHeaderId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i],  fields[i].getHeaderId());	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	39	None	replace
222	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getId());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getId());	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	39	None	replace
223	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i]);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	39	None	replace
224	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRawId());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRawId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getRawId());	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	39	None	replace
225	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId()  +  1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId()  +  1);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId()  +  1);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	39	None	replace
226	[BUG]  [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
227	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
228	[BUG]  [BUGGY]  if(fields[i  instanceof  UnparseableExtra)  {  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i  instanceof  UnparseableExtra)  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  ']'  expected	30	None	replace
229	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
230	[BUG]  [BUGGY]  if(fields[i  instanceof  UnparseableExtra]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i  instanceof  UnparseableExtra]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i  instanceof  UnparseableExtra]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>))  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
231	[BUG]  [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)unparseableExtra)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)unparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)unparseableExtra)  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
232	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(unparseableExtra[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
233	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getHeaderId();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getHeaderId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getHeaderId();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	57	None	replace
234	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUnderId();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUnderId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUnderId();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	57	None	replace
235	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].setHeaderId(i);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].setHeaderId(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].setHeaderId(i);	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	57	None	replace
236	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getExtra();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getExtra();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getExtra();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	57	None	replace
237	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
238	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
239	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
240	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  >=  null)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
241	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
242	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
243	[BUG]  [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(unparseableExtra[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
244	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
245	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  >>	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
246	[BUG]  [BUGGY]  ExtraFields[i]  =(UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ExtraFields[i]  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ExtraFields[i]  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	81	None	replace
247	[BUG]  [BUGGY]  ArrayList  <  ZipExtraField>  extraFields  =  new  ArrayList  <  ZipExtraField>(fields);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ArrayList  <  ZipExtraField>  extraFields  =  new  ArrayList  <  ZipExtraField>(fields);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ArrayList  <  ZipExtraField>  extraFields  =  new  ArrayList  <  ZipExtraField>(fields);	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	81	None	replace
248	[BUG]  [BUGGY]  ExtraFieldData  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ExtraFieldData  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ExtraFieldData  unparseableExtra[i]  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ']'  expected	81	None	replace
249	[BUG]  [BUGGY]  ArrayList  <  ZipExtraField>  extraFields  =  new  ArrayList  <  ZipExtraField>(fields[i]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ArrayList  <  ZipExtraField>  extraFields  =  new  ArrayList  <  ZipExtraField>(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ArrayList  <  ZipExtraField>  extraFields  =  new  ArrayList  <  ZipExtraField>(fields[i]);	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    extraFields[i]    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	81	None	replace
250	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(new  LinkedHashMap  <  ZipExtraField>());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(new  LinkedHashMap  <  ZipExtraField>());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(new  LinkedHashMap  <  ZipExtraField>());	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
251	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
252	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ||  fields[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  ||  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
253	[BUG]  [BUGGY]  if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
254	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
255	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getSource();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getSource();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getSource();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getValue();    	non-compiled	[CE]  ')'  expected	42	None	replace
256	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getOuterField();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getOuterField();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getOuterField();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getValue();    	non-compiled	[CE]  ')'  expected	42	None	replace
257	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUniqueId();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUniqueId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getUniqueId();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	58	None	replace
258	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)&&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
259	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)&&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
260	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  }  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  }  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  }  &&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	66	None	replace
261	[BUG]  [BUGGY]  UnparseableExtraFieldData[]  fields  =  new  UnparseableExtraFieldData[fields[i]].getHeaderId();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData[]  fields  =  new  UnparseableExtraFieldData[fields[i]].getHeaderId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData[]  fields  =  new  UnparseableExtraFieldData[fields[i]].getHeaderId();	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	4	None	replace
262	[BUG]  [BUGGY]  UnparseableExtraFieldData[]  fields  =  new  UnparseableExtraFieldData[fields[i].getHeaderId()  ];  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData[]  fields  =  new  UnparseableExtraFieldData[fields[i].getHeaderId()  ];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData[]  fields  =  new  UnparseableExtraFieldData[fields[i].getHeaderId()  ];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	4	None	replace
263	[BUG]  [BUGGY]  if(fields[i]  instanceof  UniqueExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UniqueExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UniqueExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UniparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	75	None	replace
264	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
265	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =  (UnparseableExtraFieldData)fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
266	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
267	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unparse  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unparse  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  Unparse	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
268	[BUG]  [BUGGY]  UnparseableExtraFieldData  i  =(UnparseableExtraFieldData)fields[i];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  i  =(UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  i  =(UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	62	None	replace
269	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getUnderId());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getUnderId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getUnderId());	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	39	None	replace
270	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparsableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
271	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparsableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
272	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(unparseableExtra[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
273	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)unparseableExtra)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)unparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)unparseableExtra)  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
274	[BUG]  [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
275	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtra>)fields[i])  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
276	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    if(i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
277	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)fields[i]  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  ')'  expected	74	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i]  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i]  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i]	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparsableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparsableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparsableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
281	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(fields[i]);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)super.get(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
282	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(fields[i].getHeaderId());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(fields[i].getHeaderId());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)super.get(fields[i].getHeaderId());	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)super.get(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
283	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields.get(i);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields.get(i);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields.get(i);	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)super.get(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
284	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    unparseableExtra)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
285	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  >  unparseableExtra)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  >  unparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  >  unparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    unparseableExtra)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
286	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  field.length)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  field.length)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  field.length)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instancesof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
287	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  ==  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  ==  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData  ==	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i]    ||    fields[i]    instanceof    UnparseableExtraFieldData    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
288	[BUG]  [BUGGY]  extraFields.put(fields[i].getId(),  fields[i]);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getId(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
289	[BUG]  [BUGGY]  extraFields.put(fields[i].getExtraId(),  fields[i]);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getExtraId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getExtraId(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
290	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  files[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  files[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  files[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]    instanceof    UnparseableExtraFieldData    ||    files[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
291	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].setExtra();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].setExtra();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].setExtra();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)extraFields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	77	None	replace
292	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getExternalAttributes();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getExternalAttributes();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getExternalAttributes();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)extraFields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	77	None	replace
293	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getSource();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getSource();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)extraFields[i].getSource();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)extraFields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	77	None	replace
294	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
295	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  >=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  >=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)||  fields[i].getHeaderId()  >=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
296	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  <  fields[i])  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  <  fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  <  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
297	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  +  fields[i])  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  +  fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  +  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
298	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getSourceName());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getSourceName());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getSourceName());	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	59	None	replace
299	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  }  else  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  }  else  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  }  else  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
300	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]              ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
301	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].unparseableExtra()!=  null)  {  [CE]  ')'  expected  [FE]                ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].unparseableExtra()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i].unparseableExtra()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
302	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    if(i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
303	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getDescription()!=  null)  {  [CE]  ';'  expected  [FE]        ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getDescription()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getDescription()!=  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
304	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getDelimiterId()!=  null)  {  [CE]  ';'  expected  [FE]          ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getDelimiterId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getDelimiterId()!=  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
305	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getUnderId();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getUnderId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getUnderId();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	37	None	replace
306	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[0];  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[0];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[0];	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	37	None	replace
307	[BUG]  [BUGGY]  if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
308	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtraFields;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtraFields;  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  unparseableExtra  :  fields)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtraFields;  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	2	None	replace
309	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  unparseableExtra  :  fields)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra;  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	2	None	replace
310	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getSourceName(),  fields[i]);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getSourceName(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getSourceName(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	38	None	replace
311	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()  ==  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
312	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullId()  ==  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
313	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i].getHeaderId())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i].getHeaderId())  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i].getHeaderId())  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =(UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
314	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  =(UnparseableExtraFieldData)fields[i]  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    =(UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
315	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(externalAttributes);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(externalAttributes);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(externalAttributes);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
316	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(new  LinkedHashMap  <  ZipExtraField>());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(new  LinkedHashMap  <  ZipExtraField>());  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(new  LinkedHashMap  <  ZipExtraField>());	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
317	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getFactory()).setExtra(extra);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getFactory()).setExtra(extra);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getFactory()).setExtra(extra);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
318	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getRawId()).setExtra(extra);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getRawId()).setExtra(extra);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getRawId()).setExtra(extra);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
319	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]                ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]    instanceof    UnparseableExtraData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
320	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getInitialValue();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getInitialValue();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getInitialValue();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getEntry();    	non-compiled	[CE]  ')'  expected	40	None	replace
321	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getOwnerId();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getOwnerId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getOwnerId();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
322	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExternId();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExternId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExternId();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
323	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExtraField();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExtraField();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getExtraField();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
324	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i].getHeaderId()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
325	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
326	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  unparseableExtra  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  unparseableExtra  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]  ||  unparseableExtra  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
330	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId()  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId()  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId()	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    extraFields.put(fields[i].getHeaderId(),    fields[i]);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
331	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)fields[i];  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  not  a  statement	1	None	replace
332	[BUG]  [BUGGY]  if(fields[i]  instanceof  UniparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UniparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UniparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
333	[BUG]  [BUGGY]  if(fields[i]  instanceof  UniqueExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UniqueExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UniqueExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
334	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instancesof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instancesof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  instancesof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
335	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[0]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[0]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[0]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ')'  expected	26	None	add
336	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
337	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  unparseableExtraFields[i]  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  unparseableExtraFields[i]  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  unparseableExtraFields[i]  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
338	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
339	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  }  (UnparseableExtraFieldData)fields[i])  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  }  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  }  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  ')'  expected	34	None	replace
340	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  ')'  expected	34	None	replace
341	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getUnderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
342	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullName()!=  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullName()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getFullName()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
343	[BUG]  [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]        ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  ||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
344	[BUG]  [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getUnparseableExtra()!=  null)  {  [CE]  ')'  expected  [FE]          ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getUnparseableExtra()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  ||  fields[i].getUnparseableExtra()!=  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
345	[BUG]  [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getExtraField()!=  null)  {  [CE]  ')'  expected  [FE]            ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getExtraField()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  ||  fields[i].getExtraField()!=  null)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
346	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getOwnerId();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getOwnerId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getOwnerId();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	57	None	replace
347	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getEntryId();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getEntryId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getEntryId();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	57	None	replace
348	[BUG]  [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null))  {  [CE]  ')'  expected  [FE]          ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()!=  null))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
349	[BUG]  [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]    instanceof    UnparseableExtraFieldData    ||    files[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
350	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  files[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]    instanceof    UnparseableExtraFieldData    ||    files[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
351	[BUG]  [BUGGY]  if(fields[i]!=  null  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]!=  null  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]!=  null  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
352	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData))  {	  	non-compiled	[CE]  ')'  expected	26	None	add
353	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    if(fields[i]  instanceof  UnparseableExtraData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  	non-compiled	[CE]  ')'  expected	26	None	add
354	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId()  +  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId()  +  1);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId()  +  1);	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	59	None	replace
355	[BUG]  [BUGGY]  UnparseableExtraTraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId(),  fields[i]);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraTraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraTraFieldData  unparseableExtra  =  getUnparseableExtra(fields[i].getHeaderId(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    getUnparseableExtra(fields[i].getHeaderId());    	non-compiled	[CE]  ')'  expected	59	None	replace
356	[BUG]  [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId().length!=  0)  {  [CE]  ')'  expected  [FE]        ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  ==  null  ||  fields[i].getHeaderId().length!=  0)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  ==  null  ||  fields[i].getHeaderId().length!=  0)  {	  if(fields[i]    ==    null    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
357	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  [Delete]  fields[i])  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  [Delete]  fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  [Delete]  fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
358	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  fields[i]))  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  fields[i]))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData  <  (UnparseableExtraFieldData  >  fields[i]))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData    >    fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
359	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  (UnparseableExtraFieldData)fields[i])  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  ')'  expected	34	None	replace
360	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  (UnparseableExtraFieldData)fields[i])  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  ')'  expected	34	None	replace
361	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i])  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    >=    (UnparseableExtraFieldData)fields[i])    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
362	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  (UnparseableExtraFieldData))  {  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  (UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  [Delete]  (UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ==    (UnparseableExtraFieldData))    {    	non-compiled	[CE]  ']'  expected	46	None	replace
363	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtra)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
364	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)fields[i]  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
365	[BUG]  [BUGGY]  If(fields[i]  ==  null  ||  fields[i].getHeaderId()!=  null)  {  [CE]  ';'  expected  [FE]            ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  ==  null  ||  fields[i].getHeaderId()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  ==  null  ||  fields[i].getHeaderId()!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
366	[BUG]  [BUGGY]  if(fields[i]!=  null  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]!=  null  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]!=  null  &&  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instancesof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
367	[BUG]  [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    instancesof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
368	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
369	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i],  extraFields[i]);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i],  extraFields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i],  extraFields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	38	None	replace
370	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i],  this);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i],  this);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getHeaderId(),  fields[i],  this);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	38	None	replace
371	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getBase(),  fields[i]);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getBase(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =  new  UnparseableExtraFieldData(fields[i].getBase(),  fields[i]);	  UnparseableExtraFieldData    unparseableExtra    =    new    UnparseableExtraFieldData(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	38	None	replace
372	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null))  {	  	non-compiled	[CE]  ')'  expected	10	None	add
373	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  {  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null)  {  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  {  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  {  null)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
374	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
375	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  ==  null)  {  [CE]  ')'  expected  [FE]                ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  ==  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraData  ||  fields[i].getHeaderId()  ==  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()!=    null)    {    if(fields[i]    instanceof    UnparseableExtraData    ||    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
376	[BUG]  [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getParent();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getParent();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	ZipExtraFieldData  unparseableExtra  =(ZipExtraFieldData)fields[i].getParent();	  ZipExtraFieldData    unparseableExtra    =(ZipExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	57	None	replace
377	[BUG]  [BUGGY]  if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i],  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraField)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraField)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
378	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]        ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
379	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()!=  null)  {  [CE]  ';'  expected  [FE]          ClassCastException      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getParent()!=  null)  {	  If(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
380	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  field  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  field  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  field  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  not  a  statement	5	None	replace
381	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  field  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)fields[i];  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  field  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  field  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData)    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	5	None	replace
382	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getImplicitReturn();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getImplicitReturn();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getImplicitReturn();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getEntry();    	non-compiled	[CE]  ')'  expected	40	None	replace
383	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null)  {  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    ==    null)    {    if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null))  {	  	non-compiled	[CE]  ')'  expected	8	None	add
384	[BUG]  [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData)  {  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i  instanceof  UnparseableExtraFieldData)  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  ']'  expected	30	None	replace
385	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  ')'  expected	30	None	replace
386	[BUG]  [BUGGY]  if(fields[i].getHeaderId()  ==  (UnparseableExtraFieldData)fields[i])  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i].getHeaderId()  ==  (UnparseableExtraFieldData)fields[i])  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i].getHeaderId()  ==  (UnparseableExtraFieldData)fields[i])  {	  if(unparseableExtra    instanceof    UnparseableExtraFieldData    <    (UnparseableExtra>)fields[i])    {    	non-compiled	[CE]  ')'  expected	30	None	replace
387	[BUG]  [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()!=  null))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()!=    null)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
388	[BUG]  [BUGGY]  If(fields[i]  ==  null  ||  fields[i]!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  ==  null  ||  fields[i]!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  ==  null  ||  fields[i]!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    If(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
389	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  ')'  expected	47	None	replace
390	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData)&&  fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
391	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UniparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UniparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UniparseableExtraFieldData)  {	  if(fields[i]    instanceof    UniparseableExtraFieldData    &&    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	75	None	replace
392	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    else    {    	non-compiled	[CE]  ')'  expected	65	None	replace
393	[BUG]  [BUGGY]  extraFields.put(fields[i].getShortName(),  fields[i]);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  extraFields.put(fields[i].getShortName(),  fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	extraFields.put(fields[i].getShortName(),  fields[i]);	  extraFields.put(fields[i].getHeaderId(),    fields[i]);    	non-compiled	[CE]  ')'  expected	56	None	replace
394	[BUG]  [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	If(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  instanceof  UnparseableExtraFieldData)  {	  if(unparseableExtra[i]    instanceof    UnparseableExtraFieldData    ||    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
395	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  >>  (UnparseableExtraFieldData)||  fields[i]  instanceof  UnparseableExtraFieldData)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)||    fields[i]    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
396	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  not  a  statement	1	None	replace
397	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  extraFields[i]  =  (UnparseableExtraFieldData)fields[i];  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  extraFields[i]  =  (UnparseableExtraFieldData)fields[i];  }  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFieldData)  {  extraFields[i]  =  (UnparseableExtraFieldData)fields[i];  }	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  ')'  expected	1	None	replace
398	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)fields[i];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFieldData)fields[i];	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData)fields[i];    	non-compiled	[CE]  not  a  statement	1	None	replace
399	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparsableExtraFieldData)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparsableExtraFieldData)  {	  if(fields[i]    instanceof    UnparsableExtraFieldData    &&    fields[i].getHeaderId()    instanceof    UnparseableExtraFieldData)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
400	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getElementId();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getElementId();  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getElementId();	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ')'  expected	36	None	replace
401	[BUG]  [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getHeaderId(),  fields[i];  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getHeaderId(),  fields[i];  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	UnparseableExtraFieldData  unparseableExtra  =(UnparseableExtraFieldData)fields[i].getHeaderId(),  fields[i];	  UnparseableExtraFieldData    unparseableExtra    =(UnparseableExtraFieldData)fields[i].getHeaderId();    	non-compiled	[CE]  ']'  expected	36	None	replace
402	[BUG]  [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra.clone  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra.clone  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	for(UnparseableExtraFieldData  unparseableExtra  :  fields[i])  {  if(fields[i]  instanceof  UnparseableExtraFieldData  {  (UnparseableExtraFieldData)unparseableExtra.clone	  if(fields[i]    instanceof    UnparseableExtraFieldData    {    (UnparseableExtraFieldData)fields[i];    }    	non-compiled	[CE]  ')'  expected	2	None	replace
403	[BUG]  [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(!(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i].getHeaderId()  ==  null))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
404	[BUG]  [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null))  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null))  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(!(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i].getHeaderId()  ==  null))  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    &&    fields[i].getHeaderId()    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
405	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]!=  null)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  <  (UnparseableExtraFieldData>)fields[i]!=  null)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    <    (UnparseableExtraFieldData>)fields[i]    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
406	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(externalAttributes);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(externalAttributes);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(externalAttributes);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
407	[BUG]  [BUGGY]  ((  ZipExtraFieldData)extraFields[i].getHeaderId()).setValue(fields[i]);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)extraFields[i].getHeaderId()).setValue(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)extraFields[i].getHeaderId()).setValue(fields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
408	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extraFields);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extraFields);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setValue(extraFields);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setValue(extra);    	non-compiled	[CE]  ')'  expected	78	None	replace
409	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFactory)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFactory)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  ||  fields[i]  instanceof  UnparseableExtraFactory)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
410	[BUG]  [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFactory)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFactory)  {  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	if(fields[i]  instanceof  UnparseableExtraFieldData  &&  fields[i]  instanceof  UnparseableExtraFactory)  {	  if(fields[i]    instanceof    UnparseableExtraFieldData    ||    fields[i]    instanceof    UnparseableExtra)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
411	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extraFields);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extraFields);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extraFields);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
412	[BUG]  [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(fields[i]);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {      [BUGGY]  ((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(fields[i]);  [BUGGY]      unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  extraFields.put(fields[i].getHeaderId(),  fields[i]);  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	294	294	2	replace	((  ZipExtraFieldData)fields[i].getHeaderId()).setExtra(fields[i]);	  ((    ZipExtraFieldData)fields[i].getHeaderId()).setExtra(extra);    	non-compiled	[CE]  ')'  expected	41	None	replace
