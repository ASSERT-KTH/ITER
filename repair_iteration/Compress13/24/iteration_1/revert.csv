projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getHeaderId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length;i<len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=2;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-5;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length();i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length/2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<extraFields.length&&i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outputFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<+extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+5;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,unparseableExtraFields.length;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i>=extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<externalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i==extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i!=extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-6;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getHeaderId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<internalAttributes.length;i++){
