projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getHeaderId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length;i<len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=2;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-5;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length();i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length/2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<extraFields.length&&i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outputFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<+extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+5;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,unparseableExtraFields.length;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i>=extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<externalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i==extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i!=extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length-6;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getHeaderId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<internalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){unparseableExtra.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length-1;i<len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length-2;i<len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length;i<len+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length+1;i<len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length;i>=len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<externalAttributes.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.externalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<externalAttributes.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outputAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<internalAttributes.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<size;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length-3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length-4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=2;i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length-5;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length*2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293LinkedHashMap<ZipShort,ZipExtraField>extraFields=newLinkedHashMap<ZipExtraField>();
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293LinkedHashMap<ZipShort,ZipExtraField>unparseableExtra=newLinkedHashMap<ZipExtraField>();
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,unparseableExtra.length=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,size=field.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId()+1);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i>=fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i!=fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i==fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<extraFields.length&&i!=fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<extraFields.length&&i>=fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<=extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293UnparseableExtraFieldDataunparseableExtra=(UnparseableExtraFieldData)fields.clone();
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293UnparseableExtraFieldDataunparseableExtra=newUnparseableExtraField(fields[i].getHeaderId());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293unparseableExtraFields=newZipExtraField(fields[i].getHeaderId());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outputFields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outputFields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outputFields[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outputFields.length+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length()-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length()+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length()-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length()+2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length()*2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length();i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<field.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId()+1);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<field.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<field.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId()+1);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getLeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<field.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId());}}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<extraFields.length&&i==fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.internalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<extraFields.length&&i<fields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-5;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId()+1);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.extraFields[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields[i].getHeaderId();i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<+extraFields[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<fields[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<sources[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length;i<unparseableExtraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=unparseableExtraFields.length;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,fieldCount;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,fieldCount;i<unparseableExtraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,fields.length;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,hashCode;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getName(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getRawId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getExtra(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getFullName(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getExtraId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0;i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0;i<fields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0;i<fields.length+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0;i<fields.length-3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0;i<fields.length-4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getName(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getRawId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getFullName(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getExtra(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getReturnType(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.extraFields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.extraFields[i].getHeaderId();i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.extraFields.length+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.extraFields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<extraFields.length&&i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<fields.length-1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i>=this.extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i!=this.extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i==this.extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<externalAttributes.length+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i>=externalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i==externalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<inputFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<this.outputFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<+outputFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields.length-6;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getSourceName(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i],fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i!=externalAttributes.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1;i<fields.length-6;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293LinkedHashMap<ZipShort,ZipExtraField>unparseableExtraFields=newLinkedHashMap<ZipShort,ZipExtraField>();
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293LinkedHashMap<ZipShort,ZipExtraField>unparseableExtra=newLinkedHashMap<ZipShort,ZipExtraField>();
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId()+1);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length/2+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length/3;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length/4;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293LinkedHashMap<ZipShort,ZipExtraField>extraFields=newLinkedHashMap<ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,unparseableExtraFields.length=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.size();i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length();i+=2){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields[i].length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<extraFields[i]instanceofZipExtraFieldData;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i].getHeaderId(),fields[i]
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i].getHeaderId(),fields[i]
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len=fields.length;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,unparseableExtraFields.length;i<fields.length+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,len;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.putAll(fields[i].getHeaderId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getExtraId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){unparseableExtraFields[i]=newZipExtraField(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<field.length&&i<+extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<+extraFields[i].length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields=newLinkedHashMap<ZipShort,ZipExtraField>();}else{extraFields.put(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<field.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,unparseableExtraFields=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,size=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0,unparseableExtraFields=fields.length;i<size;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+1;i>=extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length+this.extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&this.extraFields[i]!=null;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.extraFields.put(fields[i].getRawName(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<extraFields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293extraFields.put(fields[i].getShortName(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<extraFields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){for(inti=0;i<fields.length;++i){extraFields[i]=newZipExtraField(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length||i<extraFields.length-2;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){extraFields.put(fields[i].getHeaderId(),fields[i]);}else{extraFields.put(fields[i],fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293this.unparseableExtraFields.put(fields[i].getHeaderId(),fields[i]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields==null){extraFields.put(fields[i].getHeaderId(),fields[i]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293if(fields!=null){for(inti=0;i<fields.length;i++){extraFields[i]=newZipExtraField(fields[i].getHeaderId()
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<sources.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<internalAttributes;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<sourceFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<=+extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<+1;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<*+extraFields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=0,len=fields.length;i<len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=1,len=fields.length;i<len;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293UnparseableExtraFieldDataunparseableExtra=(UnparseableExtraFieldData)fields[i].getHeaderId();
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293For(inti=1;i<fields.length;i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293LinkedHashMap<ZipShort,ZipExtraField>extraFields=newLinkedHashMap<ZipExtraField>();}else{extraFields.put(fields[0].getHeaderId(),fields[1].getHeaderId());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0;i<fields.length&&i<outerFields[i];i++){
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java293for(inti=0,unparseableExtraFields.length;i<fields.length-1;i++){
