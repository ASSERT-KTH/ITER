bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[extraFields.size()  ]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
2	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[unparseableExtra.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[unparseableExtra.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[unparseableExtra.size()  ]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
3	[BUG]  [BUGGY]  Result.toArray(new  ZipExtraField[extraFields.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result.toArray(new  ZipExtraField[extraFields.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result.toArray(new  ZipExtraField[extraFields.size()  ]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
4	[BUG]  [BUGGY]  result.add(new  ZipExtraField[extraFields.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(new  ZipExtraField[extraFields.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(new  ZipExtraField[extraFields.size()  ]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
5	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[outputFields.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[outputFields.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[outputFields.size()  ]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
6	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result.size());  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result.size());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
7	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  -  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  -  1);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
8	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  -  2);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  -  2);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
9	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  +  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size()  +  1);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
10	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(unparseableExtra.size());  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(unparseableExtra.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(unparseableExtra.size());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
11	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result);  [CE]  class,  interface,  or  enum  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
12	[BUG]  [BUGGY]  if  (unparseableExtra  ==  null  ||  result  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ==  null  ||  result  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ==  null  ||  result  ==  null)  {	  if    (includeUnparseable    ||    result    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
13	[BUG]  [BUGGY]  if  (unparseableExtra  ||  result  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ||  result  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ||  result  ==  null)  {	  if    (includeUnparseable    ||    result    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
14	[BUG]  [BUGGY]  if  (unparseableExtra!=  null  ||  result  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra!=  null  ||  result  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra!=  null  ||  result  ==  null)  {	  if    (includeUnparseable    ||    result    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
15	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  -  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  -  1);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
16	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  +  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  +  1);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
17	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  -  2);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.size()  -  2);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
18	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
19	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
20	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  unparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  unparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  unparseable);	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
21	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  internalAttributes);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  internalAttributes);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  internalAttributes);	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
22	[BUG]  [BUGGY]  List  <  ZipExtraField>  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  List  <  ZipExtraField>  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	List  <  ZipExtraField>  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
23	[BUG]  [BUGGY]  ArrayList  <  ZipExtraField>  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  ArrayList  <  ZipExtraField>  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	ArrayList  <  ZipExtraField>  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
24	[BUG]  [BUGGY]  result.add(includeUnparseable,  unparseableExtra);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(includeUnparseable,  unparseableExtra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(includeUnparseable,  unparseableExtra);	  result.add(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
25	[BUG]  [BUGGY]  result.add(includeUnparseableExtra);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(includeUnparseableExtra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(includeUnparseableExtra);	  result.add(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
26	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }	  result.add(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
27	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(includeUnparseable);  }	  result.add(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
28	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.size());  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.size());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.size());  }	  result.add(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
29	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.get(result);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.get(result);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.get(result);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
30	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)result.clone();  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)result.clone();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)result.clone();	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
31	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)this.extraFields.clone();  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)this.extraFields.clone();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)this.extraFields.clone();	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
32	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)super.extraFields.clone();  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)super.extraFields.clone();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)super.extraFields.clone();	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
33	[BUG]  [BUGGY]  final  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.clone();  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  final  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.clone();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	final  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.clone();	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
34	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.toArray(result);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.toArray(result);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.toArray(result);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
35	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values(),  unparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values(),  unparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values(),  unparseable);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
36	[BUG]  [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
37	[BUG]  [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.keySet());    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
38	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(unparseableExtra);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(unparseableExtra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(unparseableExtra);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
39	[BUG]  [BUGGY]  byte[]  extra  =  unparseableExtra.get(includeUnparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  unparseableExtra.get(includeUnparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  unparseableExtra.get(includeUnparseable);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
40	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(rawName);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(rawName);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(rawName);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
41	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  unparseableExtra);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  unparseableExtra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(includeUnparseable,  unparseableExtra);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
42	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  result);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  result);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(includeUnparseable,  result);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
43	[BUG]  [BUGGY]  byte[]  extra  =  getExtraFields().get(includeUnparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  getExtraFields().get(includeUnparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  getExtraFields().get(includeUnparseable);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
44	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(rawName,  includeUnparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(rawName,  includeUnparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(rawName,  includeUnparseable);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
45	[BUG]  [BUGGY]  if  (unparseableExtra!=  null  ||  result!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra!=  null  ||  result!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra!=  null  ||  result!=  null)  {	  if    (includeUnparseable    ||    result!=    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
46	[BUG]  [BUGGY]  if  (unparseableExtra  ==  null  ||  result!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ==  null  ||  result!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ==  null  ||  result!=  null)  {	  if    (includeUnparseable    ||    result!=    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
47	[BUG]  [BUGGY]  if  (includeUnparseableExtra  ||  result!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra  ||  result!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra  ||  result!=  null)  {	  if    (includeUnparseable    ||    result!=    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
48	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.length  +  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.length  +  1);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
49	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.length());  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.length());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.length());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
50	[BUG]  [BUGGY]  if  (unparseableExtra  ==  null  ||  this.includeUnparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ==  null  ||  this.includeUnparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ==  null  ||  this.includeUnparseableExtra  ==  null)  {	  if    (this.includeUnparseable    ||    unparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
51	[BUG]  [BUGGY]  if  (unparseableExtra!=  null  ||  this.includeUnparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra!=  null  ||  this.includeUnparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra!=  null  ||  this.includeUnparseableExtra  ==  null)  {	  if    (this.includeUnparseable    ||    unparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
52	[BUG]  [BUGGY]  if  (unparseableExtra  ||  this.includeUnparseable  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ||  this.includeUnparseable  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ||  this.includeUnparseable  ==  null)  {	  if    (this.includeUnparseable    ||    unparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
53	[BUG]  [BUGGY]  if  (includeUnparseableExtra  ==  null  ||  unparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra  ==  null  ||  unparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra  ==  null  ||  unparseableExtra  ==  null)  {	  if    (unparseableExtra    ==    null    ||    includeUnparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
54	[BUG]  [BUGGY]  if  (unparseableExtra  ==  null  ||  unparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ==  null  ||  unparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ==  null  ||  unparseableExtra  ==  null)  {	  if    (unparseableExtra    ==    null    ||    includeUnparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
55	[BUG]  [BUGGY]  if  (includeUnparseableExtra!=  null  ||  unparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra!=  null  ||  unparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra!=  null  ||  unparseableExtra  ==  null)  {	  if    (unparseableExtra    ==    null    ||    includeUnparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
56	[BUG]  [BUGGY]  if  (unparseableExtra  ||  includeUnparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ||  includeUnparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ||  includeUnparseableExtra  ==  null)  {	  if    (includeUnparseableExtra    ||    unparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
57	[BUG]  [BUGGY]  result.add(externalAttributes);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(externalAttributes);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(externalAttributes);	  result.add(extraField);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
58	[BUG]  [BUGGY]  result.add(extraField,  unparseableExtra);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(extraField,  unparseableExtra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(extraField,  unparseableExtra);	  result.add(extraField);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
59	[BUG]  [BUGGY]  result.add(unparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(unparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(unparseable);	  result.add(extraField);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
60	[BUG]  [BUGGY]  result.addAll(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.addAll(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.addAll(extraFields.values());	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
61	[BUG]  [BUGGY]  result.addAll(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.addAll(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.addAll(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
62	[BUG]  [BUGGY]  result.addAll(unparseableExtra);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.addAll(unparseableExtra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.addAll(unparseableExtra);	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
63	[BUG]  [BUGGY]  result.addAll(extraFields.toArray(result));  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.addAll(extraFields.toArray(result));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.addAll(extraFields.toArray(result));	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
64	[BUG]  [BUGGY]  result.addAll(extraFields.toArray(new  ZipExtraField[result.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.addAll(extraFields.toArray(new  ZipExtraField[result.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.addAll(extraFields.toArray(new  ZipExtraField[result.size()  ]));	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
65	[BUG]  [BUGGY]  final  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>();  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  final  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	final  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>();	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
66	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(1);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
67	[BUG]  [BUGGY]  List  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>();  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  List  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	List  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>();	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
68	[BUG]  [BUGGY]  result.add(extra);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(extra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(extra);	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
69	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(unparseableExtra);  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
70	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
71	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.size());  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.size());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.size());  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
72	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.length);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.length);  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.length);  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
73	[BUG]  [BUGGY]  if  (unparseableExtra  ||  result!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ||  result!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ||  result!=  null)  {	  if    (unparseableExtra    &&    result!=    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
74	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result.values());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result.values());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
75	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  result);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  result);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  result);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
76	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result,  extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result,  extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(result,  extraFields.values());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
77	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
78	[BUG]  [BUGGY]  if  (unparseableExtra  ||  unparseableExtra!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra  ||  unparseableExtra!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra  ||  unparseableExtra!=  null)  {	  if    (includeUnparseableExtra    ||    unparseableExtra!=    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
79	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  +  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  +  1]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[extraFields.size()  +  1]);	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
80	[BUG]  [BUGGY]  Result.toArray(new  ZipExtraField[extraFields.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result.toArray(new  ZipExtraField[extraFields.size()  ]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result.toArray(new  ZipExtraField[extraFields.size()  ]);	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
81	[BUG]  [BUGGY]  result.add(new  ZipExtraField[extraFields.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(new  ZipExtraField[extraFields.size()  ]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(new  ZipExtraField[extraFields.size()  ]);	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
82	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  -  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  -  1]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[extraFields.size()  -  1]);	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
83	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[unparseableExtra.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[unparseableExtra.size()  ]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[unparseableExtra.size()  ]);	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
84	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  *  2]);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  *  2]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[extraFields.size()  *  2]);	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
85	[BUG]  [BUGGY]  if  (includeUnparseableExtra  &&  unparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra  &&  unparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra  &&  unparseableExtra  ==  null)  {	  if    (unparseableExtra    &&    includeUnparseable    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
86	[BUG]  [BUGGY]  if  (includeUnparseableExtra  &&  unparseableExtra!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra  &&  unparseableExtra!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra  &&  unparseableExtra!=  null)  {	  if    (unparseableExtra    &&    includeUnparseable    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
87	[BUG]  [BUGGY]  result.add(new  ZipExtraField[result.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(new  ZipExtraField[result.size()  ]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(new  ZipExtraField[result.size()  ]);	  result.toArray(new    ZipExtraField[result.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
88	[BUG]  [BUGGY]  if  (includeUnparseableExtra  ||  result  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra  ||  result  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra  ||  result  ==  null)  {	  if    (includeUnparseable    ||    result    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
89	[BUG]  [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.values());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
90	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
91	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values()  +  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values()  +  1);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
92	[BUG]  [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.keySet());  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.keySet());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.keySet());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.keySet());    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
93	[BUG]  [BUGGY]  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.keySet());    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
94	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.keySet());  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.keySet());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.keySet());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.keySet());    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
95	[BUG]  [BUGGY]  if  (this.includeUnparseable  &&  unparseableExtra  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (this.includeUnparseable  &&  unparseableExtra  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (this.includeUnparseable  &&  unparseableExtra  ==  null)  {	  if    (this.includeUnparseable    ||    unparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
96	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[externalAttributes.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[externalAttributes.size()  ]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[externalAttributes.size()  ]);	  result.toArray(new    ZipExtraField[result.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
97	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
98	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
99	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  result  =  new  ArrayList  <  ZipExtraField>();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  result  =  new  ArrayList  <  ZipExtraField>();  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(unparseableExtra);  }  else  {  result  =  new  ArrayList  <  ZipExtraField>();  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
100	[BUG]  [BUGGY]  if(extraFields!=  null)  {  result.toArray(new  ZipExtraField[extraFields.size()  ]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(extraFields!=  null)  {  result.toArray(new  ZipExtraField[extraFields.size()  ]);  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(extraFields!=  null)  {  result.toArray(new  ZipExtraField[extraFields.size()  ]);  }	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
101	[BUG]  [BUGGY]  if(extraFields!=  null)  {  result.toArray(new  ZipExtraField[extraFields.size()  ]);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(extraFields!=  null)  {  result.toArray(new  ZipExtraField[extraFields.size()  ]);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(extraFields!=  null)  {  result.toArray(new  ZipExtraField[extraFields.size()  ]);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
102	[BUG]  [BUGGY]  result.add(new  ZipExtraField[result.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(new  ZipExtraField[result.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(new  ZipExtraField[result.size()  ]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
103	[BUG]  [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable)  {  result.add(includeUnparseable);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }	  result.add(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
104	[BUG]  [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.size());  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.size());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
105	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.size());  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.size());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
106	[BUG]  [BUGGY]  if  (includeUnparseableExtra  &&  result!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra  &&  result!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra  &&  result!=  null)  {	  if    (unparseableExtra    &&    result!=    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
107	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(includeUnparseable));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(includeUnparseable));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(includeUnparseable));	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
108	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  externalAttributes);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  externalAttributes);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  externalAttributes);	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
109	[BUG]  [BUGGY]  if  (includeUnparseableExtra  &&  result  ==  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra  &&  result  ==  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra  &&  result  ==  null)  {	  if    (unparseableExtra    &&    includeUnparseable    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
110	[BUG]  [BUGGY]  ArrayList  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>(extraFields.size());  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  ArrayList  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>(extraFields.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	ArrayList  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>(extraFields.size());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
111	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(result));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(result));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(result));	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
112	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseableExtra);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseableExtra);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(includeUnparseableExtra);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
113	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  rawName);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  rawName);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(includeUnparseable,  rawName);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
114	[BUG]  [BUGGY]  result.add(unparseUnparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(unparseUnparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(unparseUnparseable);	  result.add(extraField);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
115	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(includeUnparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(includeUnparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(includeUnparseable);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
116	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
117	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  extraFields  =(LinkedHashMap  <  ZipExtraField>)extraFields.clone();  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  extraFields  =(LinkedHashMap  <  ZipExtraField>)extraFields.clone();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  extraFields  =(LinkedHashMap  <  ZipExtraField>)extraFields.clone();	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
118	[BUG]  [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.length);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.length);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedList  <  ZipExtraField>(extraFields.length);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
119	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.length);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.length);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(unparseableExtraFields.length);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
120	[BUG]  [BUGGY]  if  (unparseableExtra!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (unparseableExtra!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (unparseableExtra!=  null)  {	  if    (includeUnparseable    ||    result!=    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
121	[BUG]  [BUGGY]  if  (includeUnparseable)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseable)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseable)  {	  if    (unparseableExtra    ==    null    ||    includeUnparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
122	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  internalAttributes);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  internalAttributes);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  internalAttributes);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
123	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  externalAttributes);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  externalAttributes);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values(),  externalAttributes);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
124	[BUG]  [BUGGY]  ArrayList  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  ArrayList  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	ArrayList  <  ZipExtraField>  unparseableExtra  =  new  ArrayList  <  ZipExtraField>(extraFields.values());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
125	[BUG]  [BUGGY]  result.add(extraFields);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(extraFields);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(extraFields);	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
126	[BUG]  [BUGGY]  result.addAll(externalAttributes);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.addAll(externalAttributes);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.addAll(externalAttributes);	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
127	[BUG]  [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
128	[BUG]  [BUGGY]  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.size());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
129	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[externalAttributes.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[externalAttributes.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[externalAttributes.size()  ]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
130	[BUG]  [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  +  1]));  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.toArray(new  ZipExtraField[extraFields.size()  +  1]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.toArray(new  ZipExtraField[extraFields.size()  +  1]));	  result.toArray(new    ZipExtraField[result.size()    ]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
131	[BUG]  [BUGGY]  if  (this.includeUnparseable  ||  unparseableExtra!=  null)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (this.includeUnparseable  ||  unparseableExtra!=  null)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (this.includeUnparseable  ||  unparseableExtra!=  null)  {	  if    (this.includeUnparseable    ||    unparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
132	[BUG]  [BUGGY]  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.keySet());	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.keySet());    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
133	[BUG]  [BUGGY]  result.add(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(extraFields.toArray(new  ZipExtraField[extraFields.size()  ]));	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
134	[BUG]  [BUGGY]  result.add(externalAttributes[extraFields.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(externalAttributes[extraFields.size()  ]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(externalAttributes[extraFields.size()  ]);	  result.toArray(new    ZipExtraField[extraFields.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
135	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.get(includeUnparseable);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.get(includeUnparseable);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =(LinkedHashMap  <  ZipExtraField>)extraFields.get(includeUnparseable);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =(LinkedHashMap    <    ZipExtraField>)extraFields.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
136	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(8);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(8);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(8);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
137	[BUG]  [BUGGY]  if(includeUnparseable  ||  unparseableExtra  ==  null)  {  result.add(unparseableExtra);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable  ||  unparseableExtra  ==  null)  {  result.add(unparseableExtra);  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable  ||  unparseableExtra  ==  null)  {  result.add(unparseableExtra);  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
138	[BUG]  [BUGGY]  if(includeUnparseable  ||  unparseableExtra  ==  null)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(includeUnparseable  ||  unparseableExtra  ==  null)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(includeUnparseable  ||  unparseableExtra  ==  null)  {  result.add(unparseableExtra);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }	  result.add(unparseableExtra);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
139	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  sourceName);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable,  sourceName);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(includeUnparseable,  sourceName);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
140	[BUG]  [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  byte[]  extra  =  extraFields.get(includeUnparseable  +  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	byte[]  extra  =  extraFields.get(includeUnparseable  +  1);	  byte[]    extra    =    extraFields.get(includeUnparseable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
141	[BUG]  [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  ArrayList  <  ZipExtraField>(extraFields.values());  }	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
142	[BUG]  [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());  }	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
143	[BUG]  [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(extraFields!=  null)  {  result.addAll(extraFields);  }	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
144	[BUG]  [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if(extraFields!=  null)  {  result.addAll(extraFields);  }  else  {  return  new  ArrayList  <  ZipExtraField>();  }	  result.addAll(extraFields);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
145	[BUG]  [BUGGY]  if  (includeUnparseableExtra)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  if  (includeUnparseableExtra)  {  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	if  (includeUnparseableExtra)  {	  if    (unparseableExtra    ==    null    ||    includeUnparseableExtra    ==    null)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
146	[BUG]  [BUGGY]  result.add(new  ZipExtraField[externalAttributes.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(new  ZipExtraField[externalAttributes.size()  ]);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(new  ZipExtraField[externalAttributes.size()  ]);	  result.toArray(new    ZipExtraField[result.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
147	[BUG]  [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values()).toArray(result);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values()).toArray(result);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  ArrayList  <  ZipExtraField>(extraFields.values()).toArray(result);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
148	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()  +  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()  +  1);	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
149	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(0));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(0));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(0));	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
150	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()).clone();  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()).clone();  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()).clone();	  LinkedHashMap    <    ZipExtraField>    result    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
151	[BUG]  [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.length);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.length);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	Result  result  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.length);	  Result    result    =    new    ArrayList    <    ZipExtraField>(extraFields.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
152	[BUG]  [BUGGY]  result.add(extraFieldData);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  result.add(extraFieldData);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	result.add(extraFieldData);	  result.add(extraField);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
153	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(0));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(0));  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.get(0));	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.size());    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
154	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  extraFields  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  extraFields  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  extraFields  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values());	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
155	[BUG]  [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ZipExtraField[]  getExtraFields(boolean  includeUnparseable)  {  if  (extraFields  ==  null)  {  return  !includeUnparseable  ||  unparseableExtra  ==  null  ?  new  ZipExtraField[0]  :  new  ZipExtraField[]  {  unparseableExtra  };  }  List<ZipExtraField>  result  =  new  ArrayList<ZipExtraField>(extraFields.values());      [BUGGY]  LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()  +  1);  [BUGGY]      result.add(unparseableExtra);  }  return  result.toArray(new  ZipExtraField[0]);  }  [CLASS]  ZipArchiveEntry  [METHOD]  getExtraFields  [RETURN_TYPE]  ZipExtraField[]  boolean  includeUnparseable  [VARIABLES]  byte[]  extra  rawName  boolean  includeUnparseable  List  result  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.5773502691896258	328	328	2	replace	LinkedHashMap  <  ZipExtraField>  unparseableExtra  =  new  LinkedHashMap  <  ZipExtraField>(extraFields.values()  +  1);	  LinkedHashMap    <    ZipExtraField>    unparseableExtra    =    new    LinkedHashMap    <    ZipExtraField>(extraFields.values());    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
