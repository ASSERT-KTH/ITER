bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  extraFields.put(fields[i].getName(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i].getName(),  fields[i]);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i].getName(),  fields[i]);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  extraFields.put(fields[i].getHeaderId(),  unparseableExtra);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i].getHeaderId(),  unparseableExtra);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i].getHeaderId(),  unparseableExtra);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  extraFields.put(fields[i].getFullName(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i].getFullName(),  fields[i]);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i].getFullName(),  fields[i]);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  extraFields.put(fields[i].getExtra(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i].getExtra(),  fields[i]);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i].getExtra(),  fields[i]);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  extraFields.put(fields[i].getSourceName(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i].getSourceName(),  fields[i]);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i].getSourceName(),  fields[i]);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  extraFields.put(fields[i].getRawId(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i].getRawId(),  fields[i]);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i].getRawId(),  fields[i]);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]    [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	  	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  extraFields.put(fields[i],  unparseableExtra);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i],  unparseableExtra);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i],  unparseableExtra);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  extraFields.put(fields[i].getDataId(),  fields[i]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  void  setExtraFields(ZipExtraField[]  fields)  {  extraFields  =  new  LinkedHashMap<ZipShort,  ZipExtraField>();  for  (int  i  =  0;  i  <  fields.length;  i++)  {  if  (fields[i]  instanceof  UnparseableExtraFieldData)  {  unparseableExtra  =  (UnparseableExtraFieldData)  fields[i];  }  else  {  [BUGGY]  extraFields.put(fields[i].getDataId(),  fields[i]);  [BUGGY]  }  }  setExtra();  }  [CLASS]  ZipArchiveEntry  [METHOD]  setExtraFields  [RETURN_TYPE]  void  ZipExtraField[]  fields  [VARIABLES]  byte[]  extra  rawName  boolean  ZipExtraField[]  fields  String  entryName  name  GeneralPurposeBit  gpb  UnparseableExtraFieldData  unparseableExtra  int  PLATFORM_FAT  PLATFORM_UNIX  SHORT_MASK  SHORT_SHIFT  i  internalAttributes  method  mode  platform  value  long  externalAttributes  size  value  LinkedHashMap  extraFields  	projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java	0.6324555320336759	297	297	2	replace	extraFields.put(fields[i].getDataId(),  fields[i]);	extraFields.put(fields[i].getHeaderId(),  fields[i]);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
