projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[0]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[0]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(result);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[outputFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnoutputFields.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraFieldData[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(unparseableExtra);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[result.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[0]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{null});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[0]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[2]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[externalAttributes.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[outputFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[unparseableExtraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnoutputFields.toArray(newZipExtraField[outputFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewArrayList<ZipExtraField>(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[externalAttributes.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[externalAttributes.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newbyte[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[result.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()*1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields==null){returnnewArrayList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()])?null:result.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields==null){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0]});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[extraFields.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[extraFields.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields.toArray(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnoutputFields.toArray(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[0],unparseableExtra);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[]{unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[]{unparseable,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[]{unparseableExtra,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[outputFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0],unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[1]});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0]},unparseableExtra);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0]},null);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0]},extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0],rawName});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()0]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(result,newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(newZipExtraField[extraFields.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(newZipExtraField[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newbyte[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newbyte[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newbyte[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newbyte[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newbyte[result.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newbyte[result.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraFieldData[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraFieldData[result.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraFieldData[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraFieldData[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraFieldData[result.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraFieldData[outputFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(newZipExtraField[outputFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[2]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{rawName,unparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{source,unparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{sourceName,unparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{sourceName});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra},extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{rawName});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra,null});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{rawName,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{sourceName,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{source,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra,input});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(includeUnparseable);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(extraField);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.addAll(extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(externalAttributes);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(extraFields[0]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[result.size()+1];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[unparseableExtra.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[result.size()-1];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result=newZipExtraField[result.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewLinkedHashMap<ZipExtraField>(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewArrayList<ZipExtraField>(result.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewArrayList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewArrayList<ZipExtraField>(extraFields.size());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewArrayList<ZipExtraField>(unparseableExtra.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnresult.toArray(extraFields);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[result.size()])?null:result.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()])?null:result.toArray(newZipExtraField[result.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()])?null:result.toArray(newZipExtraField[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()])?null:result.toArray(newZipExtraField[result.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.add(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[result.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[extraAttributes.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[externalAttributes.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[extendAttributes.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[extraFields.size()+1];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[result.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable,null});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[unparseableExtraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[unparseableExtraFields.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[]{});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{0});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{},unparseableExtra);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[unparseableExtra.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[unparseableExtra.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields==null){returnnewArrayList<ZipExtraField>(result.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewArrayList<ZipExtraField>(result.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields==null){returnnewLinkedHashMap<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[extraFields.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(newZipExtraField[result.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(newZipExtraField[result.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{rawName,unparseableUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{source,unparseableUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{sourceName,unparseableUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra,unparseableUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{0},unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable,unparseableExtra,includeUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{null,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable,unparseableExtra},extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{0,unparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable,unparseableExtra,null});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(includeUnparseable){if(extraFields==null){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(includeUnparseable||extraFields==null){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(includeUnparseable){if(extraFields==null){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[extraFields.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[extraFields.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[extraFields.size()+2]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[extraFields.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){result.toArray(newZipExtraField[extraFields.size()]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[extraFields.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()*2]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[unparseableExtra.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraField[unparseableExtra.size()-1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra},externalAttributes);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra},null);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableextra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{source});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{enum});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[extraFields.size()1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[2]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewLinkedList<ZipExtraField>(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewArrayList<ZipExtraField>(unparseableExtraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewArrayList<ZipExtraField>(unparseUnparseable.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){result.toArray(newZipExtraField[extraFields.size()]);}else{returnnewArrayList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){result.toArray(newZipExtraField[extraFields.size()]);}else{extraFields=newLinkedHashMap<ZipExtraField>();}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewLinkedList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331while(extraFields!=null){result.add(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[]{null});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{null},unparseableExtra);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{null,null});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable,unparseableExtra==null?newZipExtraField[0]:unparseableExtra);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseable,unparseableExtra==null?newZipExtraField[0]:unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[extraFields.size()-1];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[outputFields.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnoutputFields.toArray(result);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[result.size()*2];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields.toArray(newbyte[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newString[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields.toArray(result);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseibleExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData(extraFields));
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[extraFields.size()*1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.remove(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(externalAttributes);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331while(extraFields!=null){extraFields=newLinkedHashMap<ZipExtraField>(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields!=null?newArrayList<ZipExtraField>(extraFields):result.toArray(result);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields!=null?newArrayList<ZipExtraField>():result.toArray(extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[3]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(result);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331Result.toArray(extraFields,newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.toArray(newZipExtraFieldData[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[3]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[0],this);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[size]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[4]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField(result.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[result.size()],extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraFieldData[result.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0],extra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0]},extra);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnoutputFields.toArray(newZipExtraField[result.size()+1]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[result.size()+1])?null:result.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnnewZipExtraField[unparseableExtraFields.size()];
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){result.toArray(newZipExtraField[extraFields.size()]);}else{returnnewArrayList<ZipExtraField>(extraFields.size());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){result.toArray(newZipExtraField[extraFields.size()]);}else{returnnewArrayList<ZipExtraField>(extraFields.size()]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{insertUnparseable,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{insertUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{inclusionUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraFieldData[externalAttributes.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{getUnparseableExtra()});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{},extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returninputFields.toArray(newZipExtraField[result.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.remove(newZipExtraField[unparseableExtra.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(externalAttributes!=null){result.toArray(newZipExtraField[externalAttributes.size()]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(externalAttributes!=null){result.toArray(newZipExtraField[externalAttributes.size()]);}else{returnnewArrayList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(externalAttributes!=null){result.toArray(newZipExtraField[extraFields.size()]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newArrayList<ZipExtraField>()});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newArrayList<ZipExtraField>(extraFields)});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{null},extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[0}]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields==null||extraFields.size()==0){returnnewArrayList<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewLinkedHashMap<ZipExtraField>(extraFields.values());}else{extraFields.add(extraField);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextractUnparseable?result.toArray(extraFields):newArrayList<ZipExtraField>(extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextractExtraFields.toArray(result);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(result!=null){result.toArray(newZipExtraField[0]);}else{returnnewArrayList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(result!=null){result.toArray(newZipExtraField[0]);}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(result!=null){result.add(newZipExtraField[0]);}else{returnnewArrayList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newbyte[outputFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields.toArray(result.toArray(newZipExtraField[extraFields.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnextraFields.toArray(result.toArray(newZipExtraField[extraFields.size()]));
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{(UnparseableExtra)unparseable,unparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra,insertUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{unparseableExtra,0});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(UnparseableExtraFieldData.extraFields);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField(extraFields));
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331ArrayList<ZipExtraField>extraFields=newArrayList<ZipExtraField>(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331ArrayList<ZipExtraField>extraFields=newArrayList<ZipExtraField>(result.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[4]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331returnresult.toArray(newZipExtraField[outerAttributes.size()]);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields==null||extraFields.values()!=null){returnnewArrayList<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331if(extraFields!=null){returnnewLinkedHashMap<ZipExtraField>(extraFields.values());}
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331newLinkedHashMap<ZipExtraField>(extraFields.values());
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{insertUnparseable?null:insertUnparseable:newZipExtraField[]{unparseableUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{newbyte[unparseableUnparseable]});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{includeUnparseable});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{insertUnparseable?null:insertUnparseable:unparseableUnparseable);
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[]{insertUnparseable?null:insertUnparseable:newZipExtraField[]{unparseableUnparseableExtra});
projects/Compress13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java331result.add(newZipExtraField[extraFields.size()],this);
