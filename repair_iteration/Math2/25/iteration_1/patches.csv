bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	add	this.numberOfSuccesses  =  numberOfSuccesses  /  1;	  this.numberOfSuccesses    =    numberOfSuccesses    -    1;    	compilable	  [FE]  AssertionError  	5	1	replace
2	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  /  1;	  this.numberOfSuccesses    =    numberOfSuccesses    -    1;    	compilable	  [FE]  AssertionError  	5	1	replace
3	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;	      int    numberOfSuccesses    =    rng.getNumberOfSuccesses();    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	2	None	replace
4	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    +    1;    this.numberOfSuccesses  =  numberOfSuccesses  +  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	6	None	add
5	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  int  numberOfSuccesses  =  numberOfSuccesses  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]      AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  int  numberOfSuccesses  =  numberOfSuccesses  +  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    +    1;    int  numberOfSuccesses  =  numberOfSuccesses  +  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	6	None	add
6	[BUG]  [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses,  numberOfSuccesses,	      if(numberOfSuccesses    <    numberOfSuccesses)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    populationSize,    	non-compiled	[CE]  not  a  statement	9	None	replace
7	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    -    1;    this.numberOfSuccesses  =  numberOfSuccesses  -  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	4	None	add
8	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  int  numberOfSuccesses  =  numberOfSuccesses  -  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]      AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  int  numberOfSuccesses  =  numberOfSuccesses  -  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    -    1;    int  numberOfSuccesses  =  numberOfSuccesses  -  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	4	None	add
9	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  this.populationSize  =  populationSize;  [CE]  variable  populationSize  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  this.populationSize  =  populationSize;  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  -  1;  this.populationSize  =  populationSize;	      this.numberOfSuccesses    =    numberOfSuccesses;    this.populationSize    =    populationSize;    	non-compiled	[CE]  variable  populationSize  might  already  have  been  assigned	3	None	replace
10	[BUG]  [BUGGY]  int  numberOfSuccesses  =  populationSize;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  int  numberOfSuccesses  =  populationSize;  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  populationSize;	      int    numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	8	None	replace
11	[BUG]  [BUGGY]  int  numberOfSuccesses  =  0;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  int  numberOfSuccesses  =  0;  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  0;	      int    numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	8	None	replace
12	[BUG]  [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  true);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  true);  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses,  numberOfSuccesses,  true);	      if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	10	None	replace
13	[BUG]  [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOf  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOf  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOf	      if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  ';'  expected	10	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  populationSize;  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	add	this.numberOfSuccesses  =  populationSize;	      this.numberOfSuccesses    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	1	11	replace
15	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  populationSize;  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  populationSize;	      this.numberOfSuccesses    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	1	11	replace
16	[BUG]  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,	      if(numberOfSuccesses    <    numberOfSuccesses)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    populationSize,    	non-compiled	[CE]  ')'  expected	9	None	replace
17	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  0)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	if(numberOfSuccesses  >  0)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,	      if(numberOfSuccesses    <    numberOfSuccesses)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    populationSize,    	non-compiled	[CE]  ')'  expected	9	None	replace
18	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  This.numberOfSuccesses  =  numberOfSuccesses  -  1;  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  This.numberOfSuccesses  =  numberOfSuccesses  -  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    -    1;    This.numberOfSuccesses  =  numberOfSuccesses  -  1;	  	non-compiled	[CE]  cannot  find  symbol  This	4	None	add
19	[BUG]  [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,	      if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	10	None	replace
20	[BUG]  [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,	      if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	10	None	replace
21	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  This.numberOfSuccesses  =  numberOfSuccesses  +  1;  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  This.numberOfSuccesses  =  numberOfSuccesses  +  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    +    1;    This.numberOfSuccesses  =  numberOfSuccesses  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	6	None	add
22	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  populationSize,  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  populationSize,  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  populationSize,	      if(numberOfSuccesses    <    numberOfSuccesses)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    populationSize,    	non-compiled	[CE]  ')'  expected	9	None	replace
23	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [BUGGY]    this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,	      if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  ')'  expected	10	None	replace
