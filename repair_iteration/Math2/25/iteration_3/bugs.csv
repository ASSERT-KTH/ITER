bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  false);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  false);  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses,  numberOfSuccesses,  false);	  this.numberOfSuccesses,    numberOfSuccesses,    true);    	non-compiled	[CE]  not  a  statement	12	None	replace
2	[BUG]  [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOf  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOf  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOf	  int    numberOfSuccesses)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOf    	non-compiled	[CE]  ';'  expected	13	None	replace
3	[BUG]  [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,	  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	19	None	replace
4	[BUG]  [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,	  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	20	None	replace
5	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  populationSize;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  populationSize;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    populationSize;    this.numberOfSuccesses  =  populationSize;	  	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	14	None	add
6	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  numberSize;  [CE]  cannot  find  symbol  numberSize  [FE]      AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  numberSize;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    populationSize;    this.numberOfSuccesses  =  numberSize;	  	non-compiled	[CE]  cannot  find  symbol  numberSize	14	None	add
7	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  PopulationSize;  [CE]  cannot  find  symbol  PopulationSize  [FE]        AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  PopulationSize;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    populationSize;    this.numberOfSuccesses  =  PopulationSize;	  	non-compiled	[CE]  cannot  find  symbol  PopulationSize	14	None	add
8	[BUG]  [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  ';'  expected	23	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  2;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	add	this.numberOfSuccesses  =  numberOfSuccesses  +  2;	  this.numberOfSuccesses    =    numberOfSuccesses    +    1;    This.numberOfSuccesses    =    numberOfSuccesses    +    1;    	compilable	  [FE]  AssertionError  	21	12	replace
10	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  2;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  2;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  +  2;	  this.numberOfSuccesses    =    numberOfSuccesses    +    1;    This.numberOfSuccesses    =    numberOfSuccesses    +    1;    	compilable	  [FE]  AssertionError  	21	12	replace
11	[BUG]  [BUGGY]  int  numberOfSuccesses  =  sampleSize;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  sampleSize;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  sampleSize;	  int    numberOfSuccesses    =    populationSize;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	10	None	replace
12	[BUG]  [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE;  [CE]  cannot  find  symbol  NumberOfSuccesses  [FE]    AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  NumberOfSuccesses.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE;	  this.numberOfSuccesses    =    populationSize;    	non-compiled	[CE]  cannot  find  symbol  NumberOfSuccesses	15	None	replace
13	[BUG]  [BUGGY]  int  numberOfSuccesses  =  0L;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  0L;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  0L;	  int    numberOfSuccesses    =    0;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	11	None	replace
14	[BUG]  [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses  +  1;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  numberOfSuccesses  +  1;	  this.numberOfSuccesses    =    numberOfSuccesses    +    1;    int    numberOfSuccesses    =    numberOfSuccesses    +    1;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	5	None	replace
15	[BUG]  [BUGGY]  This.numberOfSuccesses  =  numberOfSuccesses  -  1;  [CE]  cannot  find  symbol  This  [FE]        AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  This.numberOfSuccesses  =  numberOfSuccesses  -  1;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	This.numberOfSuccesses  =  numberOfSuccesses  -  1;	  this.numberOfSuccesses    =    numberOfSuccesses    -    1;    This.numberOfSuccesses    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  cannot  find  symbol  This	18	None	replace
16	[BUG]  [BUGGY]  this.populationSize  =  numberOfSuccesses;  [CE]  variable  populationSize  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.populationSize  =  numberOfSuccesses;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.populationSize  =  numberOfSuccesses;	  this.numberOfSuccesses    =    numberOfSuccesses    -    1;    this.populationSize    =    populationSize;    	non-compiled	[CE]  variable  populationSize  might  already  have  been  assigned	9	None	replace
17	[BUG]  [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses  -  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses  -  1;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  numberOfSuccesses  -  1;	  this.numberOfSuccesses    =    numberOfSuccesses    -    1;    int    numberOfSuccesses    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	8	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  2;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	add	this.numberOfSuccesses  =  numberOfSuccesses  /  2;	  this.numberOfSuccesses    =    numberOfSuccesses    /    1;    	compilable	  [FE]  AssertionError  	2	10	replace
19	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  2;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  /  2;	  this.numberOfSuccesses    =    numberOfSuccesses    /    1;    	compilable	  [FE]  AssertionError  	2	10	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  *  1;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	add	this.numberOfSuccesses  =  numberOfSuccesses  *  1;	  this.numberOfSuccesses    =    numberOfSuccesses    /    1;    	compilable	  [FE]  AssertionError  	2	1	replace
21	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  *  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  *  1;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  *  1;	  this.numberOfSuccesses    =    numberOfSuccesses    /    1;    	compilable	  [FE]  AssertionError  	2	1	replace
22	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    /    1;    this.numberOfSuccesses  =  numberOfSuccesses  /  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	1	None	add
23	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  this.numberOfSuccesses  =  numberOfSuccesses  /  2;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  this.numberOfSuccesses  =  numberOfSuccesses  /  2;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    numberOfSuccesses    /    1;    this.numberOfSuccesses  =  numberOfSuccesses  /  2;	  	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	1	None	add
24	[BUG]  [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);	  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	19	None	replace
25	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    populationSize,    	non-compiled	[CE]  ')'  expected	22	None	replace
26	[BUG]  [BUGGY]  if(numberOfSuccesses  >  0)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  populationSize,  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  >  0)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  populationSize,  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	if(numberOfSuccesses  >  0)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  populationSize,	  if(numberOfSuccesses    >    0)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    populationSize,    	non-compiled	[CE]  ')'  expected	17	None	replace
27	[BUG]  [BUGGY]  Integer  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOf  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  Integer  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOf  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	Integer  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOf	  int    numberOfSuccesses)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOf    	non-compiled	[CE]  ';'  expected	13	None	replace
28	[BUG]  [BUGGY]  int  numberOfSuccesses  =  populationSize  -  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  populationSize  -  1;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  populationSize  -  1;	  int    numberOfSuccesses    =    populationSize;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	10	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  2;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	add	this.numberOfSuccesses  =  numberOfSuccesses  -  2;	  this.numberOfSuccesses    =    numberOfSuccesses    -    1;    this.numberOfSuccesses    =    numberOfSuccesses    -    1;    	compilable	  [FE]  AssertionError  	7	12	replace
30	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  2;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  2;  [BUGGY]      this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  -  2;	  this.numberOfSuccesses    =    numberOfSuccesses    -    1;    this.numberOfSuccesses    =    numberOfSuccesses    -    1;    	compilable	  [FE]  AssertionError  	7	12	replace
31	[BUG]  [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  null);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses,  numberOfSuccesses,  null);  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses,  numberOfSuccesses,  null);	  this.numberOfSuccesses,    numberOfSuccesses,    true);    	non-compiled	[CE]  not  a  statement	12	None	replace
32	[BUG]  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	if(numberOfSuccesses  <  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  ')'  expected	23	None	replace
33	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  numberOfSuccesses;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  populationSize;  this.numberOfSuccesses  =  numberOfSuccesses;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses    =    populationSize;    this.numberOfSuccesses  =  numberOfSuccesses;	  	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	14	None	add
34	[BUG]  [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses	  NumberIsTooLargeException.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	19	None	replace
35	[BUG]  [BUGGY]  int  numberOfSuccesses  =  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  1;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses  =  1;	  int    numberOfSuccesses    =    0;    	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	11	None	replace
36	[BUG]  [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses;  [CE]  cannot  find  symbol  NumberOfSuccesses  [FE]    AssertionError    [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses;  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	this.numberOfSuccesses  =  NumberOfSuccesses;	  this.numberOfSuccesses    =    populationSize;    	non-compiled	[CE]  cannot  find  symbol  NumberOfSuccesses	15	None	replace
37	[BUG]  [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	int  numberOfSuccesses)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses	  int    numberOfSuccesses)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,    numberOf    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  NoSuchElementException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }      [BUGGY]  NoSuchElementException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  [BUGGY]      this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	108	108	1	replace	NoSuchElementException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,	  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    	non-compiled	[CE]  not  a  statement	20	None	replace
