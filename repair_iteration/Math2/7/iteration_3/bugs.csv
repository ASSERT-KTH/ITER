bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [FE]                AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  N  =  getNumberOfSuccesses()  -  1;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfSuccesses()  -  1;	  final    double    N    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	1	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getPopulationSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getPopulationSize();	  final    double    m    =    getSampleSize();    final    double    m    =    getPopulationSize();    	compilable	  [FE]  AssertionError  	14	1	replace
3	[BUG]  [BUGGY]  final  double  m  =  getPopulationSize();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  m  =  getPopulationSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getPopulationSize();	  final    double    m    =    getSampleSize();    final    double    m    =    getPopulationSize();    	compilable	  [FE]  AssertionError  	14	1	replace
4	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  m  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  int  sampleSize  =  getSampleSize();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	int  sampleSize  =  getSampleSize();	          final    int    sampleSize    =    getSampleSize();    int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol  m	10	None	replace
5	[BUG]  [BUGGY]  final  int  sampleSize  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  m  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  int  sampleSize  =  getNumberOfSuccesses()  +  1;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  sampleSize  =  getNumberOfSuccesses()  +  1;	  final    int    sampleSize    =    getSampleSize()    +    1;    	non-compiled	[CE]  cannot  find  symbol  m	11	None	replace
6	[BUG]  [BUGGY]  final  double  sampleSize  =  getNumberOfSuccesses()  -  1;  [CE]  cannot  find  symbol  m  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  sampleSize  =  getNumberOfSuccesses()  -  1;  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  sampleSize  =  getNumberOfSuccesses()  -  1;	  final    double    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	2	None	replace
7	[BUG]  [BUGGY]  final  int  sampleSize  =  getMaskSize();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  int  sampleSize  =  getMaskSize();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  sampleSize  =  getMaskSize();	          final    int    sampleSize    =    getSampleSize();    final    int    sampleSize    =    getMaskSize();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
8	[BUG]  [BUGGY]  final  double  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  m  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  final  double  sampleSize  =  getPopulationSize();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  sampleSize  =  getPopulationSize();	  final    double    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  m	2	None	replace
9	[BUG]  [BUGGY]  int  sampleSize  =  getMaskSize();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();      [BUGGY]  int  sampleSize  =  getMaskSize();  [BUGGY]      final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	int  sampleSize  =  getMaskSize();	          final    int    sampleSize    =    getSampleSize();    final    int    sampleSize    =    getMaskSize();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
