bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [FE]            AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  N  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  N  =  getNumberOfSuccesses();	      final    double    N    =    getSampleSize();    	non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	7	None	replace
2	[BUG]  [BUGGY]  final  double  sampleSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  sampleSize  =  getNumberOfSuccesses();	      final    double    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol  m	6	None	replace
3	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getNumberOfSuccesses();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	4	None	replace
4	[BUG]  [BUGGY]  final  int  sampleSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  m  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  sampleSize  =  getNumberOfSuccesses();	      final    int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol  m	9	None	replace
5	[BUG]  [BUGGY]  final  double  m  =  getSampleSize();  final  double  m  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getSampleSize();  final  double  m  =  getSampleSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getSampleSize();    final  double  m  =  getSampleSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	1	None	add
6	[BUG]  [BUGGY]  final  double  m  =  getSampleSize();  final  double  n  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getSampleSize();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getSampleSize();    final  double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	1	None	add
7	[BUG]  [BUGGY]      final  double  sampleSize  =  getSampleSize();  final  double  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  sampleSize  =  getSampleSize();  final  double  sampleSize  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    sampleSize    =    getSampleSize();    final  double  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()	5	None	add
8	[BUG]  [BUGGY]      final  double  sampleSize  =  getSampleSize();  Final  double  sampleSize  =  getSampleSize();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  double  sampleSize  =  getSampleSize();  Final  double  sampleSize  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    double    sampleSize    =    getSampleSize();    Final  double  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  not  a  statement	5	None	add
9	[BUG]  [BUGGY]      final  int  sampleSize  =  getSampleSize();  final  int  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  int  sampleSize  =  getSampleSize();  final  int  sampleSize  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    int    sampleSize    =    getSampleSize();    final  int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()	8	None	add
10	[BUG]  [BUGGY]      final  int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()  [FE]      AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    int    sampleSize    =    getSampleSize();    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()	8	None	add
11	[BUG]  [BUGGY]  final  int  sampleSize  =  getSampleSize()  +  1;  [CE]  cannot  find  symbol  m  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  int  sampleSize  =  getSampleSize()  +  1;  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  int  sampleSize  =  getSampleSize()  +  1;	      final    int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol  m	9	None	replace
12	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]        AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  n  =  getPopulationSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  n  =  getPopulationSize();	      final    double    n    =    getSampleSize();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	4	None	replace
13	[BUG]  [BUGGY]      final  int  sampleSize  =  getSampleSize();  Final  int  sampleSize  =  getSampleSize();  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  int  sampleSize  =  getSampleSize();  Final  int  sampleSize  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    int    sampleSize    =    getSampleSize();    Final  int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  not  a  statement	8	None	add
14	[BUG]  [BUGGY]  final  double  m  =  getSampleSize();  final  double  m  =  getPopulationSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]  final  double  m  =  getSampleSize();  final  double  m  =  getPopulationSize();  [BUGGY]    final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final    double    m    =    getSampleSize();    final  double  m  =  getPopulationSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	1	None	add
15	[BUG]  [BUGGY]      final  int  sampleSize  =  getSampleSize();  final  int  sampleSize  =  getMaskSize();  [CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]    protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();    [BUGGY]      final  int  sampleSize  =  getSampleSize();  final  int  sampleSize  =  getMaskSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	        final    int    sampleSize    =    getSampleSize();    final  int  sampleSize  =  getMaskSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  calculateNumericalVariance()	8	None	add
