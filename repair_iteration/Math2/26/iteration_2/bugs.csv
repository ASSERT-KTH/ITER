bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  populationSize  /  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	add	this.populationSize  =  populationSize  /  1;	  this.populationSize    =    populationSize    +    1;    	compilable	  [FE]  AssertionError  	5	1	replace
2	[BUG]  [BUGGY]  this.populationSize  =  populationSize  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  populationSize  /  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.populationSize  =  populationSize  /  1;	  this.populationSize    =    populationSize    +    1;    	compilable	  [FE]  AssertionError  	5	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  numberOfSuccesses  +  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	add	this.populationSize  =  numberOfSuccesses  +  1;	      this.populationSize    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	2	13	replace
4	[BUG]  [BUGGY]  this.populationSize  =  numberOfSuccesses  +  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  numberOfSuccesses  +  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.populationSize  =  numberOfSuccesses  +  1;	      this.populationSize    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	2	13	replace
5	[BUG]  [BUGGY]  this.populationSize  =  populationSize  +  1;  this.populationSize  =  populationSize  +  1;  [CE]  variable  populationSize  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  populationSize  +  1;  this.populationSize  =  populationSize  +  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.populationSize    =    populationSize    +    1;    this.populationSize  =  populationSize  +  1;	  	non-compiled	[CE]  variable  populationSize  might  already  have  been  assigned	4	None	add
6	[BUG]  [BUGGY]  this.populationSize  =  populationSize  +  1;  this.populationSize  =  numberSize  +  1;  [CE]  cannot  find  symbol  numberSize  [FE]      AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  populationSize  +  1;  this.populationSize  =  numberSize  +  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.populationSize    =    populationSize    +    1;    this.populationSize  =  numberSize  +  1;	  	non-compiled	[CE]  cannot  find  symbol  numberSize	4	None	add
7	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize  -  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.numberOfSuccesses  =  populationSize  -  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.numberOfSuccesses  =  populationSize  -  1;	      this.numberOfSuccesses    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	6	None	replace
8	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize  +  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.numberOfSuccesses  =  populationSize  +  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.numberOfSuccesses  =  populationSize  +  1;	      this.numberOfSuccesses    =    numberOfSuccesses    +    1;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	3	None	replace
9	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  /  1;	      this.numberOfSuccesses    =    numberOfSuccesses    +    1;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	3	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  numberOfSuccesses  -  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	add	this.populationSize  =  numberOfSuccesses  -  1;	      this.populationSize    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	2	13	replace
11	[BUG]  [BUGGY]  this.populationSize  =  numberOfSuccesses  -  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  numberOfSuccesses  -  1;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.populationSize  =  numberOfSuccesses  -  1;	      this.populationSize    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	2	13	replace
12	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1L;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1L;  [BUGGY]    this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  -  1L;	      this.numberOfSuccesses    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
13	[BUG]  [BUGGY]  this.populationSize  =  populationSize  +  1;  this.populationSize  =  PopulationSize  +  1;  [CE]  cannot  find  symbol  PopulationSize  [FE]    AssertionError    [CONTEXT]    if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;    [BUGGY]  this.populationSize  =  populationSize  +  1;  this.populationSize  =  PopulationSize  +  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	109	109	1	replace	this.populationSize    =    populationSize    +    1;    this.populationSize  =  PopulationSize  +  1;	  	non-compiled	[CE]  cannot  find  symbol  PopulationSize	4	None	add
