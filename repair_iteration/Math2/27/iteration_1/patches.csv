bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.numberOfSuccesses  =  populationSize;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.numberOfSuccesses  =  populationSize;	      this.numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	1	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  /  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	add	this.sampleSize  =  sampleSize  /  1;	  this.sampleSize    =    sampleSize    +    1;    	compilable	  [FE]  AssertionError  	5	1	replace
3	[BUG]  [BUGGY]  this.sampleSize  =  sampleSize  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  /  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize  =  sampleSize  /  1;	  this.sampleSize    =    sampleSize    +    1;    	compilable	  [FE]  AssertionError  	5	1	replace
4	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  2;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  2;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  +  2;	      this.numberOfSuccesses    =    numberOfSuccesses    +    1;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	3	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  numberOfSuccesses  +  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	add	this.sampleSize  =  numberOfSuccesses  +  1;	      this.sampleSize    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	2	10	replace
6	[BUG]  [BUGGY]  this.sampleSize  =  numberOfSuccesses  +  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  numberOfSuccesses  +  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize  =  numberOfSuccesses  +  1;	      this.sampleSize    =    numberOfSuccesses;    	compilable	  [FE]  AssertionError  	2	10	replace
7	[BUG]  [BUGGY]  this.sampleSize  =  sampleSize  +  1;  this.sampleSize  =  sampleSize  +  1;  [CE]  variable  sampleSize  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  +  1;  this.sampleSize  =  sampleSize  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    sampleSize    +    1;    this.sampleSize  =  sampleSize  +  1;	  	non-compiled	[CE]  variable  sampleSize  might  already  have  been  assigned	4	None	add
8	[BUG]  [BUGGY]  this.sampleSize  =  sampleSize  +  1;  int  sampleSize  =  numberOfSuccesses  +  1;  [CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]      AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  +  1;  int  sampleSize  =  numberOfSuccesses  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    sampleSize    +    1;    int  sampleSize  =  numberOfSuccesses  +  1;	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	4	None	add
9	[BUG]  [BUGGY]  this.sampleSize  =  sampleSize  +  1;  int  sampleSize  =  sampleSize  +  1;  [CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  +  1;  int  sampleSize  =  sampleSize  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    sampleSize    +    1;    int  sampleSize  =  sampleSize  +  1;	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	4	None	add
10	[BUG]  [BUGGY]  this.sampleSize  =  populationSize;  this.sampleSize  =  populationSize;  [CE]  variable  sampleSize  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  populationSize;  this.sampleSize  =  populationSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    populationSize;    this.sampleSize  =  populationSize;	  	non-compiled	[CE]  variable  sampleSize  might  already  have  been  assigned	7	None	add
11	[BUG]  [BUGGY]  this.sampleSize  =  populationSize;  this.sampleSize  =  numberSize;  [CE]  cannot  find  symbol  numberSize  [FE]      AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  populationSize;  this.sampleSize  =  numberSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    populationSize;    this.sampleSize  =  numberSize;	  	non-compiled	[CE]  cannot  find  symbol  numberSize	7	None	add
12	[BUG]  [BUGGY]  this.sampleSize  =  populationSize;  this.sampleSize  =  PopulationSize;  [CE]  cannot  find  symbol  PopulationSize  [FE]        AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  populationSize;  this.sampleSize  =  PopulationSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    populationSize;    this.sampleSize  =  PopulationSize;	  	non-compiled	[CE]  cannot  find  symbol  PopulationSize	7	None	add
13	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize  -  numberOfSuccesses;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.numberOfSuccesses  =  populationSize  -  numberOfSuccesses;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.numberOfSuccesses  =  populationSize  -  numberOfSuccesses;	      this.numberOfSuccesses    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	6	None	replace
14	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  populationSize;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  populationSize;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  /  populationSize;	      this.numberOfSuccesses    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	6	None	replace
15	[BUG]  [BUGGY]  this.sampleSize  =  sampleSize  +  1;  this.populationSize  =  sampleSize  +  1;  [CE]  variable  populationSize  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  +  1;  this.populationSize  =  sampleSize  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    sampleSize    +    1;    this.populationSize  =  sampleSize  +  1;	  	non-compiled	[CE]  variable  populationSize  might  already  have  been  assigned	4	None	add
16	[BUG]  [BUGGY]  this.sampleSize  =  sampleSize  +  1;  this.sampleSize  +  1;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  +  1;  this.sampleSize  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    sampleSize    +    1;    this.sampleSize  +  1;	  	non-compiled	[CE]  not  a  statement	4	None	add
17	[BUG]  [BUGGY]  this.sampleSize  =  sampleSize  +  1;  This.sampleSize  =  sampleSize  +  1;  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.sampleSize  =  sampleSize  +  1;  This.sampleSize  =  sampleSize  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.sampleSize    =    sampleSize    +    1;    This.sampleSize  =  sampleSize  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	4	None	add
18	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  /  1;	      this.numberOfSuccesses    =    numberOfSuccesses    +    1;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	3	None	replace
19	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  [CE]  variable  numberOfSuccesses  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]    throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  1;  [BUGGY]    this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	110	110	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  -  1;	      this.numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  variable  numberOfSuccesses  might  already  have  been  assigned	1	None	replace
