bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  sampleSize  =  getSupportLowerBound();  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  sampleSize  =  getSupportLowerBound();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSupportLowerBound();	      int    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	11	None	replace
2	[BUG]  [BUGGY]  int  sampleSize  =  getSumportLowerBound();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  sampleSize  =  getSumportLowerBound();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSumportLowerBound();	      int    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
3	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getSampleSize());  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getSampleSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getSampleSize());	      int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	13	None	replace
4	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	8	None	add
5	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  int  sampleSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	8	None	add
6	[BUG]  [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	12	None	add
7	[BUG]  [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getVarianceSize());  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getVarianceSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getVarianceSize());	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	12	None	add
8	[BUG]  [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPositionSize());  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]        AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPositionSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPositionSize());	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	12	None	add
9	[BUG]  [BUGGY]      int  sampleSize  =  getPopulationSize();  int  sampleSize  =  getPopulationSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getPopulationSize();  int  sampleSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getPopulationSize();    int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	10	None	add
10	[BUG]  [BUGGY]      int  sampleSize  =  getPopulationSize();  Integer  sampleSize  =  getPopulationSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getPopulationSize();  Integer  sampleSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getPopulationSize();    Integer  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	10	None	add
11	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  int  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getSampleSize();    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	6	None	add
12	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  Integer  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  Integer  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getSampleSize();    Integer  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	6	None	add
13	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	3	None	add
14	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  getSampleSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	3	None	add
15	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  getPopulationSize();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	3	None	add
16	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize()  +  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]            AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  sampleSize  =  getSampleSize()  +  getNumberOfSuccesses();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSampleSize()  +  getNumberOfSuccesses();	      	non-compiled	[CE]  missing  return  statement	5	None	replace
17	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	1	None	add
18	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  getSampleSize();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  getSampleSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  unreachable  statement	1	None	add
19	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  getPopulationSize();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  getPopulationSize();  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  unreachable  statement	1	None	add
20	[BUG]  [BUGGY]  int  sampleSize  =  getPopulationLowerBound();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  sampleSize  =  getPopulationLowerBound();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getPopulationLowerBound();	      int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
21	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	1	None	add
22	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	1	None	add
23	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getNumberOfSuccesses();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    Integer  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	8	None	add
24	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfLowerBounds();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  sampleSize  =  getNumberOfLowerBounds();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getNumberOfLowerBounds();	      int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
25	[BUG]  [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());	  	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	12	None	add
26	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());	      int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	13	None	replace
27	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	3	None	add
28	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  *  getPopulationSize());  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  *  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  *  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	3	None	add
29	[BUG]  [BUGGY]      int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getPopulationSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getPopulationSize();    Int  sampleSize  =  getPopulationSize();	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
30	[BUG]  [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getNumberOfSuccesses();  Int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getNumberOfSuccesses();    Int  sampleSize  =  getNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
31	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());	  	non-compiled	[CE]  unreachable  statement	1	None	add
32	[BUG]  [BUGGY]      int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  int  getSupportLowerBound()  {    [BUGGY]      int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getSampleSize();  [BUGGY]    return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	        int    sampleSize    =    getSampleSize();    Int  sampleSize  =  getSampleSize();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
