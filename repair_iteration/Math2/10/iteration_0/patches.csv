bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	compilable	  [FE]  AssertionError  	19	7	replace
2	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	compilable	  [FE]  AssertionError  	19	7	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	compilable	  [FE]  AssertionError  	19	7	replace
4	[BUG]  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]  return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	compilable	  [FE]  AssertionError  	19	7	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]        AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	  	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	non-compiled	[CE]  missing  return  statement	19	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	20	1	add
7	[BUG]  [BUGGY]    int  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	20	1	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  sampleSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	20	1	add
9	[BUG]  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  sampleSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	20	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  sampleSize  =  getPopulationSize();		compilable	  [FE]  AssertionError  	20	1	add
11	[BUG]  [BUGGY]    int  sampleSize  =  getPopulationSize();  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  sampleSize  =  getPopulationSize();		compilable	  [FE]  AssertionError  	20	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());		compilable	  [FE]  AssertionError  	20	1	add
13	[BUG]  [BUGGY]    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());		compilable	  [FE]  AssertionError  	20	1	add
