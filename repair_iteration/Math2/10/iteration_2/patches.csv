bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  Int  sampleSize  =  getSampleSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	Int  sampleSize  =  getSampleSize();	          int    sampleSize    =    getSampleSize();    Int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
2	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize()  +  getPopulationSize();  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getSampleSize()  +  getPopulationSize();  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSampleSize()  +  getPopulationSize();	  int    sampleSize    =    getSampleSize()    +    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	16	None	replace
3	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize()  *  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSampleSize()  *  getNumberOfSuccesses();	  int    sampleSize    =    getSampleSize()    +    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	16	None	replace
4	[BUG]  [BUGGY]  Integer  sampleSize  =  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  Integer  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	Integer  sampleSize  =  getNumberOfSuccesses();	          int    sampleSize    =    getNumberOfSuccesses();    Integer    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	23	None	replace
5	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());	  return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	17	None	replace
6	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getPopulationSize()  +  getNumberOfSuccesses()  -  getSampleSize());  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getPopulationSize()  +  getNumberOfSuccesses()  -  getSampleSize());  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getPopulationSize()  +  getNumberOfSuccesses()  -  getSampleSize());	  int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getSampleSize());    	non-compiled	[CE]  missing  return  statement	3	None	replace
7	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getVarianceSize());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getVarianceSize());  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getVarianceSize());	          int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getVarianceSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
8	[BUG]  [BUGGY]  Integer  sampleSize  =  getSampleSize();  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  Integer  sampleSize  =  getSampleSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	Integer  sampleSize  =  getSampleSize();	          int    sampleSize    =    getSampleSize();    Integer    sampleSize    =    getSampleSize();    	non-compiled	[CE]  missing  return  statement	12	None	replace
9	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  /  getPopulationSize());	  return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int    sampleSize    =    FastMath.min(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	21	None	replace
10	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  *  getPopulationSize());	  return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int    sampleSize    =    FastMath.min(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	21	None	replace
11	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  *  getPopulationSize());  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  *  getPopulationSize());  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getSampleSize()  *  getPopulationSize());	  return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getSampleSize()    *    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	28	None	replace
12	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  *  getPopulationSize());  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  *  getPopulationSize());  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  *  getPopulationSize());	  return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getSampleSize()    *    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	28	None	replace
13	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPositionSize());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPositionSize());  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPositionSize());	          int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPositionSize());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
14	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.min(0,  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());	  return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    int    sampleSize    =    FastMath.min(0,    getSampleSize()    +    getNumberOfSuccesses()    *    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	27	None	replace
15	[BUG]  [BUGGY]  Integer  sampleSize  =  getPopulationSize();  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  Integer  sampleSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	Integer  sampleSize  =  getPopulationSize();	          int    sampleSize    =    getPopulationSize();    Integer    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  missing  return  statement	10	None	replace
16	[BUG]  [BUGGY]  int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSampleSize();  Int  sampleSize  =  getPopulationSize();	          int    sampleSize    =    getPopulationSize();    Int    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
17	[BUG]  [BUGGY]  int  sampleSize  =  getSummarySize();  Int  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getSummarySize();  Int  sampleSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSummarySize();  Int  sampleSize  =  getPopulationSize();	          int    sampleSize    =    getPopulationSize();    Int    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
18	[BUG]  [BUGGY]  int  sampleSize  =  getPopulationSize()  +  getNumberOfSuccesses();  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getPopulationSize()  +  getNumberOfSuccesses();  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getPopulationSize()  +  getNumberOfSuccesses();	  int    sampleSize    =    getSampleSize()    +    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	16	None	replace
19	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  +  getSampleSize();  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  +  getSampleSize();  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getNumberOfSuccesses()  +  getSampleSize();	  int    sampleSize    =    getSampleSize()    +    getNumberOfSuccesses();    	non-compiled	[CE]  missing  return  statement	16	None	replace
20	[BUG]  [BUGGY]  int  sampleSize  =  getSupportLowerBound();  Int  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getSupportLowerBound();  Int  sampleSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getSupportLowerBound();  Int  sampleSize  =  getPopulationSize();	          int    sampleSize    =    getPopulationSize();    Int    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
21	[BUG]  [BUGGY]  int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getSampleSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getPopulationSize();  Int  sampleSize  =  getSampleSize();	          int    sampleSize    =    getPopulationSize();    Int    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
22	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getPopulationSize());	          int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getNumberOfSuccesses()    +    getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	25	None	replace
23	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getVarianceSize()  -  getPopulationSize());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getVarianceSize()  -  getPopulationSize());  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getSampleSize()  +  getVarianceSize()  -  getPopulationSize());	          int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getVarianceSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
24	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getPopulationSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getPopulationSize();	          int    sampleSize    =    getPopulationSize();    Integer    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	10	None	replace
25	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getSampleSize();  [CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getSampleSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  getNumberOfSuccesses();  Integer  sampleSize  =  getSampleSize();	          int    sampleSize    =    getSampleSize();    Integer    sampleSize    =    getSampleSize();    	non-compiled	[CE]  variable  sampleSize  is  already  defined  in  method  getSupportLowerBound()	12	None	replace
26	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getPopulationSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getPopulationSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getPopulationSize()  +  getNumberOfSuccesses()  -  getPopulationSize());	          int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getNumberOfSuccesses()    +    getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	25	None	replace
27	[BUG]  [BUGGY]  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]      getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	int  sampleSize  =  FastMath.max(0,  getNumberOfSuccesses()  +  getNumberOfSuccesses()  -  getPopulationSize());	  return    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    /    getPopulationSize());    int    sampleSize    =    FastMath.max(0,    getSampleSize()    +    getNumberOfSuccesses()    -    getPopulationSize());    	non-compiled	[CE]  missing  return  statement	22	None	replace
28	[BUG]  [BUGGY]  Int  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  int  getSupportLowerBound()  {      [BUGGY]  Int  sampleSize  =  getPopulationSize();  [BUGGY]      return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	Int  sampleSize  =  getPopulationSize();	          int    sampleSize    =    getPopulationSize();    Int    sampleSize    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
