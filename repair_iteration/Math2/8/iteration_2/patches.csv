bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  n  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  +  1;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  sampleSize  =  getNumberOfSuccesses()  +  1;	  int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	1	None	replace
2	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize();  final  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getPopulationSize();  final  double  n  =  getPopulationSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getPopulationSize();    final  double  n  =  getPopulationSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	15	None	add
3	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize();  final  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getPopulationSize();  final  double  n  =  getSampleSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getPopulationSize();    final  double  n  =  getSampleSize();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	15	None	add
4	[BUG]  [BUGGY]  double  sampleSize  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  double  sampleSize  =  getNumberOfSuccesses();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	double  sampleSize  =  getNumberOfSuccesses();	  double    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol  n	2	None	replace
5	[BUG]  [BUGGY]  Int  sampleSize  =  getSampleSize();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  Int  sampleSize  =  getSampleSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	Int  sampleSize  =  getSampleSize();	          int    sampleSize    =    getSampleSize();    Int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  final  double  n  =  getNumberOfSuccesses()  +  1;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  final  double  n  =  getNumberOfSuccesses()  +  1;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getNumberOfSuccesses()    +    1;    final  double  n  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	6	None	add
7	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  final  double  m  =  getNumberOfSuccesses()  +  1;  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]      AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  final  double  m  =  getNumberOfSuccesses()  +  1;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getNumberOfSuccesses()    +    1;    final  double  m  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	6	None	add
8	[BUG]  [BUGGY]  final  double  sampleSize  =  getNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  n  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  sampleSize  =  getNumberOfSuccesses()  +  1;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  sampleSize  =  getNumberOfSuccesses()  +  1;	  final    double    sampleSize    =    getSampleSize()    +    1;    	non-compiled	[CE]  cannot  find  symbol  n	8	None	replace
9	[BUG]  [BUGGY]  final  double  sampleSize  =  getMaskSize();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  sampleSize  =  getMaskSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  sampleSize  =  getMaskSize();	          final    double    sampleSize    =    getSampleSize();    final    double    sampleSize    =    getMaskSize();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
10	[BUG]  [BUGGY]  double  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  n  [FE]          AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  double  sampleSize  =  getPopulationSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	double  sampleSize  =  getPopulationSize();	  double    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol  n	2	None	replace
11	[BUG]  [BUGGY]  int  sampleSize  =  getPopulationSize();  [CE]  cannot  find  symbol  n  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  sampleSize  =  getPopulationSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  sampleSize  =  getPopulationSize();	          int    sampleSize    =    getSampleSize();    int    sampleSize    =    getSampleSize();    	non-compiled	[CE]  cannot  find  symbol  n	9	None	replace
12	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  final  double  n  =  getNumberOfSuccesses()  +  2;  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getNumberOfSuccesses()  +  1;  final  double  n  =  getNumberOfSuccesses()  +  2;  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getNumberOfSuccesses()    +    1;    final  double  n  =  getNumberOfSuccesses()  +  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	6	None	add
13	[BUG]  [BUGGY]  n  =  getSampleSize();  final  double  sampleSize  =  getMaskSize();  [CE]  cannot  find  symbol  n  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  n  =  getSampleSize();  final  double  sampleSize  =  getMaskSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	n  =  getSampleSize();  final  double  sampleSize  =  getMaskSize();	          final    double    sampleSize    =    getSampleSize();    final    double    sampleSize    =    getMaskSize();    	non-compiled	[CE]  cannot  find  symbol  n	22	None	replace
14	[BUG]  [BUGGY]  final  double  n  =  getPopulationSize();  final  double  m  =  getPopulationSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError    [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  final  double  n  =  getPopulationSize();  final  double  m  =  getPopulationSize();  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final    double    n    =    getPopulationSize();    final  double  m  =  getPopulationSize();	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	15	None	add
15	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  n  =  getNumberOfSuccesses();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	n  =  getNumberOfSuccesses();	  final    double    n    =    getNumberOfSuccesses();    final    double    n    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
16	[BUG]  [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  -  1;  [CE]  cannot  find  symbol  n  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  sampleSize  =  getNumberOfSuccesses()  -  1;  [BUGGY]      final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  sampleSize  =  getNumberOfSuccesses()  -  1;	  int    sampleSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol  n	1	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  n  =  getNumberOfSuccesses();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	int  n  =  getNumberOfSuccesses();	  final    double    n    =    getNumberOfSuccesses();    final    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	19	2	replace
18	[BUG]  [BUGGY]  int  n  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  int  n  =  getNumberOfSuccesses();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	int  n  =  getNumberOfSuccesses();	  final    double    n    =    getNumberOfSuccesses();    final    double    n    =    getSampleSize();    	compilable	  [FE]  AssertionError  	19	2	replace
19	[BUG]  [BUGGY]  n  =  getPopulationSize();  [CE]  cannot  find  symbol  n  [FE]            AssertionError      [CONTEXT]      protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();      [BUGGY]  n  =  getPopulationSize();  [BUGGY]      return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	n  =  getPopulationSize();	  final    double    n    =    getNumberOfSuccesses();    final    double    n    =    getPopulationSize();    	non-compiled	[CE]  cannot  find  symbol  n	13	None	replace
