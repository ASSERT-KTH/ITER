bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [FE]    AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getSampleSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  n  =  getSampleSize();		non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	16	None	add
2	[BUG]  [BUGGY]    final  double  m  =  getSampleSize();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [FE]      AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  m  =  getSampleSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  m  =  getSampleSize();		non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	16	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	16	1	add
4	[BUG]  [BUGGY]    int  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    int  sampleSize  =  getSampleSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    int  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	16	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	final  double  n  =  getNumberOfSuccesses();	final  double  n  =  getSampleSize();  	compilable	  [FE]  AssertionError  	15	2	replace
6	[BUG]  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getNumberOfSuccesses();	final  double  n  =  getSampleSize();  	compilable	  [FE]  AssertionError  	15	2	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  sampleSize  =  getSampleSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	    final  double  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	16	1	add
8	[BUG]  [BUGGY]    final  double  sampleSize  =  getSampleSize();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  sampleSize  =  getSampleSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  sampleSize  =  getSampleSize();		compilable	  [FE]  AssertionError  	16	1	add
