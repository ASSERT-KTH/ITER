bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;	  double    numberOfSuccesses    =    calculateNumberOfSuccesses()    +    1;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
2	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);	  numericalVariance    =    calculateNumberOfSuccesses(numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  /  numericalVariance);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  /  numericalVariance);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  /  numericalVariance);	  double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated    -    numericalVariance);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	17	None	replace
4	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  /  1);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  /  1);	  double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	7	None	replace
5	[BUG]  [BUGGY]  NumberFormat.getInstance().setNumericalVariance(numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  NumberFormat  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  NumberFormat.getInstance().setNumericalVariance(numericalVarianceIsCalculated);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	NumberFormat.getInstance().setNumericalVariance(numericalVarianceIsCalculated);	  NumberFormat.getInstance().setNumericalVariance(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol  NumberFormat	4	None	replace
6	[BUG]  [BUGGY]  Annotations.setNumericalVariance(numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  Annotations  [FE]                  AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  Annotations.setNumericalVariance(numericalVarianceIsCalculated);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	Annotations.setNumericalVariance(numericalVarianceIsCalculated);	  Annotations.setNumericalVariance(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol  Annotations	5	None	replace
7	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVariance);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVariance);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVariance);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
8	[BUG]  [BUGGY]  NumberFormat.getNumberInstance(numericalVariance,  numberOfSuccesses);  [CE]  cannot  find  symbol  NumberFormat  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  NumberFormat.getNumberInstance(numericalVariance,  numberOfSuccesses);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	NumberFormat.getNumberInstance(numericalVariance,  numberOfSuccesses);	  NumberFormat.getNumberInstance(numerOfSuccesses,    numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol  NumberFormat	14	None	replace
9	[BUG]  [BUGGY]  NumberFormat.getNumberInstance(numericalVariances,  numberOfSuccesses);  [CE]  cannot  find  symbol  numericalVariances  [FE]                  AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  NumberFormat.getNumberInstance(numericalVariances,  numberOfSuccesses);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	NumberFormat.getNumberInstance(numericalVariances,  numberOfSuccesses);	  NumberFormat.getNumberInstance(numerOfSuccesses,    numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol  numericalVariances	14	None	replace
10	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVariance,  numericalVariance);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVariance,  numericalVariance);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVariance,  numericalVariance);	  double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated,    numericalVariance);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	6	None	replace
11	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double    numberOfSuccesses    =    getNumberOfSuccesses()    +    1;    double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	1	None	add
12	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  Double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  Double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double    numberOfSuccesses    =    getNumberOfSuccesses()    +    1;    Double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	1	None	add
13	[BUG]  [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	Double  numberOfSuccesses  =  getNumberOfSuccesses();	          double    numberOfSuccesses    =    getNumberOfSuccesses();    Double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  incompatible  types	10	None	replace
14	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericalVarianceIsCalculated,  false);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericalVarianceIsCalculated,  false);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericalVarianceIsCalculated,  false);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVariance,    numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
15	[BUG]  [BUGGY]  validateVariance();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  validateVariance();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	validateVariance();	  validateNumericalVariance();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
16	[BUG]  [BUGGY]  Annotations.checkNotNull(calculateNumericalVariance());  [CE]  cannot  find  symbol  Annotations  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  Annotations.checkNotNull(calculateNumericalVariance());  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	Annotations.checkNotNull(calculateNumericalVariance());	  Annotations.checkNotNull(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol  Annotations	15	None	replace
17	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  sampleSize);  [CE]  no  suitable  method  found  for  abs(boolean,int)  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  sampleSize);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  sampleSize);	  double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated,    numericalVariance);    	non-compiled	[CE]  no  suitable  method  found  for  abs(boolean,int)	6	None	replace
18	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  0);  [CE]  no  suitable  method  found  for  abs(boolean,int)  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  0);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  0);	  double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated,    numericalVariance);    	non-compiled	[CE]  no  suitable  method  found  for  abs(boolean,int)	6	None	replace
19	[BUG]  [BUGGY]  validateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  validateNumberOfSuccesses();  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	validateNumberOfSuccesses();	  validateNumericalVariance();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
20	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericVarianceIsCalculated);  [CE]  cannot  find  symbol  numericVarianceIsCalculated  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericVarianceIsCalculated);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericVarianceIsCalculated);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVariance,    numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol  numericVarianceIsCalculated	3	None	replace
21	[BUG]  [BUGGY]  Annotations.checkNotNull(numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  Annotations  [FE]                AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  Annotations.checkNotNull(numericalVarianceIsCalculated);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	Annotations.checkNotNull(numericalVarianceIsCalculated);	  Annotations.checkNotNull(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol  Annotations	15	None	replace
22	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  *  numericalVariance);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  *  numericalVariance);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  *  numericalVariance);	  double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated    -    numericalVariance);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	17	None	replace
23	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  sampleSize);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
24	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  *  1);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  *  1);	  double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
25	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVarianceIsCalculated);  [BUGGY]      numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated,  numericalVarianceIsCalculated);	  double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVariance,    numericalVarianceIsCalculated);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
