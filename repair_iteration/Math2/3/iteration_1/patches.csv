bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	3	1	replace
2	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	3	1	replace
3	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericalVarianceIsCalculated);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVariance,  numericalVarianceIsCalculated);	      double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
4	[BUG]  [BUGGY]  NumberFormat.getInstance().setNumericalVariance(numericalVariance);  [CE]  cannot  find  symbol  NumberFormat  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  NumberFormat.getInstance().setNumericalVariance(numericalVariance);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	NumberFormat.getInstance().setNumericalVariance(numericalVariance);	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    }    	non-compiled	[CE]  cannot  find  symbol  NumberFormat	4	None	replace
5	[BUG]  [BUGGY]  Annotations.setNumericalVariance(numericalVariance);  [CE]  cannot  find  symbol  Annotations  [FE]              AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  Annotations.setNumericalVariance(numericalVariance);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	Annotations.setNumericalVariance(numericalVariance);	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    }    	non-compiled	[CE]  cannot  find  symbol  Annotations	4	None	replace
6	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  numericalVariance);  [CE]  no  suitable  method  found  for  abs(boolean,double)  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  numericalVariance);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated,  numericalVariance);	      double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated);    	non-compiled	[CE]  no  suitable  method  found  for  abs(boolean,double)	7	None	replace
7	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  -  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  -  1);	      double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	7	None	replace
8	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	2	None	add
10	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    Double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	2	None	add
11	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);	      double    numberOfSuccesses    =    calculateNumberOfSuccesses(numericalVariance);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
12	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses(numericalVarianceIsCalculated);	  numericalVariance    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
13	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  +  1);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  +  1);	      double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	7	None	replace
14	[BUG]  [BUGGY]  NumberFormat.getNumberInstance(numerOfSuccesses,  numberOfSuccesses);  [CE]  cannot  find  symbol  numerOfSuccesses  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  NumberFormat.getNumberInstance(numerOfSuccesses,  numberOfSuccesses);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	NumberFormat.getNumberInstance(numerOfSuccesses,  numberOfSuccesses);	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    }    	non-compiled	[CE]  cannot  find  symbol  numerOfSuccesses	4	None	replace
15	[BUG]  [BUGGY]  Annotations.checkNotNull(numericalVariance);  [CE]  cannot  find  symbol  Annotations  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  Annotations.checkNotNull(numericalVariance);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	Annotations.checkNotNull(numericalVariance);	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    }    	non-compiled	[CE]  cannot  find  symbol  Annotations	4	None	replace
16	[BUG]  [BUGGY]  validateNumericalVariance();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  validateNumericalVariance();  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	validateNumericalVariance();	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
17	[BUG]  [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  -  numericalVariance);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {    [BUGGY]  double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  -  numericalVariance);  [BUGGY]    numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	double  numberOfSuccesses  =  Math.abs(numericalVarianceIsCalculated  -  numericalVariance);	      double    numberOfSuccesses    =    Math.abs(numericalVarianceIsCalculated);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	7	None	replace
