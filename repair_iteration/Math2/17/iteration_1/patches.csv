bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this;  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this;  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this;	      RandomGenerator    rng    =(RandomGenerator)this.null;    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	6	None	replace
2	[BUG]  [BUGGY]  super(numberOfSuccesses,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(numberOfSuccesses,  sampleSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(numberOfSuccesses,  sampleSize);	  super(numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)	8	None	replace
3	[BUG]  [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int)  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);	  super(numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int)	8	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nullPositions.get(0);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nullPositions.get(0);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nullPositions.get(0);	      	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	4	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(sampleSize);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(sampleSize);  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(sampleSize);	      RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(rng);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	12	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(randomGenerator);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(randomGenerator);  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(randomGenerator);	      RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(rng);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	12	None	replace
7	[BUG]  [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  [CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(RandomGenerator.NUMBER_OF_SUCCESSES,  numberOfSuccesses);	  super(RandomGenerator.NUMBER_OF_SUCCESSES);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES	1	None	replace
8	[BUG]  [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  sampleSize);  [CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  sampleSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(RandomGenerator.NUMBER_OF_SUCCESSES,  sampleSize);	  super(RandomGenerator.NUMBER_OF_SUCCESSES);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES	1	None	replace
9	[BUG]  [BUGGY]  super(null,  null);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>)  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(null,  null);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  null);	  super(null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>)	10	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses();  [CE]  '('  expected  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses();  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses();	      RandomGenerator    rng    =(RandomGenerator)super.getNumberOfSuccesses();    	non-compiled	[CE]  '('  expected	11	None	replace
11	[BUG]  [BUGGY]  super(rng,  0,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(rng,  0,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0,  numberOfSuccesses);	  super(rng,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)	13	None	replace
12	[BUG]  [BUGGY]  super(rng,  0,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(rng,  0,  sampleSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0,  sampleSize);	  super(rng,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)	13	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(null);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(null);  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =  getRandomGenerator(null);	      RandomGenerator    rng    =    getRandomGenerator();    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	5	None	replace
14	[BUG]  [BUGGY]  super(null);  super(null);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(null);  super(null);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null);    super(null);	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	9	None	add
15	[BUG]  [BUGGY]  super(null);  this.rng  =  new  RandomGenerator();  [CE]  cannot  find  symbol  rng  [FE]      NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(null);  this.rng  =  new  RandomGenerator();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null);    this.rng  =  new  RandomGenerator();	  	non-compiled	[CE]  cannot  find  symbol  rng	9	None	add
16	[BUG]  [BUGGY]  super(null);  super(null,  null);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]        NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(null);  super(null,  null);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null);    super(null,  null);	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	9	None	add
17	[BUG]  [BUGGY]  super(rng,  null,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(rng,  null,  sampleSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  sampleSize);	  super(rng,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)	2	None	replace
18	[BUG]  [BUGGY]  super(rng,  null,  randomGenerator);  [CE]  cannot  find  symbol  randomGenerator  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(rng,  null,  randomGenerator);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  randomGenerator);	  super(rng,    null);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	2	None	replace
19	[BUG]  [BUGGY]      RandomGenerator  rng  =(RandomGenerator)this.natives.getValue();  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]      RandomGenerator  rng  =(RandomGenerator)this.natives.getValue();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	        RandomGenerator  rng  =(RandomGenerator)this.natives.getValue();	  	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	3	None	add
20	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getRandomGenerator();  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getRandomGenerator();  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getRandomGenerator();	      RandomGenerator    rng    =(RandomGenerator)super.getRandomGenerator();    	non-compiled	[CE]  '('  expected	7	None	replace
21	[BUG]  [BUGGY]  super(null);  this.rng  =  new  RandomGenerator(null);  [CE]  cannot  find  symbol  rng  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(null);  this.rng  =  new  RandomGenerator(null);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null);    this.rng  =  new  RandomGenerator(null);	  	non-compiled	[CE]  cannot  find  symbol  rng	9	None	add
22	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses()  +  1;  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses()  +  1;  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses()  +  1;	      RandomGenerator    rng    =(RandomGenerator)super.getNumberOfSuccesses();    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	11	None	replace
23	[BUG]  [BUGGY]  super(rng,  null,  0);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(rng,  null,  0);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  0);	  super(rng,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)	13	None	replace
24	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  int  populationSize  =  getNumberOfSuccesses();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  getNumberOfSuccesses();	      	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	4	None	replace
25	[BUG]  [BUGGY]  int  populationSize  =  numberOfSuccesses  -  populationSize;  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]      NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  int  populationSize  =  numberOfSuccesses  -  populationSize;  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  numberOfSuccesses  -  populationSize;	      	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	4	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses);  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses);	      RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(rng);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	12	None	replace
27	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(null);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(null);  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(null);	      RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(rng);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	12	None	replace
28	[BUG]  [BUGGY]  super(null,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(null,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  numberOfSuccesses);	  super(numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,int)	8	None	replace
29	[BUG]  [BUGGY]  super(rng,  null,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)  [FE]          AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(rng,  null,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  numberOfSuccesses);	  super(rng,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)	2	None	replace
30	[BUG]  [BUGGY]      int  populationSize  =  numberOfSuccesses  -  PopulationSize.intValue();  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]      int  populationSize  =  numberOfSuccesses  -  PopulationSize.intValue();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	        int  populationSize  =  numberOfSuccesses  -  PopulationSize.intValue();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	3	None	add
31	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getSampleSize();  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getSampleSize();  [BUGGY]    super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getSampleSize();	      RandomGenerator    rng    =(RandomGenerator)super.getNumberOfSuccesses();    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	11	None	replace
32	[BUG]  [BUGGY]      int  populationSize  =  rng.getSampleSize();  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]      int  populationSize  =  rng.getSampleSize();  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	        int  populationSize  =  rng.getSampleSize();	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	3	None	add
33	[BUG]  [BUGGY]      int  populationSize  =  Math.min(populationSize,  populationSize);  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]      NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]      int  populationSize  =  Math.min(populationSize,  populationSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	        int  populationSize  =  Math.min(populationSize,  populationSize);	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	3	None	add
34	[BUG]  [BUGGY]      int  populationSize  =  Math.min(populationSize,  numberOfSuccesses);  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]      int  populationSize  =  Math.min(populationSize,  numberOfSuccesses);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	        int  populationSize  =  Math.min(populationSize,  numberOfSuccesses);	  	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	3	None	add
35	[BUG]  [BUGGY]  super(null,  rng);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,RandomGenerator)  [FE]    NullPointerException    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(null,  rng);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  rng);	  super(null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,RandomGenerator)	10	None	replace
36	[BUG]  [BUGGY]  super(rng,  0,  populationSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)  [FE]        AssertionError    [CONTEXT]    throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {    [BUGGY]  super(rng,  0,  populationSize);  [BUGGY]      if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0,  populationSize);	  super(rng,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)	13	None	replace
