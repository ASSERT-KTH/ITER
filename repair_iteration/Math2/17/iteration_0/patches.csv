bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES);  [CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(RandomGenerator.NUMBER_OF_SUCCESSES);	super(rng);  	non-compiled	[CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES	33	None	replace
2	[BUG]  [BUGGY]  super(rng,  null);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>)  [FE]      AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]  super(rng,  null);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null);	super(rng);  	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>)	33	None	replace
3	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]    [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	add	  	super(rng);  	compilable	  [FE]  NullPointerException  	33	2	replace
4	[BUG]  [BUGGY]    [FE]  NullPointerException  [FE]        AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]    [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	  	super(rng);  	compilable	  [FE]  NullPointerException  	33	2	replace
5	[BUG]  [BUGGY]    RandomGenerator  rng  =  getRandomGenerator();  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]    RandomGenerator  rng  =  getRandomGenerator();  [BUGGY]  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	    RandomGenerator  rng  =  getRandomGenerator();		non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	34	None	add
6	[BUG]  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)this.null;  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)this.null;  [BUGGY]  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	    RandomGenerator  rng  =(RandomGenerator)this.null;		non-compiled	[CE]  <identifier>  expected	34	None	add
7	[BUG]  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)super.getRandomGenerator();  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)super.getRandomGenerator();  [BUGGY]  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	    RandomGenerator  rng  =(RandomGenerator)super.getRandomGenerator();		non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	34	None	add
8	[BUG]  [BUGGY]  super(numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int)  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]  super(numberOfSuccesses);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(numberOfSuccesses);	super(rng);  	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int)	33	None	replace
9	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]  super(null);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	add	super(null);	super(rng);  	compilable	  [FE]  NullPointerException  	33	2	replace
10	[BUG]  [BUGGY]  super(null);  [FE]  NullPointerException  [FE]      AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]  super(null);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null);	super(rng);  	compilable	  [FE]  NullPointerException  	33	2	replace
11	[BUG]  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses();  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses();  [BUGGY]  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	    RandomGenerator  rng  =(RandomGenerator)super.getNumberOfSuccesses();		non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	34	None	add
12	[BUG]  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(rng);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]    RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(rng);  [BUGGY]  super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	    RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(rng);		non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	34	None	add
13	[BUG]  [BUGGY]  super(rng,  0);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int)  [FE]    AssertionError  [CONTEXT]  throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {  [BUGGY]  super(rng,  0);  [BUGGY]    if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0);	super(rng);  	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int)	33	None	replace
