bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.rng  =  new  RandomGenerator();  [CE]  cannot  find  symbol  rng  [FE]          NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  this.rng  =  new  RandomGenerator();  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	this.rng  =  new  RandomGenerator();	  super(null);    this.rng    =    new    RandomGenerator();    	non-compiled	[CE]  cannot  find  symbol  rng	15	None	replace
2	[BUG]  [BUGGY]  super(null);  this.sampleSize  =  new  RandomGenerator();  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]            NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null);  this.sampleSize  =  new  RandomGenerator();  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null);  this.sampleSize  =  new  RandomGenerator();	  super(null);    this.rng    =    new    RandomGenerator();    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	15	None	replace
3	[BUG]  [BUGGY]  super(rng,  null,  populationSize,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  populationSize,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  populationSize,  numberOfSuccesses);	  super(rng,    null,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)	29	None	replace
4	[BUG]  [BUGGY]  super(rng,  null,  numberOfSuccesses,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  numberOfSuccesses,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  numberOfSuccesses,  sampleSize);	  super(rng,    null,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)	29	None	replace
5	[BUG]  [BUGGY]  super(null,  numberOfSuccesses,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  numberOfSuccesses,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  numberOfSuccesses,  sampleSize);	  super(null,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,int,int)	28	None	replace
6	[BUG]  [BUGGY]  super(numberOfSuccesses,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(numberOfSuccesses,  numberOfSuccesses);	  super(null,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)	28	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(null,  null);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(null,  null);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =  getRandomGenerator(null,  null);	  RandomGenerator    rng    =    getRandomGenerator(null);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	13	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(LocalizedFormats.NUMBER_OF_SUCCESSES);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(LocalizedFormats.NUMBER_OF_SUCCESSES);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =  getRandomGenerator(LocalizedFormats.NUMBER_OF_SUCCESSES);	  RandomGenerator    rng    =    getRandomGenerator(null);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	13	None	replace
9	[BUG]  [BUGGY]  super(null,  null,  null);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>,<null>)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  null,  null);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  null,  null);	  super(null,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>,<null>)	9	None	replace
10	[BUG]  [BUGGY]  super(null,  null,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>,int)  [FE]          NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  null,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  null,  sampleSize);	  super(null,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>,int)	9	None	replace
11	[BUG]  [BUGGY]  this.rng  =  new  RandomGenerator(null);  [CE]  cannot  find  symbol  rng  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  this.rng  =  new  RandomGenerator(null);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	this.rng  =  new  RandomGenerator(null);	  super(null);    this.rng    =    new    RandomGenerator(null);    	non-compiled	[CE]  cannot  find  symbol  rng	21	None	replace
12	[BUG]  [BUGGY]  this.rng  =  new  RandomGenerator(RandomGenerator.NUMBER_OF_SUCCESSES);  [CE]  cannot  find  symbol  rng  [FE]          NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  this.rng  =  new  RandomGenerator(RandomGenerator.NUMBER_OF_SUCCESSES);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	this.rng  =  new  RandomGenerator(RandomGenerator.NUMBER_OF_SUCCESSES);	  super(null);    this.rng    =    new    RandomGenerator(null);    	non-compiled	[CE]  cannot  find  symbol  rng	21	None	replace
13	[BUG]  [BUGGY]  int  populationSize  =  Math.min(populationSize,  sampleSize);  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  Math.min(populationSize,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  Math.min(populationSize,  sampleSize);	          int    populationSize    =    Math.min(populationSize,    numberOfSuccesses);    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	34	None	replace
14	[BUG]  [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  numberOfSuccesses  +  1);  [CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  numberOfSuccesses  +  1);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(RandomGenerator.NUMBER_OF_SUCCESSES,  numberOfSuccesses  +  1);	  super(RandomGenerator.NUMBER_OF_SUCCESSES,    numberOfSuccesses);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES	7	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numberOfSuccesses;  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.numberOfSuccesses;  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.numberOfSuccesses;	  RandomGenerator    rng    =(RandomGenerator)this;    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	1	None	replace
16	[BUG]  [BUGGY]  super(false,  null);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(boolean,<null>)  [FE]            NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(false,  null);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(false,  null);	  super(null);    super(null,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(boolean,<null>)	16	None	replace
17	[BUG]  [BUGGY]  super(null,  rng,  null);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,RandomGenerator,<null>)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  rng,  null);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  rng,  null);	  super(null,    rng);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,RandomGenerator,<null>)	35	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(0);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(0);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(0);	  RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(null);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	27	None	replace
19	[BUG]  [BUGGY]  super(rng,  populationSize,  0,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  populationSize,  0,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  populationSize,  0,  sampleSize);	  super(rng,    0,    sampleSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)	12	None	replace
20	[BUG]  [BUGGY]  super(rng,  numberOfSuccesses,  0,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  numberOfSuccesses,  0,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  numberOfSuccesses,  0,  sampleSize);	  super(rng,    0,    sampleSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)	12	None	replace
21	[BUG]  [BUGGY]  super(rng,  populationSize,  0,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  populationSize,  0,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  populationSize,  0,  numberOfSuccesses);	  super(rng,    0,    populationSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)	36	None	replace
22	[BUG]  [BUGGY]  super(rng,  populationSize,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  populationSize,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  populationSize,  numberOfSuccesses);	  super(rng,    0,    populationSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)	36	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(randomGenerator  +  1);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(randomGenerator  +  1);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(randomGenerator  +  1);	  RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(randomGenerator);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	6	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(populationSize);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(populationSize);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(populationSize);	  RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(sampleSize);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	5	None	replace
25	[BUG]  [BUGGY]  super(rng,  null,  populationSize,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  populationSize,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  populationSize,  sampleSize);	  super(rng,    null,    sampleSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)	17	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nullPositions.get(1);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nullPositions.get(1);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nullPositions.get(1);	  RandomGenerator    rng    =(RandomGenerator)this.nullPositions.get(0);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	4	None	replace
27	[BUG]  [BUGGY]  super(rng,  null,  0,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  0,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  0,  numberOfSuccesses);	  super(rng,    null,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)	23	None	replace
28	[BUG]  [BUGGY]  super(rng,  null,  0,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  0,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  0,  sampleSize);	  super(rng,    null,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)	23	None	replace
29	[BUG]  [BUGGY]  super(numberOfSuccesses,  populationSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(numberOfSuccesses,  populationSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(numberOfSuccesses,  populationSize);	  super(numberOfSuccesses,    sampleSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)	2	None	replace
30	[BUG]  [BUGGY]  super(populationSize,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(populationSize,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(populationSize,  numberOfSuccesses);	  super(numberOfSuccesses,    sampleSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int)	2	None	replace
31	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getSampleSize();  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getSampleSize();  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getSampleSize();	  RandomGenerator    rng    =(RandomGenerator)super.getSampleSize();    	non-compiled	[CE]  '('  expected	31	None	replace
32	[BUG]  [BUGGY]  int  populationSize  =  numberOfSuccesses  -  sampleSize;  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  numberOfSuccesses  -  sampleSize;  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  numberOfSuccesses  -  sampleSize;	  int    populationSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	25	None	replace
33	[BUG]  [BUGGY]  int  populationSize  =  numberOfSuccesses  /  sampleSize;  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  numberOfSuccesses  /  sampleSize;  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  numberOfSuccesses  /  sampleSize;	  int    populationSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	25	None	replace
34	[BUG]  [BUGGY]  int  populationSize  =  numberOfSuccesses  /  PopulationSize.intValue();  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  numberOfSuccesses  /  PopulationSize.intValue();  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  numberOfSuccesses  /  PopulationSize.intValue();	          int    populationSize    =    numberOfSuccesses    -    PopulationSize.intValue();    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	30	None	replace
35	[BUG]  [BUGGY]  super(rng,  0,  numberOfSuccesses,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  0,  numberOfSuccesses,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0,  numberOfSuccesses,  sampleSize);	  super(rng,    0,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)	11	None	replace
36	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.clone();  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.clone();  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.clone();	  RandomGenerator    rng    =(RandomGenerator)this.super.getRandomGenerator();    	non-compiled	[CE]  '('  expected	20	None	replace
37	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  -  1;  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  -  1;  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  getNumberOfSuccesses()  -  1;	  int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	24	None	replace
38	[BUG]  [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  +  1;  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  getNumberOfSuccesses()  +  1;  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  getNumberOfSuccesses()  +  1;	  int    populationSize    =    getNumberOfSuccesses();    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	24	None	replace
39	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.natives.getValue(0);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.natives.getValue(0);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.natives.getValue(0);	          RandomGenerator    rng    =(RandomGenerator)this.natives.getValue();    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	19	None	replace
40	[BUG]  [BUGGY]  int  populationSize  =  rng.getSampleSize()  +  1;  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  rng.getSampleSize()  +  1;  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  rng.getSampleSize()  +  1;	          int    populationSize    =    rng.getSampleSize();    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	32	None	replace
41	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses  +  1);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses  +  1);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses  +  1);	  RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(numberOfSuccesses);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	26	None	replace
42	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getRangeOfSuccesses();  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getRangeOfSuccesses();  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getRangeOfSuccesses();	  RandomGenerator    rng    =(RandomGenerator)this.super.getNumberOfSuccesses();    	non-compiled	[CE]  '('  expected	10	None	replace
43	[BUG]  [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses,  sampleSize);	  super(LocalizedFormats.NUMBER_OF_SUCCESSES,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int,int)	3	None	replace
44	[BUG]  [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses,  0);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int,int)  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses,  0);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses,  0);	  super(LocalizedFormats.NUMBER_OF_SUCCESSES,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int,int)	3	None	replace
45	[BUG]  [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  populationSize);  [CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(RandomGenerator.NUMBER_OF_SUCCESSES,  populationSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(RandomGenerator.NUMBER_OF_SUCCESSES,  populationSize);	  super(RandomGenerator.NUMBER_OF_SUCCESSES,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_OF_SUCCESSES	8	None	replace
46	[BUG]  [BUGGY]  int  populationSize  =  Math.min(numberOfSuccesses,  sampleSize);  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  Math.min(numberOfSuccesses,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  Math.min(numberOfSuccesses,  sampleSize);	          int    populationSize    =    Math.min(populationSize,    numberOfSuccesses);    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	34	None	replace
47	[BUG]  [BUGGY]  super(rng,  numberOfSuccesses,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  numberOfSuccesses,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  numberOfSuccesses,  sampleSize);	  super(numberOfSuccesses,    sampleSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)	2	None	replace
48	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses  -  1);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses  -  1);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(numberOfSuccesses  -  1);	  RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(numberOfSuccesses);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	26	None	replace
49	[BUG]  [BUGGY]  super(null,  null);  this.rng  =  new  RandomGenerator();  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>)  [FE]          NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  null);  this.rng  =  new  RandomGenerator();  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  null);  this.rng  =  new  RandomGenerator();	  super(null);    this.rng    =    new    RandomGenerator();    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>)	15	None	replace
50	[BUG]  [BUGGY]  int  populationSize  =  rng.getSampleSize(numberOfSuccesses);  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  rng.getSampleSize(numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  rng.getSampleSize(numberOfSuccesses);	          int    populationSize    =    rng.getSampleSize();    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	32	None	replace
51	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses()  +  1;  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses()  +  1;  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getNumberOfSuccesses()  +  1;	  RandomGenerator    rng    =(RandomGenerator)this.super.getNumberOfSuccesses();    	non-compiled	[CE]  '('  expected	10	None	replace
52	[BUG]  [BUGGY]  super(rng,  0,  numberOfSuccesses  -  1);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  0,  numberOfSuccesses  -  1);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0,  numberOfSuccesses  -  1);	  super(rng,    0,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int)	11	None	replace
53	[BUG]  [BUGGY]  super(rng,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  numberOfSuccesses);	  super(null,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int)	28	None	replace
54	[BUG]  [BUGGY]  super(rng,  null,  null);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,<null>)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  null);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  null);	  super(null,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,<null>)	9	None	replace
55	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getSuperGenerator();  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.super.getSuperGenerator();  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.super.getSuperGenerator();	  RandomGenerator    rng    =(RandomGenerator)this.super.getRandomGenerator();    	non-compiled	[CE]  '('  expected	20	None	replace
56	[BUG]  [BUGGY]  super(rng,  null,  0,  0);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  0,  0);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  0,  0);	  super(rng,    null,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int,int)	23	None	replace
57	[BUG]  [BUGGY]  super(rng,  null,  populationSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)  [FE]                AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  null,  populationSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  null,  populationSize);	  super(rng,    null,    randomGenerator);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,<null>,int)	18	None	replace
58	[BUG]  [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(NUMBER_OF_SUCCESSES);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(NUMBER_OF_SUCCESSES);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =  getRandomGenerator(NUMBER_OF_SUCCESSES);	  RandomGenerator    rng    =    getRandomGenerator(null);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	13	None	replace
59	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getSampleSize()  +  1;  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)super.getSampleSize()  +  1;  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)super.getSampleSize()  +  1;	  RandomGenerator    rng    =(RandomGenerator)super.getSampleSize();    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	31	None	replace
60	[BUG]  [BUGGY]  int  populationSize  =  numberOfSuccesses  /  populationSize;  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]          NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  numberOfSuccesses  /  populationSize;  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  numberOfSuccesses  /  populationSize;	  int    populationSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	25	None	replace
61	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.sampleSize;  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.sampleSize;  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.sampleSize;	  RandomGenerator    rng    =(RandomGenerator)this;    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	1	None	replace
62	[BUG]  [BUGGY]  super(null,  null,  randomGenerator);  [CE]  cannot  find  symbol  randomGenerator  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  null,  randomGenerator);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  null,  randomGenerator);	  super(null,    null);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	9	None	replace
63	[BUG]  [BUGGY]  super(null,  null.intValue());  [CE]  <null>  cannot  be  dereferenced  [FE]            NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  null.intValue());  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  null.intValue());	  super(null);    super(null,    null);    	non-compiled	[CE]  <null>  cannot  be  dereferenced	16	None	replace
64	[BUG]  [BUGGY]  int  populationSize  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  Math.min(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  Math.min(numberOfSuccesses,  numberOfSuccesses);	          int    populationSize    =    Math.min(populationSize,    numberOfSuccesses);    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	34	None	replace
65	[BUG]  [BUGGY]  int  populationSize  =  numberOfSuccesses  -  PopulationSize.secondValue();  [CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]        NullPointerException      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  int  populationSize  =  numberOfSuccesses  -  PopulationSize.secondValue();  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	int  populationSize  =  numberOfSuccesses  -  PopulationSize.secondValue();	          int    populationSize    =    numberOfSuccesses    -    PopulationSize.intValue();    	non-compiled	[CE]  variable  populationSize  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	30	None	replace
66	[BUG]  [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(randomGenerator);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =  getRandomGenerator(randomGenerator);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =  getRandomGenerator(randomGenerator);	  RandomGenerator    rng    =    getRandomGenerator(null);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	13	None	replace
67	[BUG]  [BUGGY]  super(rng,  0,  populationSize,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  0,  populationSize,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0,  populationSize,  sampleSize);	  super(rng,    0,    populationSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)	36	None	replace
68	[BUG]  [BUGGY]  super(rng,  0,  populationSize,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(rng,  0,  populationSize,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(rng,  0,  populationSize,  numberOfSuccesses);	  super(rng,    0,    populationSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(RandomGenerator,int,int,int)	36	None	replace
69	[BUG]  [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(null,  null);  [CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(null,  null);  [BUGGY]      super(rng);  if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	RandomGenerator  rng  =(RandomGenerator)this.nodeMap.get(null,  null);	  RandomGenerator    rng    =(RandomGenerator)this.nodeMap.get(null);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  HypergeometricDistribution(RandomGenerator,int,int,int)	27	None	replace
70	[BUG]  [BUGGY]  super(numberOfSuccesses,  populationSize,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(numberOfSuccesses,  populationSize,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(numberOfSuccesses,  populationSize,  sampleSize);	  super(numberOfSuccesses,    sampleSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(int,int,int)	2	None	replace
71	[BUG]  [BUGGY]  super(null,  null,  numberOfSuccesses);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>,int)  [FE]            AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(null,  null,  numberOfSuccesses);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(null,  null,  numberOfSuccesses);	  super(null,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(<null>,<null>,int)	28	None	replace
72	[BUG]  [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  sampleSize);  [CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int)  [FE]              AssertionError      [CONTEXT]      throws  NotPositiveException,  NotStrictlyPositiveException,  NumberIsTooLargeException  {      [BUGGY]  super(LocalizedFormats.NUMBER_OF_SUCCESSES,  sampleSize);  [BUGGY]        if  (populationSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize);  }  if  (numberOfSuccesses  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses);  }  if  (sampleSize  <  0)  {  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	84	84	1	replace	super(LocalizedFormats.NUMBER_OF_SUCCESSES,  sampleSize);	  super(LocalizedFormats.NUMBER_OF_SUCCESSES,    numberOfSuccesses);    	non-compiled	[CE]  no  suitable  constructor  found  for  AbstractIntegerDistribution(LocalizedFormats,int)	3	None	replace
