bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalMean() { [BUGGY] return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getNumericalMean [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalMean() { [BUGGY] [BUGGY] return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); } [CLASS] HypergeometricDistribution [METHOD] getNumericalMean [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	
3	[BUG] [BUGGY] if (!numericalVarianceIsCalculated) { [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { [BUGGY] if (!numericalVarianceIsCalculated) { [BUGGY] numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { [BUGGY] [BUGGY] if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	
5	[BUG] [BUGGY] numericalVariance = calculateNumericalVariance(); [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { [BUGGY] numericalVariance = calculateNumericalVariance(); [BUGGY] numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { [BUGGY] [BUGGY] numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	
7	[BUG] [BUGGY] numericalVarianceIsCalculated = true; [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); [BUGGY] numericalVarianceIsCalculated = true; [BUGGY] } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); [BUGGY] [BUGGY] numericalVarianceIsCalculated = true; } return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	
9	[BUG] [BUGGY] return numericalVariance; [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } [BUGGY] return numericalVariance; [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } [BUGGY] [BUGGY] return numericalVariance; } [CLASS] HypergeometricDistribution [METHOD] getNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	
11	[BUG] [BUGGY] final double N = getPopulationSize(); [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { [BUGGY] final double N = getPopulationSize(); [BUGGY] final double m = getNumberOfSuccesses(); final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { [BUGGY] [BUGGY] final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	
13	[BUG] [BUGGY] final double m = getNumberOfSuccesses(); [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); [BUGGY] final double m = getNumberOfSuccesses(); [BUGGY] final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); [BUGGY] [BUGGY] final double m = getNumberOfSuccesses(); final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	
15	[BUG] [BUGGY] final double n = getSampleSize(); [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); [BUGGY] final double n = getSampleSize(); [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); [BUGGY] [BUGGY] final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	
17	[BUG] [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); final double n = getSampleSize(); [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); [BUGGY] } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); final double n = getSampleSize(); [BUGGY] [BUGGY] return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); } [CLASS] HypergeometricDistribution [METHOD] calculateNumericalVariance [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	
19	[BUG] [BUGGY] return FastMath.max(0,  getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); [FE] AssertionError testMath1021 [CONTEXT] public int getSupportLowerBound() { [BUGGY] return FastMath.max(0,       getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); [BUGGY] getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); } [CLASS] HypergeometricDistribution [METHOD] getSupportLowerBound [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testMath1021 [CONTEXT] public int getSupportLowerBound() { [BUGGY] [BUGGY] return FastMath.max(0,       getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); } [CLASS] HypergeometricDistribution [METHOD] getSupportLowerBound [RETURN_TYPE] int  [VARIABLES] boolean numericalVarianceIsCalculated double N m n numericalVariance p p1 p2 p3 q ret long serialVersionUID int dx k m n numberOfSuccesses populationSize sampleSize x x0 x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	
