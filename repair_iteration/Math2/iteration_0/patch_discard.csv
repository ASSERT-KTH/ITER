increase failing tests,308,replace, [FE] AssertionError testDegenerateNoSuccesses,return FastMath.max(0,  getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); ,return FastMath.max(1, getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoSuccesses,return FastMath.max(0,  getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); ,return FastMath.max(0, getSampleSize() + getPopulationSize() - getNumberOfSuccesses());
increase failing tests,280,replace, [FE] AssertionError testMoments,numericalVariance = calculateNumericalVariance(); ,numericalVariance = calculateNumericalVariance() / 2.0;
increase failing tests,294,replace, [FE] AssertionError testMoments,final double n = getSampleSize(); ,final double n = getSampleSize() + 1;
increase failing tests,295,replace, [FE] AssertionError testMoments,return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); ,return(N * m *(N - 1)*(N - m)) / (N * N * (N - 1));
increase failing tests,295,replace, [FE] AssertionError testMoments,return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); ,return(n * m *(N - 1)*(N - m)) / (N * N * (N - 1));
increase failing tests,283,replace, [FE] AssertionError testMoments,return numericalVariance; ,return numericalVariance / numericalVariance;
increase failing tests,293,replace, [FE] AssertionError testMoments,final double m = getNumberOfSuccesses(); ,final double m = getNumberOfSuccesses() + 1;
increase failing tests,292,replace, [FE] AssertionError testMoments,final double N = getPopulationSize(); ,final double N = getPopulationSize() - 1;
increase failing tests,292,add, [FE] StackOverflowError testDegenerateNoFailures,,  final double k = getNumericalVariance();
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures,return FastMath.max(0,  getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); ,return FastMath.max(0, getSampleSize() + getNumberOfSuccesses() / getPopulationSize());
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures,return FastMath.max(0,  getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); ,return FastMath.max(0, getSampleSize() + getNumberOfSuccesses() * getPopulationSize());
increase failing tests,293,add, [FE] StackOverflowError testDegenerateNoFailures,,  final double k = getNumericalVariance();
increase failing tests,295,replace, [FE] AssertionError testMoments,return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); ,return(n * m *(1 - n)*(1 - n)) /(N * N * (N - 1));
increase failing tests,294,replace, [FE] AssertionError testMoments,final double n = getSampleSize(); ,final double n = getNumberOfSuccesses();
increase failing tests,292,replace, [FE] ArithmeticException testDegenerateNoSuccesses,final double N = getPopulationSize(); ,final double N = getPopulationSize() / getNumberOfSuccesses();
increase failing tests,292,replace, [FE] AssertionError testMoments,final double N = getPopulationSize(); ,final double N = getPopulationSize() + 1;
increase failing tests,281,add, [FE] ArithmeticException testDegenerateNoSuccesses,,  numericalVariance = Math.abs(numberOfSuccesses / numberOfSuccesses);
increase failing tests,283,replace, [FE] AssertionError testMoments,return numericalVariance; ,return numericalVariance / numberOfSuccesses;
increase failing tests,308,replace, [FE] AssertionError testDegenerateNoFailures,return FastMath.max(0,  getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); ,return FastMath.max(0, getPopulationSize() + getNumberOfSuccesses() - getPopulationSize());
increase failing tests,283,replace, [FE] AssertionError testMoments,return numericalVariance; ,return numericalVariance /(numberOfSuccesses - 1);
increase failing tests,295,replace, [FE] AssertionError testMoments,return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); ,return(N * m *(n - 1)*(N - m)) /(N * N * (N - 1));
