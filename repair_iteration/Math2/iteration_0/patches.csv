bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
2	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	compilable	  [FE]  AssertionError  testMath1021	19	1
3	[BUG]  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]  return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());  [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getNumberOfSuccesses()  +  getSampleSize()  -  getPopulationSize());	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	compilable	  [FE]  AssertionError  testMath1021	19	1
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	  	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	non-compiled	[CE]  missing  return  statement	19	None
11	[BUG]  [BUGGY]    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    if(numberOfSuccesses  >  0)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	4	None
12	[BUG]  [BUGGY]    if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    if(numericalVariance  ==  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	4	None
13	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	4	None
14	[BUG]  [BUGGY]    if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    if(numericalVariance!=  null)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	4	None
15	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }		non-compiled	[CE]  illegal  start  of  expression	4	None
22	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMoments	3	1
23	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMoments	3	1
23	[BUG]  [BUGGY]  if(!negativeVarianceIsCalculated)  {  [CE]  cannot  find  symbol  negativeVarianceIsCalculated  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!negativeVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!negativeVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	non-compiled	[CE]  cannot  find  symbol  negativeVarianceIsCalculated	3	None
24	[BUG]  [BUGGY]  if(!nativeVarianceIsCalculated)  {  [CE]  cannot  find  symbol  nativeVarianceIsCalculated  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!nativeVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!nativeVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	non-compiled	[CE]  cannot  find  symbol  nativeVarianceIsCalculated	3	None
32	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumberOfSuccesses();	numericalVariance  =  calculateNumericalVariance();  	non-compiled	[CE]  cannot  find  symbol	5	None
34	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance()  /(numericalVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance()  /(numericalVarianceIsCalculated));  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumericalVariance()  /(numericalVarianceIsCalculated));	numericalVariance  =  calculateNumericalVariance();  	non-compiled	[CE]  ';'  expected	5	None
35	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	  	numericalVariance  =  calculateNumericalVariance();  	compilable	  [FE]  AssertionError  testMoments	5	1
36	[BUG]  [BUGGY]    [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	  	numericalVariance  =  calculateNumericalVariance();  	compilable	  [FE]  AssertionError  testMoments	5	1
41	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	6	None
42	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	6	None
43	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	6	None
44	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None
45	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  return  -1;  }		non-compiled	[CE]  illegal  start  of  expression	6	None
51	[BUG]  [BUGGY]    final  double  N  =  getPopulationSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getPopulationSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  N  =  getPopulationSize();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	16	None
52	[BUG]  [BUGGY]    final  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  n  =  getPopulationSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  n  =  getPopulationSize();		non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	16	None
53	[BUG]  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  N  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	16	None
54	[BUG]  [BUGGY]    final  int  N  =  getPopulationSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  int  N  =  getPopulationSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  int  N  =  getPopulationSize();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	16	None
55	[BUG]  [BUGGY]    final  double  N  =  getSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  N  =  getSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  N  =  getSize();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	16	None
61	[BUG]  [BUGGY]    getNumberOfSuccesses()  -  getPopulationSize());  [CE]  not  a  statement  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    getNumberOfSuccesses()  -  getPopulationSize());		non-compiled	[CE]  not  a  statement	20	None
62	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.min(10,  getNumberOfSuccesses()  -  getPopulationSize());  }		non-compiled	[CE]  illegal  start  of  expression	20	None
63	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  populationSize  =  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  populationSize  =  getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	20	1
64	[BUG]  [BUGGY]    int  populationSize  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  populationSize  =  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  populationSize  =  getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	20	1
64	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    if(getNumberOfSuccesses()  >  0)  {  if(getPopulationSize()  >  0)  {  return  FastMath.max(0,  getNumberOfSuccesses()  -  getPopulationSize());  }		non-compiled	[CE]  illegal  start  of  expression	20	None
65	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  populationSize  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  populationSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
66	[BUG]  [BUGGY]    int  populationSize  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  populationSize  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  populationSize  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
71	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	2	None
72	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	2	None
73	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return(double)getNumberOfSuccesses()  *  getPopulationSize();  }		non-compiled	[CE]  illegal  start  of  expression	2	None
74	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    if(getNumberOfSuccesses()  >  0)  {  if(getNumberOfSuccesses()  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	2	None
75	[BUG]  [BUGGY]    getNumberOfSuccesses()  *  getNumberOfSuccesses();  [CE]  not  a  statement  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    getNumberOfSuccesses()  *  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    getNumberOfSuccesses()  *  getNumberOfSuccesses();		non-compiled	[CE]  not  a  statement	2	None
83	[BUG]  [BUGGY]  final  double  n  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getDecimalSize();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getDecimalSize();	final  double  n  =  getSampleSize();  	non-compiled	[CE]  cannot  find  symbol	15	None
91	[BUG]  [BUGGY]    final  double  n  =  getPopulationSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  n  =  getPopulationSize();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  n  =  getPopulationSize();		non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	18	None
92	[BUG]  [BUGGY]    final  double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  n  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  n  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	18	None
93	[BUG]  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  N  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	18	None
94	[BUG]  [BUGGY]    final  double  n  =  getSampleSize();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  n  =  getSampleSize();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  n  =  getSampleSize();		non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	18	None
95	[BUG]  [BUGGY]    final  double  k  =  getKnowledge();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  k  =  getKnowledge();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  k  =  getKnowledge();		non-compiled	[CE]  cannot  find  symbol	18	None
101	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	10	None
102	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }		non-compiled	[CE]  illegal  start  of  expression	10	None
103	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	10	None
104	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  =		non-compiled	[CE]  illegal  start  of  expression	10	None
105	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  [CE]  not  a  statement  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  if(!numericalVarianceIsCalculated)  {  numericalVariance		non-compiled	[CE]  not  a  statement	10	None
112	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();	return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  	compilable	  [FE]  AssertionError  testMath1021	1	1
113	[BUG]  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]  return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getNumberOfSuccesses()  *  getSampleSize())/(double)getPopulationSize();	return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  	compilable	  [FE]  AssertionError  testMath1021	1	1
121	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
122	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
122	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  null;  [CE]  incompatible  types  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =  null;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  null;	numericalVarianceIsCalculated  =  true;  	non-compiled	[CE]  incompatible  types	7	None
124	[BUG]  [BUGGY]  numericalVarianceIisCalculated  =  false;  [CE]  cannot  find  symbol  numericalVarianceIisCalculated  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIisCalculated  =  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIisCalculated  =  false;	numericalVarianceIsCalculated  =  true;  	non-compiled	[CE]  cannot  find  symbol  numericalVarianceIisCalculated	7	None
125	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	  	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
126	[BUG]  [BUGGY]    [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	  	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
141	[BUG]  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  N  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	14	None
142	[BUG]  [BUGGY]    final  double  n  =  getNumberOfSuccesses();  [CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  n  =  getNumberOfSuccesses();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  n  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  n  is  already  defined  in  method  calculateNumericalVariance()	14	None
143	[BUG]  [BUGGY]    final  int  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  int  N  =  getNumberOfSuccesses();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  int  N  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	14	None
144	[BUG]  [BUGGY]    final  double  N  =  getNumberOfSuccesses().doubleValue();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  N  =  getNumberOfSuccesses().doubleValue();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  N  =  getNumberOfSuccesses().doubleValue();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	14	None
145	[BUG]  [BUGGY]    final  double  N  =  getSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  N  =  getSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  N  =  getSize();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	14	None
153	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  null;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  null;  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  >  0)?  numericalVariance  :  null;	return  numericalVariance;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	9	None
154	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated));  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  /(numericalVarianceIsCalculated));  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVarianceIsCalculated));	return  numericalVariance;  	non-compiled	[CE]  ';'  expected	9	None
161	[BUG]  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  N  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  double  N  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	12	None
162	[BUG]  [BUGGY]    final  int  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  int  N  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  int  N  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	12	None
163	[BUG]  [BUGGY]    double  N  =  getNumberOfSuccesses();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    double  N  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    double  N  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	12	None
164	[BUG]  [BUGGY]    final  double  N  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  N  =  getNumberOfSuccesses().doubleValue();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  double  N  =  getNumberOfSuccesses().doubleValue();		non-compiled	[CE]  int  cannot  be  dereferenced	12	None
165	[BUG]  [BUGGY]    final  int  N  =  getPopulationSize();  [CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  int  N  =  getPopulationSize();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  int  N  =  getPopulationSize();		non-compiled	[CE]  variable  N  is  already  defined  in  method  calculateNumericalVariance()	12	None
171	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	8	None
172	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None
173	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  null;  }		non-compiled	[CE]  illegal  start  of  expression	8	None
174	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None
175	[BUG]  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(!numericalVarianceIsCalculated)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateStdNumericalVariance();  }		non-compiled	[CE]  illegal  start  of  expression	8	None
183	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  2;	final  double  m  =  getNumberOfSuccesses();  	compilable	  [FE]  AssertionError  testMoments	13	1
184	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  2;  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  2;	final  double  m  =  getNumberOfSuccesses();  	compilable	  [FE]  AssertionError  testMoments	13	1
184	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses().doubleValue();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses().doubleValue();	final  double  m  =  getNumberOfSuccesses();  	non-compiled	[CE]  int  cannot  be  dereferenced	13	None
192	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	final  double  N  =  getPopulationSize()  /  2;	final  double  N  =  getPopulationSize();  	compilable	  [FE]  AssertionError  testMoments	11	1
193	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]  final  double  N  =  getPopulationSize()  /  2;  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getPopulationSize()  /  2;	final  double  N  =  getPopulationSize();  	compilable	  [FE]  AssertionError  testMoments	11	1
194	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	final  double  N  =  getPopulationSize()  /  2.0;	final  double  N  =  getPopulationSize();  	compilable	  [FE]  AssertionError  testMoments	11	1
195	[BUG]  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]  final  double  N  =  getPopulationSize()  /  2.0;  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getPopulationSize()  /  2.0;	final  double  N  =  getPopulationSize();  	compilable	  [FE]  AssertionError  testMoments	11	1
1	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	    double  numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	4	1
2	[BUG]  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	4	1
2	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	    int  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	4	1
3	[BUG]  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    int  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	4	1
3	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	    double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;		compilable	  [FE]  AssertionError  testMath1021	4	1
4	[BUG]  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  getNumberOfSuccesses()  /  2.0;		compilable	  [FE]  AssertionError  testMath1021	4	1
4	[BUG]  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));		non-compiled	[CE]  ';'  expected	4	None
5	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);		compilable	  [FE]  AssertionError  testMath1021	4	1
6	[BUG]  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1);		compilable	  [FE]  AssertionError  testMath1021	4	1
22	[BUG]  [BUGGY]  numericalVariance  =  calculateNumbericalVariance();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumbericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateNumbericalVariance();	numericalVariance  =  calculateNumericalVariance();  	non-compiled	[CE]  cannot  find  symbol	5	None
23	[BUG]  [BUGGY]  numericalVariance  =  calculatePositiveVariance();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculatePositiveVariance();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculatePositiveVariance();	numericalVariance  =  calculateNumericalVariance();  	non-compiled	[CE]  cannot  find  symbol	5	None
24	[BUG]  [BUGGY]  numericalVariance  =  calculateStdDevVariance();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateStdDevVariance();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStdDevVariance();	numericalVariance  =  calculateNumericalVariance();  	non-compiled	[CE]  cannot  find  symbol	5	None
41	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	12	1
42	[BUG]  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	12	1
43	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  dx  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	    final  double  dx  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	12	1
44	[BUG]  [BUGGY]    final  double  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  dx  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  double  dx  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	12	1
44	[BUG]  [BUGGY]    final  double  k  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  k  =  getNumberOfDay();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  double  k  =  getNumberOfDay();		non-compiled	[CE]  cannot  find  symbol	12	None
45	[BUG]  [BUGGY]    final  double  k  =  getNumberOfCase();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  double  k  =  getNumberOfCase();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  double  k  =  getNumberOfCase();		non-compiled	[CE]  cannot  find  symbol	12	None
81	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
82	[BUG]  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
82	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  n  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  n  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
83	[BUG]  [BUGGY]    int  n  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  n  =  getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  n  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
83	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	20	1
84	[BUG]  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    int  numberOfSuccesses  =  getNumberOfSuccesses()  -  getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	20	1
101	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	    numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	6	1
102	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	6	1
103	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));		non-compiled	[CE]  ';'  expected	6	None
104	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	    double  numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMoments	6	1
105	[BUG]  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    double  numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    double  numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMoments	6	1
105	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	add	    numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMath1021	6	1
106	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    numericalVariance  =  getNumberOfSuccesses()  *  Math.pow(10,  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMath1021	6	1
122	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getStandardDeviation();  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getStandardDeviation();	return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  	non-compiled	[CE]  cannot  find  symbol	1	None
124	[BUG]  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]  return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getSummarySize();  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	return(double)(getSampleSize()  *  getNumberOfSuccesses())/(double)getSummarySize();	return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  	non-compiled	[CE]  cannot  find  symbol	1	None
141	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	    numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMoments	10	1
142	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMoments	10	1
142	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));		non-compiled	[CE]  ';'  expected	10	None
143	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses().doubleValue();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  getNumberOfSuccesses().doubleValue();  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  getNumberOfSuccesses().doubleValue();		non-compiled	[CE]  int  cannot  be  dereferenced	10	None
144	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());		compilable	  [FE]  AssertionError  testMoments	10	1
145	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSampleSize());		compilable	  [FE]  AssertionError  testMoments	10	1
145	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSummarySize());  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSummarySize());  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  getSummarySize());		non-compiled	[CE]  cannot  find  symbol	10	None
163	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();	final  double  m  =  getNumberOfSuccesses();  	compilable	  [FE]  AssertionError  testMoments	13	1
164	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getNumberOfSuccesses();	final  double  m  =  getNumberOfSuccesses();  	compilable	  [FE]  AssertionError  testMoments	13	1
164	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMean();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  getMean();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  getMean();	final  double  m  =  getNumberOfSuccesses();  	non-compiled	[CE]  cannot  find  symbol	13	None
181	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	14	1
182	[BUG]  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	14	1
183	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  dx  =  getNumberOfSuccesses();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	    final  double  dx  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	14	1
184	[BUG]  [BUGGY]    final  double  dx  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  dx  =  getNumberOfSuccesses();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  dx  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	14	1
184	[BUG]  [BUGGY]    final  double  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  k  =  getKind();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  k  =  getKind();		non-compiled	[CE]  cannot  find  symbol	14	None
185	[BUG]  [BUGGY]    final  double  k  =  getNumberOfDay();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  k  =  getNumberOfDay();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  k  =  getNumberOfDay();		non-compiled	[CE]  cannot  find  symbol	14	None
203	[BUG]  [BUGGY]  if(numbericalVarianceIsCalculated)  {  [CE]  cannot  find  symbol  numbericalVarianceIsCalculated  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(numbericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numbericalVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	non-compiled	[CE]  cannot  find  symbol  numbericalVarianceIsCalculated	3	None
204	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMath1021	3	1
205	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&  getNumberOfSuccesses()  >  0)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMath1021	3	1
263	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();	final  double  n  =  getSampleSize();  	compilable	  [FE]  AssertionError  testMoments	15	1
264	[BUG]  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize()  *  getNumberOfSuccesses();	final  double  n  =  getSampleSize();  	compilable	  [FE]  AssertionError  testMoments	15	1
283	[BUG]  [BUGGY]  final  double  N  =  getNumberOfHyphens();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]  final  double  N  =  getNumberOfHyphens();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	final  double  N  =  getNumberOfHyphens();	final  double  N  =  getPopulationSize();  	non-compiled	[CE]  cannot  find  symbol	11	None
301	[BUG]  [BUGGY]    final  double  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getKind();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getKind();		non-compiled	[CE]  cannot  find  symbol	16	None
302	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	add	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	16	1
303	[BUG]  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	16	1
303	[BUG]  [BUGGY]    final  double  k  =  getKnowNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getKnowNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getKnowNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	16	None
304	[BUG]  [BUGGY]    final  double  k  =  getDecimalSize();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getDecimalSize();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getDecimalSize();		non-compiled	[CE]  cannot  find  symbol	16	None
305	[BUG]  [BUGGY]    final  double  k  =  getNumberOfKind();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getNumberOfKind();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getNumberOfKind();		non-compiled	[CE]  cannot  find  symbol	16	None
321	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	    numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMoments	8	1
322	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  getNumberOfSuccesses();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMoments	8	1
322	[BUG]  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  getNumberOfSuccesses()  *(numberOfSuccesses  -  1));		non-compiled	[CE]  ';'  expected	8	None
324	[BUG]  [BUGGY]    numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  calculateNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	8	None
325	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	    numericalVariance  =  Math.abs(numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	8	1
326	[BUG]  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  Math.abs(numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	8	1
342	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numericalVariance  *  numberOfSuccesses;	return  numericalVariance;  	compilable	  [FE]  AssertionError  testMoments	9	1
343	[BUG]  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  *  numberOfSuccesses;  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  *  numberOfSuccesses;	return  numericalVariance;  	compilable	  [FE]  AssertionError  testMoments	9	1
343	[BUG]  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  /(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numberOfSuccesses  -  1)*(numberOfSuccesses  -  1));	return  numericalVariance;  	non-compiled	[CE]  ';'  expected	9	None
344	[BUG]  [BUGGY]  return  numericalVariance  /(numericalVariance  *  getSummarySize())*  numberOfSuccesses;  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  /(numericalVariance  *  getSummarySize())*  numberOfSuccesses;  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  /(numericalVariance  *  getSummarySize())*  numberOfSuccesses;	return  numericalVariance;  	non-compiled	[CE]  cannot  find  symbol	9	None
362	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    int  k  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	    int  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	2	1
363	[BUG]  [BUGGY]    int  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    int  k  =  getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    int  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	2	1
363	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getNumberOf  [CE]  ';'  expected  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getNumberOf  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    if(getNumberOfSuccesses()  >  0)  {  double  getNumberOfSuccesses();  if(getNumberOfSuccesses()  >  1)  {  return  getNumberOfSuccesses()  *  getNumberOf		non-compiled	[CE]  ';'  expected	2	None
364	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	2	None
365	[BUG]  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    if(getNumberOfSuccesses()  >  0)  {  int  k  =  getNumberOfSuccesses();  if(k  >  0)  {  return  getNumberOfSuccesses()  *  getNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	2	None
381	[BUG]  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  m  =  getNumberOfSuccesses();		non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	18	None
382	[BUG]  [BUGGY]    final  double  m  =  getNumericalVariance();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumericalVariance();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  m  =  getNumericalVariance();		non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	18	None
383	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	18	1
384	[BUG]  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  k  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	18	1
384	[BUG]  [BUGGY]    final  double  k  =  getKind();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  k  =  getKind();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  k  =  getKind();		non-compiled	[CE]  cannot  find  symbol	18	None
385	[BUG]  [BUGGY]    final  double  m  =  getNumberOfEscapes();  [CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    final  double  m  =  getNumberOfEscapes();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    final  double  m  =  getNumberOfEscapes();		non-compiled	[CE]  variable  m  is  already  defined  in  method  calculateNumericalVariance()	18	None
1	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	    numericalVariance  =  Math.abs(numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	10	1
2	[BUG]  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  Math.abs(numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	10	1
2	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	10	1
3	[BUG]  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	10	1
3	[BUG]  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  m);  [CE]  cannot  find  symbol  m  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  m);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  Math.max(numberOfSuccesses,  m);		non-compiled	[CE]  cannot  find  symbol  m	10	None
4	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	    numericalVariance  =  Math.abs(numberOfSuccesses  -  1);		compilable	  [FE]  AssertionError  testMoments	10	1
5	[BUG]  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses  -  1);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  Math.abs(numberOfSuccesses  -  1);		compilable	  [FE]  AssertionError  testMoments	10	1
5	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	    numericalVariance  =  Math.abs(numberOfSuccesses  /  2);		compilable	  [FE]  AssertionError  testMoments	10	1
6	[BUG]  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    numericalVariance  =  Math.abs(numberOfSuccesses  /  2);  [BUGGY]  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	    numericalVariance  =  Math.abs(numberOfSuccesses  /  2);		compilable	  [FE]  AssertionError  testMoments	10	1
34	[BUG]  [BUGGY]  return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [CE]  cannot  find  symbol  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]  return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());  [BUGGY]  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	return  FastMath.max(0,  getVariance()  +  getNumberOfSuccesses()  -  getPopulationSize());	return  FastMath.max(0,    getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  	non-compiled	[CE]  cannot  find  symbol	19	None
61	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance())  {  [CE]  abstract  method  getNumericalVariance()  in  IntegerDistribution  cannot  be  accessed  directly  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance())  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&!super.getNumericalVariance())  {	if  (!numericalVarianceIsCalculated)  {  	non-compiled	[CE]  abstract  method  getNumericalVariance()  in  IntegerDistribution  cannot  be  accessed  directly	3	None
62	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&!dynamicVarianceIsCalculated)  {  [CE]  cannot  find  symbol  dynamicVarianceIsCalculated  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!numericalVarianceIsCalculated  &&!dynamicVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&!dynamicVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	non-compiled	[CE]  cannot  find  symbol  dynamicVarianceIsCalculated	3	None
63	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMoments	3	1
64	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(numericalVarianceIsCalculated  &&!numericalVarianceIsCalculated)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMoments	3	1
64	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMath1021	3	1
65	[BUG]  [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]  if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	if(!numericalVarianceIsCalculated  &&  Math.abs(numberOfSuccesses)>  0)  {	if  (!numericalVarianceIsCalculated)  {  	compilable	  [FE]  AssertionError  testMath1021	3	1
94	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1);  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	add	return  numericalVariance  *(numberOfSuccesses  -  1);	return  numericalVariance;  	compilable	  [FE]  AssertionError  testMoments	9	1
95	[BUG]  [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1);  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  numericalVariance  *(numberOfSuccesses  -  1);  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	283	283	1	replace	return  numericalVariance  *(numberOfSuccesses  -  1);	return  numericalVariance;  	compilable	  [FE]  AssertionError  testMoments	9	1
122	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *  (N  -  1));  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	add	return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *  (N  -  1));	return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  	compilable	  [FE]  AssertionError  testMoments	17	1
123	[BUG]  [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *  (N  -  1));  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]  return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *  (N  -  1));  [BUGGY]  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	return(N  *  m  *(N  *  n)*(N  *  m))  /(N  *  N  *  (N  -  1));	return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  	compilable	  [FE]  AssertionError  testMoments	17	1
152	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	8	1
153	[BUG]  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  Math.max(numberOfSuccesses,  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMoments	8	1
153	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	    numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());		compilable	  [FE]  AssertionError  testMoments	8	1
154	[BUG]  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [FE]  AssertionError  testMoments  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  Math.max(numberOfSuccesses,  getPopulationSize());		compilable	  [FE]  AssertionError  testMoments	8	1
154	[BUG]  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  m);  [CE]  cannot  find  symbol  m  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  m);  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  Math.max(numberOfSuccesses,  m);		non-compiled	[CE]  cannot  find  symbol  m	8	None
155	[BUG]  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  x  -  1);  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVariance  =  Math.max(numberOfSuccesses,  x  -  1);  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    numericalVariance  =  Math.max(numberOfSuccesses,  x  -  1);		non-compiled	[CE]  cannot  find  symbol  x	8	None
183	[BUG]  [BUGGY]    final  double  k  =  getNumberOfDays();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  k  =  getNumberOfDays();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  k  =  getNumberOfDays();		non-compiled	[CE]  cannot  find  symbol	14	None
184	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  k  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	    final  double  k  =  getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	14	1
185	[BUG]  [BUGGY]    final  double  k  =  getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]    final  double  k  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	    final  double  k  =  getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	14	1
211	[BUG]  [BUGGY]    setNumberOfSuccesses(getNumberOfSuccesses()  -  1);  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    setNumberOfSuccesses(getNumberOfSuccesses()  -  1);  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    setNumberOfSuccesses(getNumberOfSuccesses()  -  1);		non-compiled	[CE]  cannot  find  symbol	12	None
212	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  int  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	add	    final  int  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	12	1
213	[BUG]  [BUGGY]    final  int  k  =  getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    final  int  k  =  getNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    final  int  k  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	12	1
213	[BUG]  [BUGGY]    setNumberOfSuccesses(getNumberOfSuccesses());  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    setNumberOfSuccesses(getNumberOfSuccesses());  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    setNumberOfSuccesses(getNumberOfSuccesses());		non-compiled	[CE]  cannot  find  symbol	12	None
215	[BUG]  [BUGGY]    super.calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  [BUGGY]    super.calculateNumberOfSuccesses();  [BUGGY]  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	292	292	1	replace	    super.calculateNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	12	None
241	[BUG]  [BUGGY]    super.getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    super.getNumberOfSuccesses();  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    super.getNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	6	None
242	[BUG]  [BUGGY]    setNumberOfSuccesses(n);  [CE]  cannot  find  symbol  n  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    setNumberOfSuccesses(n);  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    setNumberOfSuccesses(n);		non-compiled	[CE]  cannot  find  symbol  n	6	None
244	[BUG]  [BUGGY]    setNumberOfSuccesses(n  -  1);  [CE]  cannot  find  symbol  n  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    setNumberOfSuccesses(n  -  1);  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    setNumberOfSuccesses(n  -  1);		non-compiled	[CE]  cannot  find  symbol  n	6	None
245	[BUG]  [BUGGY]    double  numericalVariance  =  Math.floor(getMean());  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]    double  numericalVariance  =  Math.floor(getMean());  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	    double  numericalVariance  =  Math.floor(getMean());		non-compiled	[CE]  cannot  find  symbol	6	None
271	[BUG]  [BUGGY]    getNumberOfSuccesses()  -  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    getNumberOfSuccesses()  -  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    getNumberOfSuccesses()  -  getPopulationSize();		non-compiled	[CE]  not  a  statement	20	None
272	[BUG]  [BUGGY]    getNumberOfSuccesses()  +  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    getNumberOfSuccesses()  +  getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    getNumberOfSuccesses()  +  getPopulationSize();		non-compiled	[CE]  not  a  statement	20	None
273	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	20	1
274	[BUG]  [BUGGY]    getPopulationSize();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    getPopulationSize();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    getPopulationSize();		compilable	  [FE]  AssertionError  testMath1021	20	1
274	[BUG]  [BUGGY]    checkNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    checkNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    checkNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	20	None
275	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	add	    getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
276	[BUG]  [BUGGY]    getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  int  getSupportLowerBound()  {  [BUGGY]    getNumberOfSuccesses();  [BUGGY]  return  FastMath.max(0,        getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  getSampleSize()  +  getNumberOfSuccesses()  -  getPopulationSize());  }  [CLASS]  HypergeometricDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  int  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	308	309	1	replace	    getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	20	1
333	[BUG]  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleNumberOfSuccesses();	final  double  n  =  getSampleSize();  	non-compiled	[CE]  cannot  find  symbol	15	None
334	[BUG]  [BUGGY]  final  double  n  =  getSampleSize(n);  [CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]  final  double  n  =  getSampleSize(n);  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	final  double  n  =  getSampleSize(n);	final  double  n  =  getSampleSize();  	non-compiled	[CE]  method  getSampleSize  in  class  HypergeometricDistribution  cannot  be  applied  to  given  types;	15	None
361	[BUG]  [BUGGY]    n  =  getNumberOfSuccesses();  [CE]  cannot  assign  a  value  to  final  variable  n  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    n  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    n  =  getNumberOfSuccesses();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	18	None
362	[BUG]  [BUGGY]    m  =  getNumberOfSuccesses();  [CE]  cannot  assign  a  value  to  final  variable  m  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    m  =  getNumberOfSuccesses();  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    m  =  getNumberOfSuccesses();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  m	18	None
363	[BUG]  [BUGGY]    n  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [CE]  cannot  assign  a  value  to  final  variable  n  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    n  =  getNumberOfSuccesses()  +  Math.max(n,  m);  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    n  =  getNumberOfSuccesses()  +  Math.max(n,  m);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	18	None
364	[BUG]  [BUGGY]    n  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [CE]  cannot  assign  a  value  to  final  variable  n  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    n  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    n  =  getNumberOfSuccesses()  +  Math.abs(m  /  k);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	18	None
365	[BUG]  [BUGGY]    n  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [CE]  cannot  assign  a  value  to  final  variable  n  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  final  double  n  =  getSampleSize();  [BUGGY]    n  =  getNumberOfSuccesses()  *  Math.pow(m,  n);  [BUGGY]  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	295	295	1	replace	    n  =  getNumberOfSuccesses()  *  Math.pow(m,  n);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	18	None
392	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
393	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  <  0)?  numericalVarianceIsCalculated  :  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
393	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
394	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
394	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  true;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
395	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  true;  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  true;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =(numericalVariance  ==  0)?  numericalVarianceIsCalculated  :  true;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  testMath1021	7	1
421	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	add	    getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	2	1
422	[BUG]  [BUGGY]    getNumberOfSuccesses();  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    getNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    getNumberOfSuccesses();		compilable	  [FE]  AssertionError  testMath1021	2	1
422	[BUG]  [BUGGY]    checkNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    checkNumberOfSuccesses();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    checkNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	2	None
424	[BUG]  [BUGGY]    getNumberOfSuccesses()  *  getPopulationSize();  [CE]  not  a  statement  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    getNumberOfSuccesses()  *  getPopulationSize();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    getNumberOfSuccesses()  *  getPopulationSize();		non-compiled	[CE]  not  a  statement	2	None
425	[BUG]  [BUGGY]    getNumberOfSuccesses()  *  Math.random();  [CE]  not  a  statement  [CONTEXT]  public  double  getNumericalMean()  {  [BUGGY]    getNumberOfSuccesses()  *  Math.random();  [BUGGY]  return  (double)  (getSampleSize()  *  getNumberOfSuccesses())  /  (double)  getPopulationSize();  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalMean  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	268	268	1	replace	    getNumberOfSuccesses()  *  Math.random();		non-compiled	[CE]  not  a  statement	2	None
453	[BUG]  [BUGGY]  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	add	final  double  m  =  getNumberOfSuccesses()  *  N;	final  double  m  =  getNumberOfSuccesses();  	compilable	  [FE]  AssertionError  testMoments	13	1
454	[BUG]  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  [FE]  AssertionError  testMoments  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  [BUGGY]  final  double  m  =  getNumberOfSuccesses()  *  N;  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	293	293	1	replace	final  double  m  =  getNumberOfSuccesses()  *  N;	final  double  m  =  getNumberOfSuccesses();  	compilable	  [FE]  AssertionError  testMoments	13	1
482	[BUG]  [BUGGY]    final  double  k  =  getDecimalVariance();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getDecimalVariance();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getDecimalVariance();		non-compiled	[CE]  cannot  find  symbol	16	None
483	[BUG]  [BUGGY]    final  double  k  =  getDayOfMonth();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getDayOfMonth();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getDayOfMonth();		non-compiled	[CE]  cannot  find  symbol	16	None
484	[BUG]  [BUGGY]    final  double  k  =  getDecimalValue();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  calculateNumericalVariance()  {  final  double  N  =  getPopulationSize();  final  double  m  =  getNumberOfSuccesses();  [BUGGY]    final  double  k  =  getDecimalValue();  [BUGGY]  final  double  n  =  getSampleSize();  return  (n  *  m  *  (N  -  n)  *  (N  -  m))  /  (N  *  N  *  (N  -  1));  }  [CLASS]  HypergeometricDistribution  [METHOD]  calculateNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  N  m  n  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	294	294	1	replace	    final  double  k  =  getDecimalValue();		non-compiled	[CE]  cannot  find  symbol	16	None
541	[BUG]  [BUGGY]    super.getNumberOfSuccesses();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    super.getNumberOfSuccesses();  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    super.getNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	4	None
542	[BUG]  [BUGGY]  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	add	    double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMath1021	4	1
543	[BUG]  [BUGGY]    double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  [FE]  AssertionError  testMath1021  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  Math.max(getNumberOfSuccesses(),  numberOfSuccesses);		compilable	  [FE]  AssertionError  testMath1021	4	1
543	[BUG]  [BUGGY]    double  numericalVariance  =  Math.floor(getSlope());  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  Math.floor(getSlope());  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  Math.floor(getSlope());		non-compiled	[CE]  cannot  find  symbol	4	None
544	[BUG]  [BUGGY]    double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses);  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  Math.floor(getMean()  /  numberOfSuccesses);		non-compiled	[CE]  cannot  find  symbol	4	None
545	[BUG]  [BUGGY]    double  numericalVariance  =  Math.max(getNumberOfSuccesses()  -  1);  [CE]  no  suitable  method  found  for  max(int)  [CONTEXT]  public  double  getNumericalVariance()  {  [BUGGY]    double  numericalVariance  =  Math.max(getNumberOfSuccesses()  -  1);  [BUGGY]  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	279	279	1	replace	    double  numericalVariance  =  Math.max(getNumberOfSuccesses()  -  1);		non-compiled	[CE]  no  suitable  method  found  for  max(int)	4	None
573	[BUG]  [BUGGY]  numericalVariance  =  calculateVariance();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateVariance();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateVariance();	numericalVariance  =  calculateNumericalVariance();  	non-compiled	[CE]  cannot  find  symbol	5	None
574	[BUG]  [BUGGY]  numericalVariance  =  calculateStandardVariance();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  [BUGGY]  numericalVariance  =  calculateStandardVariance();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	280	280	1	replace	numericalVariance  =  calculateStandardVariance();	numericalVariance  =  calculateNumericalVariance();  	non-compiled	[CE]  cannot  find  symbol	5	None
