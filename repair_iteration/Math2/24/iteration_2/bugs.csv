bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  int  sampleSize  =  numberOfSuccesses  -  1;  [BUGGY]    if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  numberOfSuccesses  -  1;	      int    sampleSize    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  int  sampleSize  =  numberOfSuccesses  +  1;  [BUGGY]    if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  numberOfSuccesses  +  1;	      int    sampleSize    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  if(populationSize  <  =  populationSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  <  =  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize  <  =  populationSize)  {	  if(populationSize    >    populationSize)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  >  numberOfSuccesses)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	add	if(populationSize  >  numberOfSuccesses)  {	  if(populationSize    >    populationSize)    {    	compilable	  [FE]  NumberIsTooLargeException  	2	16	replace
5	[BUG]  [BUGGY]  if(populationSize  >  numberOfSuccesses)  {  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  >  numberOfSuccesses)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize  >  numberOfSuccesses)  {	  if(populationSize    >    populationSize)    {    	compilable	  [FE]  NumberIsTooLargeException  	2	16	replace
6	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  if(numberOfSuccesses  >  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses    >    populationSize)    {    if(numberOfSuccesses  >  populationSize)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
7	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  If(numberOfSuccesses  >  populationSize)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  If(numberOfSuccesses  >  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses    >    populationSize)    {    If(numberOfSuccesses  >  populationSize)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
8	[BUG]  [BUGGY]  this.populationSize  =  numberOfSuccesses  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  this.populationSize  =  numberOfSuccesses  +  1;  [BUGGY]    if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	this.populationSize  =  numberOfSuccesses  +  1;	      this.populationSize    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  this.populationSize  =  numberOfSuccesses  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  this.populationSize  =  numberOfSuccesses  -  1;  [BUGGY]    if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	this.populationSize  =  numberOfSuccesses  -  1;	      this.populationSize    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  int  sampleSize  =  rng.getSampleSize()  +  1;  [BUGGY]    if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  rng.getSampleSize()  +  1;	      int    sampleSize    =    rng.getSampleSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	add	if(numberOfSuccesses  <  populationSize)  {	  if(numberOfSuccesses    >    populationSize)    {    	compilable	  [FE]  NumberIsTooLargeException  	8	16	replace
12	[BUG]  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  [FE]  NumberIsTooLargeException  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  <  populationSize)  {	  if(numberOfSuccesses    >    populationSize)    {    	compilable	  [FE]  NumberIsTooLargeException  	8	16	replace
13	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  sampleSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	add	if(numberOfSuccesses  >  sampleSize)  {	  if(numberOfSuccesses    >    populationSize)    {    	compilable	  [FE]  NumberIsTooLargeException  	8	3	replace
14	[BUG]  [BUGGY]  if(numberOfSuccesses  >  sampleSize)  {  [FE]  NumberIsTooLargeException  [FE]      AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  sampleSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  >  sampleSize)  {	  if(numberOfSuccesses    >    populationSize)    {    	compilable	  [FE]  NumberIsTooLargeException  	8	3	replace
15	[BUG]  [BUGGY]  if(populationSize  >  populationSize)  {  if(populationSize  >  populationSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  >  populationSize)  {  if(populationSize  >  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    >    populationSize)    {    if(populationSize  >  populationSize)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
16	[BUG]  [BUGGY]  if(populationSize  >  populationSize)  {  If(populationSize  >  populationSize)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  >  populationSize)  {  If(populationSize  >  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    >    populationSize)    {    If(populationSize  >  populationSize)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
17	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  populationSize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  populationSize;  [BUGGY]    if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  numberOfSuccesses  /  populationSize;	      int    sampleSize    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  <  numberOfSuccesses)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	add	if(populationSize  <  numberOfSuccesses)  {	  if(populationSize    >    populationSize)    {    	compilable	  [FE]  AssertionError  	2	2	replace
19	[BUG]  [BUGGY]  if(populationSize  <  numberOfSuccesses)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  <  numberOfSuccesses)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize  <  numberOfSuccesses)  {	  if(populationSize    >    populationSize)    {    	compilable	  [FE]  AssertionError  	2	2	replace
20	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  this.populationSize  =  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  this.populationSize  =  numberOfSuccesses;  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses();  this.populationSize  =  numberOfSuccesses;	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize(numberOfSuccesses);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  int  sampleSize  =  rng.getSampleSize(numberOfSuccesses);  [BUGGY]    if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  rng.getSampleSize(numberOfSuccesses);	      int    sampleSize    =    rng.getSampleSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  <  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	add	if(populationSize  <  populationSize)  {	  if(populationSize    >    populationSize)    {    	compilable	  [FE]  AssertionError  	2	2	replace
24	[BUG]  [BUGGY]  if(populationSize  <  populationSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(populationSize  <  populationSize)  {  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize  <  populationSize)  {	  if(populationSize    >    populationSize)    {    	compilable	  [FE]  AssertionError  	2	2	replace
25	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }    [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }  [BUGGY]    throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
