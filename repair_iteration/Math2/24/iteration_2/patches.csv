bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(populationSize  <  populationSize)  {  if(populationSize  <  populationSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(populationSize  <  populationSize)  {  if(populationSize  <  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    <    populationSize)    {    if(populationSize  <  populationSize)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
2	[BUG]  [BUGGY]  if(populationSize  <  populationSize)  {  If(populationSize  <  populationSize)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(populationSize  <  populationSize)  {  If(populationSize  <  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    <    populationSize)    {    If(populationSize  <  populationSize)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
3	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  1;  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  numberOfSuccesses  /  1;	  int    sampleSize    =    numberOfSuccesses    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  If(numberOfSuccesses  >  populationSize)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  If(numberOfSuccesses  >  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	If(numberOfSuccesses  >  populationSize)  {	  if(numberOfSuccesses    >    populationSize)    {    If(numberOfSuccesses    >    populationSize)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
5	[BUG]  [BUGGY]  If(numberOfSuccesses  ==  populationSize)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  If(numberOfSuccesses  ==  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	If(numberOfSuccesses  ==  populationSize)  {	  if(numberOfSuccesses    >    populationSize)    {    If(numberOfSuccesses    >    populationSize)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
6	[BUG]  [BUGGY]  if(populationSize  <  numberOfSuccesses)  {  if(populationSize  <  numberOfSuccesses)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(populationSize  <  numberOfSuccesses)  {  if(populationSize  <  numberOfSuccesses)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    <    numberOfSuccesses)    {    if(populationSize  <  numberOfSuccesses)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
7	[BUG]  [BUGGY]  if(populationSize  <  numberOfSuccesses)  {  If(populationSize  <  numberOfSuccesses)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(populationSize  <  numberOfSuccesses)  {  If(populationSize  <  numberOfSuccesses)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    <    numberOfSuccesses)    {    If(populationSize  <  numberOfSuccesses)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
8	[BUG]  [BUGGY]  this.populationSize  =  numberOfSuccesses  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  this.populationSize  =  numberOfSuccesses  /  1;  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	this.populationSize  =  numberOfSuccesses  /  1;	  this.populationSize    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize(populationSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  sampleSize  =  rng.getSampleSize(populationSize);  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  rng.getSampleSize(populationSize);	  int    sampleSize    =    rng.getSampleSize(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
10	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize(numberOfSuccesses,  populationSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  sampleSize  =  rng.getSampleSize(numberOfSuccesses,  populationSize);  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  rng.getSampleSize(numberOfSuccesses,  populationSize);	  int    sampleSize    =    rng.getSampleSize(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
11	[BUG]  [BUGGY]  if(numberOfSuccesses  >  sampleSize)  {  if(numberOfSuccesses  >  sampleSize)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  >  sampleSize)  {  if(numberOfSuccesses  >  sampleSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses    >    sampleSize)    {    if(numberOfSuccesses  >  sampleSize)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
12	[BUG]  [BUGGY]  if(numberOfSuccesses  >  sampleSize)  {  If(numberOfSuccesses  >  sampleSize)  {  [CE]  ';'  expected  [FE]      NumberIsTooLargeException    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  >  sampleSize)  {  If(numberOfSuccesses  >  sampleSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses    >    sampleSize)    {    If(numberOfSuccesses  >  sampleSize)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
13	[BUG]  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  if(numberOfSuccesses  <  populationSize)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  if(numberOfSuccesses  <  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses    <    populationSize)    {    if(numberOfSuccesses  <  populationSize)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
14	[BUG]  [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  If(numberOfSuccesses  <  populationSize)  {  [CE]  ';'  expected  [FE]      NumberIsTooLargeException    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  <  populationSize)  {  If(numberOfSuccesses  <  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses    <    populationSize)    {    If(numberOfSuccesses  <  populationSize)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
15	[BUG]  [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses;  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  numberOfSuccesses  =  numberOfSuccesses;	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    populationSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
16	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	this.numberOfSuccesses  =  numberOfSuccesses;	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    populationSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
17	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  -  1;  this.populationSize  =  numberOfSuccesses;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  -  1;  this.populationSize  =  numberOfSuccesses;  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  -  1;  this.populationSize  =  numberOfSuccesses;	  int    numberOfSuccesses    =    rng.getNumberOfSuccesses();    this.populationSize    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  if(populationSize  <  =  numberOfSuccesses)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(populationSize  <  =  numberOfSuccesses)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize  <  =  numberOfSuccesses)  {	  if(populationSize    <    =    populationSize)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  *  populationSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  sampleSize  =  numberOfSuccesses  *  populationSize;  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  numberOfSuccesses  *  populationSize;	  int    sampleSize    =    numberOfSuccesses    /    populationSize;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses  -  populationSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  numberOfSuccesses  -  populationSize;  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  numberOfSuccesses  =  numberOfSuccesses  -  populationSize;	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    sampleSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  <  numberOfSuccesses)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	add	if(numberOfSuccesses  <  numberOfSuccesses)  {	  if(populationSize    <    numberOfSuccesses)    {    	compilable	  [FE]  AssertionError  	19	2	replace
22	[BUG]  [BUGGY]  if(numberOfSuccesses  <  numberOfSuccesses)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  <  numberOfSuccesses)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  <  numberOfSuccesses)  {	  if(populationSize    <    numberOfSuccesses)    {    	compilable	  [FE]  AssertionError  	19	2	replace
23	[BUG]  [BUGGY]  If(populationSize  >  populationSize)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  If(populationSize  >  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	If(populationSize  >  populationSize)  {	  if(populationSize    >    populationSize)    {    If(populationSize    >    populationSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
24	[BUG]  [BUGGY]  If(populationSize  <  =  populationSize)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  If(populationSize  <  =  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	If(populationSize  <  =  populationSize)  {	  if(populationSize    >    populationSize)    {    If(populationSize    >    populationSize)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
25	[BUG]  [BUGGY]  if(numberOfSuccesses  <  =  populationSize)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  <  =  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  <  =  populationSize)  {	  if(numberOfSuccesses    <    populationSize)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  if(populationSize  >  numberOfSuccesses)  {  if(populationSize  >  numberOfSuccesses)  {  [CE]  illegal  start  of  expression  [FE]    NumberIsTooLargeException    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(populationSize  >  numberOfSuccesses)  {  if(populationSize  >  numberOfSuccesses)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    >    numberOfSuccesses)    {    if(populationSize  >  numberOfSuccesses)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
27	[BUG]  [BUGGY]  if(populationSize  >  numberOfSuccesses)  {  If(populationSize  >  numberOfSuccesses)  {  [CE]  ';'  expected  [FE]      NumberIsTooLargeException    [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(populationSize  >  numberOfSuccesses)  {  If(populationSize  >  numberOfSuccesses)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(populationSize    >    numberOfSuccesses)    {    If(populationSize  >  numberOfSuccesses)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
28	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  +  1;	  int    numberOfSuccesses    =    rng.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
29	[BUG]  [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  -  1;  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  numberOfSuccesses  =  rng.getNumberOfSuccesses()  -  1;	  int    numberOfSuccesses    =    rng.getNumberOfSuccesses();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
30	[BUG]  [BUGGY]  this.populationSize  =  numberOfSuccesses  -  1L;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  this.populationSize  =  numberOfSuccesses  -  1L;  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	this.populationSize  =  numberOfSuccesses  -  1L;	  this.populationSize    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  -  1L;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  sampleSize  =  numberOfSuccesses  -  1L;  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  numberOfSuccesses  -  1L;	  int    sampleSize    =    numberOfSuccesses    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    sampleSize,    true);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
33	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  true);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  true);  }  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  true);  }	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    sampleSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
34	[BUG]  [BUGGY]  If(populationSize  <  populationSize)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  If(populationSize  <  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	If(populationSize  <  populationSize)  {	  if(populationSize    >    populationSize)    {    If(populationSize    >    populationSize)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
35	[BUG]  [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  populationSize  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  sampleSize  =  numberOfSuccesses  /  populationSize  +  1;  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  numberOfSuccesses  /  populationSize  +  1;	  int    sampleSize    =    numberOfSuccesses    /    populationSize;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	NumberIsTooLargeException.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    populationSize,    true);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
37	[BUG]  [BUGGY]  int  sampleSize  =  rng.getSampleSize(numberOfSuccesses,  numberSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  int  sampleSize  =  rng.getSampleSize(numberOfSuccesses,  numberSize);  [BUGGY]      if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	int  sampleSize  =  rng.getSampleSize(numberOfSuccesses,  numberSize);	  int    sampleSize    =    rng.getSampleSize(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
38	[BUG]  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  sampleSize,  true);	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    sampleSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
39	[BUG]  [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  true);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  true);  }  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	if(numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  true);  }	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    sampleSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
40	[BUG]  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  true);	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    populationSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
41	[BUG]  [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  true);  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  populationSize,  true);	  if(numberOfSuccesses    >    populationSize)    {    throw    new    NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses,    populationSize,    true);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
42	[BUG]  [BUGGY]  If(numberOfSuccesses  <  populationSize)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (sampleSize  <  0)  {  throw  new  NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  if  (numberOfSuccesses  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses,  populationSize,  true);  }      [BUGGY]  If(numberOfSuccesses  <  populationSize)  {  [BUGGY]      throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;  }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	103	103	1	replace	If(numberOfSuccesses  <  populationSize)  {	  if(numberOfSuccesses    >    populationSize)    {    If(numberOfSuccesses    >    populationSize)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
