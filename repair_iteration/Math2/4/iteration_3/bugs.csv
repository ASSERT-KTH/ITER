bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	double    numberOfSuccesses    =    getNumberOfSuccesses()    +    1;    double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	13	None	add
2	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  Double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  Double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	double    numberOfSuccesses    =    getNumberOfSuccesses()    +    1;    Double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	13	None	add
3	[BUG]  [BUGGY]  numericalVariance  =  calculateSampleVariance();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  calculateSampleVariance();  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateSampleVariance();	          if(numericalVarianceIsCalculated)    {    if(numericalVariance    ==    null)    {    numericalVariance    =    calculateSampleVariance();    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated        =        false;        numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;	  	compilable	  [FE]  AssertionError  	1	1	add
5	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;	  	compilable	  [FE]  AssertionError  	1	1	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  true;  numericalVarianceIsCalculated  =  false;  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated        =        false;        numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  true;  numericalVarianceIsCalculated  =  false;	  	compilable	  [FE]  AssertionError  	1	1	add
7	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  true;  numericalVarianceIsCalculated  =  false;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  true;  numericalVarianceIsCalculated  =  false;  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  true;  numericalVarianceIsCalculated  =  false;	  	compilable	  [FE]  AssertionError  	1	1	add
8	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  /  1;	  double    numberOfSuccesses    =    calculateNumberOfSuccesses()    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
9	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberO  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberO  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberO	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	8	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated        =        false;        if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }	  	compilable	  [FE]  AssertionError  	24	1	add
11	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }	  	compilable	  [FE]  AssertionError  	24	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated        =        false;        if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }	  	compilable	  [FE]  AssertionError  	24	1	add
13	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }	  	compilable	  [FE]  AssertionError  	24	1	add
14	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  double  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  double  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    double  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }	  	non-compiled	[CE]  incompatible  types	24	None	add
15	[BUG]  [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	Double  numberOfSuccesses  =  getNumberOfSuccesses();	          double    numberOfSuccesses    =    getNumberOfSuccesses();    Double    numberOfSuccesses    =    getNumberOfSuccesses();    	non-compiled	[CE]  incompatible  types	18	None	replace
16	[BUG]  [BUGGY]  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }  [CE]  incomparable  types:  double  and  <null>  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }	          if(numericalVarianceIsCalculated)    {    if(numericalVariance    ==    null)    {    return    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	22	None	replace
17	[BUG]  [BUGGY]  if(numericalVariance!=  null)  {  return  calculateNumberOfSuccesses();  }  [CE]  incomparable  types:  double  and  <null>  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVariance!=  null)  {  return  calculateNumberOfSuccesses();  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance!=  null)  {  return  calculateNumberOfSuccesses();  }	          if(numericalVarianceIsCalculated)    {    if(numericalVariance    ==    null)    {    return    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	22	None	replace
18	[BUG]  [BUGGY]  numericalVariance  =  null;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  null;  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  null;	  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    	non-compiled	[CE]  incompatible  types	25	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVariance  =  calculateNumericalVariance();  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance    =    calculateNumericalVariance();    numericalVariance  =  calculateNumericalVariance();	  	compilable	  [FE]  AssertionError  	11	1	add
20	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVariance  =  calculateNumericalVariance();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVariance  =  calculateNumericalVariance();  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance    =    calculateNumericalVariance();    numericalVariance  =  calculateNumericalVariance();	  	compilable	  [FE]  AssertionError  	11	1	add
21	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance    =    calculateNumericalVariance();    numericalVariance  =  calculateNumberOfSuccesses();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
22	[BUG]  [BUGGY]  n  =  getNumberOfSuccesses();  [CE]  cannot  find  symbol  n  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  n  =  getNumberOfSuccesses();  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	n  =  getNumberOfSuccesses();	          if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    return    calculateNumericalVariance();    }    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
23	[BUG]  [BUGGY]  if(numerOfSuccesses!=  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numerOfSuccesses!=  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numerOfSuccesses!=  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	8	None	replace
24	[BUG]  [BUGGY]  if(numerOfSuccesses  ==  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numerOfSuccesses  ==  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numerOfSuccesses  ==  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	8	None	replace
25	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  numericVarianceIsCalculated  =  false;  [CE]  cannot  find  symbol  numericVarianceIsCalculated  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  numericVarianceIsCalculated  =  false;  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;  numericVarianceIsCalculated  =  false;	  	non-compiled	[CE]  cannot  find  symbol  numericVarianceIsCalculated	1	None	add
26	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericVarianceIsCalculated  =  false;  }  [CE]  cannot  find  symbol  numericVarianceIsCalculated  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericVarianceIsCalculated  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericVarianceIsCalculated  =  false;  }	  	non-compiled	[CE]  cannot  find  symbol  numericVarianceIsCalculated	24	None	add
27	[BUG]  [BUGGY]  if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }	          if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    return    calculateNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  }	          if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    return    calculateNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateRangeNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateRangeNumericalVariance();  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateRangeNumericalVariance();  }	  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)    {    if(numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if(numerOfSuccesses  >  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numerOfSuccesses  >  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numerOfSuccesses  >  0)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  if(numerOfSuccesses  >=  numberOfSuccesses)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numerOfSuccesses  >=  numberOfSuccesses)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numerOfSuccesses  >=  numberOfSuccesses)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	  if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOf    	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  if(numericalVariance!=  null)  {  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVariance!=  null)  {  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance!=  null)  {  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }	          if(numericalVarianceIsCalculated)    {    if(numericalVariance    ==    null)    {    return    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
33	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  }	          if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    i++)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  else  {  numberOfSuccesses  =  false;  }  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [FE]            AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  else  {  numberOfSuccesses  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  else  {  numberOfSuccesses  =  false;  }	  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    }    else    {    numberOfSuccesses    =    false;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	4	None	replace
35	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  else  {  numberOfSuccesses  =  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  else  {  numberOfSuccesses  =  false;  }  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  else  {  numberOfSuccesses  =  false;  }	  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumericalVariance();    }    else    {    numberOfSuccesses    =    false;    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
36	[BUG]  [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  [BUGGY]      }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated        =        false;        if(numericalVarianceIsCalculated)    {    numericalVarianceIsCalculated    =    false;    }    numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
37	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVariance  =  calculateMean();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();      [BUGGY]  numericalVariance  =  calculateNumericalVariance();  numericalVariance  =  calculateMean();  [BUGGY]      numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance    =    calculateNumericalVariance();    numericalVariance  =  calculateMean();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
