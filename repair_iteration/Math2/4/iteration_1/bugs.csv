bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated  =  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  	7	1	replace
2	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]  numericalVarianceIsCalculated  =  false;  [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated  =  false;	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  	7	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	  	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  	7	1	replace
4	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    [BUGGY]  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	  	numericalVarianceIsCalculated  =  true;  	compilable	  [FE]  AssertionError  	7	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	    double  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	8	1	add
6	[BUG]  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    double  numberOfSuccesses  =  getNumberOfSuccesses();		compilable	  [FE]  AssertionError  	8	1	add
7	[BUG]  [BUGGY]    double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    double  numberOfSuccesses  =  calculateNumberOfSuccesses();  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    double  numberOfSuccesses  =  calculateNumberOfSuccesses();		non-compiled	[CE]  cannot  find  symbol	8	None	add
8	[BUG]  [BUGGY]    if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  numericalVariance  =  calculateNumericalVariance();  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
9	[BUG]  [BUGGY]    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
10	[BUG]  [BUGGY]    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
11	[BUG]  [BUGGY]    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses		non-compiled	[CE]  ';'  expected	8	None	add
12	[BUG]  [BUGGY]    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
13	[BUG]  [BUGGY]    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]  numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	    if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  numericalVariance  =  calculateNumberOfSuccesses();  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
