bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;	  	compilable	  [FE]  AssertionError  	1	1	add
2	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  numericalVarianceIsCalculated  =  false;  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    numericalVarianceIsCalculated  =  false;	  	compilable	  [FE]  AssertionError  	1	1	add
3	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
4	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  else  {  numberOfSuccesses  =  false;  }  [CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  else  {  numberOfSuccesses  =  false;  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  else  {  numberOfSuccesses  =  false;  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numberOfSuccesses	1	None	add
5	[BUG]  [BUGGY]      if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
6	[BUG]  [BUGGY]      if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  i++)  {  if(!numericalVarianceIsCalculated)  {  return  calculateNumericalVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
7	[BUG]  [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	double  numberOfSuccesses  =  calculateNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    calculateNumberOfSuccesses();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
8	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOf	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses    	non-compiled	[CE]  ';'  expected	11	None	replace
9	[BUG]  [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSucc  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSucc  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVarianceIsCalculated)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSucc	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    numericalVariance    =    calculateNumberOfSuccesses    	non-compiled	[CE]  ';'  expected	11	None	replace
10	[BUG]  [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumberOfSuccesses();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumberOfSuccesses();	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    numericalVariance    =    calculateNumberOfSuccesses();    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVariance  =  calculateNumericalVariance();	      if(numericalVarianceIsCalculated)    {    if(numericalVariance!=    null)    {    numericalVariance    =    calculateNumericalVariance();    }    	compilable	  [FE]  AssertionError  	8	1	replace
12	[BUG]  [BUGGY]  numericalVariance  =  calculateNumericalVariance();  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVariance  =  calculateNumericalVariance();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVariance  =  calculateNumericalVariance();	      if(numericalVarianceIsCalculated)    {    if(numericalVariance!=    null)    {    numericalVariance    =    calculateNumericalVariance();    }    	compilable	  [FE]  AssertionError  	8	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	6	1	replace
14	[BUG]  [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	double  numberOfSuccesses  =  getNumberOfSuccesses()  +  1;	      double    numberOfSuccesses    =    getNumberOfSuccesses();    	compilable	  [FE]  AssertionError  	6	1	replace
15	[BUG]  [BUGGY]  if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance!=  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    return    super.getNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  if(numericalVariance  ==  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  if(numericalVariance  ==  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	if(numericalVariance  ==  null)  {  for(int  i  =  0;  i  <  numberOfSuccesses;  ++i)  {  if(!numericalVarianceIsCalculated)  {  return  super.getNumericalVariance();  }	      if(numericalVarianceIsCalculated)    {    for(int    i    =    0;    i    <    numberOfSuccesses;    ++i)    {    if(!numericalVarianceIsCalculated)    {    return    super.getNumericalVariance();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	5	None	add
18	[BUG]  [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      double  numberOfSuccesses  =  getNumberOfSuccesses();  Double  numberOfSuccesses  =  getNumberOfSuccesses();  [BUGGY]    numericalVarianceIsCalculated  =  true;  }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        double    numberOfSuccesses    =    getNumberOfSuccesses();    Double  numberOfSuccesses  =  getNumberOfSuccesses();	  	non-compiled	[CE]  variable  numberOfSuccesses  is  already  defined  in  method  getNumericalVariance()	5	None	add
19	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  if(numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
20	[BUG]  [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        if(numericalVarianceIsCalculated)  {  if(numericalVariance!=  null)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
21	[BUG]  [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  numericalVariance  =  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  numericalVariance  =  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
22	[BUG]  [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  return  calculateNumberOfSuccesses();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
23	[BUG]  [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  numericalVariance  =  calculateSampleVariance();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]      if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  numericalVariance  =  calculateSampleVariance();  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	        if(numericalVarianceIsCalculated)  {  if(numericalVariance  ==  null)  {  numericalVariance  =  calculateSampleVariance();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	add	numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }	  	compilable	  [FE]  AssertionError  	1	1	add
25	[BUG]  [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  getNumericalVariance()  {  if  (!numericalVarianceIsCalculated)  {  numericalVariance  =  calculateNumericalVariance();    [BUGGY]  numericalVarianceIsCalculated  =  false;  if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]    }  return  numericalVariance;  }  [CLASS]  HypergeometricDistribution  [METHOD]  getNumericalVariance  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  p  p1  p2  p3  q  ret  long  serialVersionUID  int  dx  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  x0  x1  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.3779644730092272	281	281	1	replace	numericalVarianceIsCalculated    =    false;    if(numericalVarianceIsCalculated)  {  numericalVarianceIsCalculated  =  false;  }	  	compilable	  [FE]  AssertionError  	1	1	add
