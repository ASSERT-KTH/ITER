bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.rng  =  sampleSize;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.rng  =  sampleSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses;  this.rng  =  sampleSize;	      this.numberOfSuccesses    =    numberOfSuccesses;    this.rng    =    rng;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  this.rng  =  new  RandomGenerator(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.rng  =  new  RandomGenerator(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.rng  =  new  RandomGenerator(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE);	      this.rng    =    new    RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  this.sampleSize  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.sampleSize  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.sampleSize  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE);	      this.rng    =    new    RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  this.numberOfSuccesses  +=  sampleSize;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  +=  sampleSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  +=  sampleSize;	      this.numberOfSuccesses    +=    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(sampleSize);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(sampleSize);  [BUGGY]      [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(sampleSize);	  this.numberOfSuccesses    =    NumberOfSuccesses.parseNumber(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
6	[BUG]  [BUGGY]  this.numberOfSuccesses  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);	      this.rng    =    new    RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  sampleSize;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  -  sampleSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  -  sampleSize;	      this.numberOfSuccesses    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  this.numberOfSuccesses  =  populationSize  -  numberOfSuccesses;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  populationSize  -  numberOfSuccesses;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  populationSize  -  numberOfSuccesses;	      this.numberOfSuccesses    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  this.numberOfSuccesses  =  sampleSize;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  sampleSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  sampleSize;	      this.numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.null  =  new  RandomGenerator();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.null  =  new  RandomGenerator();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses;  this.null  =  new  RandomGenerator();	      this.numberOfSuccesses    =    numberOfSuccesses;    this.rng    =    new    RandomGenerator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  populationSize;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  /  populationSize;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  /  populationSize;	      this.numberOfSuccesses    =    numberOfSuccesses    -    populationSize;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(populationSize);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(populationSize);  [BUGGY]      [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(populationSize);	  this.numberOfSuccesses    =    NumberOfSuccesses.parseNumber(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses  +  1;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses  +  1;	      this.numberOfSuccesses    =    numberOfSuccesses;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.rng  =  pattern;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.rng  =  pattern;  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses;  this.rng  =  pattern;	      this.numberOfSuccesses    =    numberOfSuccesses;    this.rng    =    rng;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  new  RandomGenerator();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  new  RandomGenerator();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  new  RandomGenerator();	      this.numberOfSuccesses    =    numberOfSuccesses;    this.rng    =    new    RandomGenerator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(numberOfSuccesses,  numberSize);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(numberOfSuccesses,  numberSize);  [BUGGY]      [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  NumberOfSuccesses.parseNumber(numberOfSuccesses,  numberSize);	  this.numberOfSuccesses    =    NumberOfSuccesses.parseNumber(numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  this.randomGenerator  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.randomGenerator  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.randomGenerator  =  new  RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,  numberOfSuccesses);	      this.rng    =    new    RandomGenerator(LocalizedFormats.SAMPLE_LARGER_THAN_POPULATION_SIZE,    numberOfSuccesses);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.randomGenerator  =  new  RandomGenerator();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    numberOfSuccesses,  populationSize,  true);  }  if  (sampleSize  >  populationSize)  {  throw  new  NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,  sampleSize,  populationSize,  true);  }  this.numberOfSuccesses  =  numberOfSuccesses;  this.populationSize  =  populationSize;  this.sampleSize  =  sampleSize;    [BUGGY]  this.numberOfSuccesses  =  numberOfSuccesses;  this.randomGenerator  =  new  RandomGenerator();  [BUGGY]    }  [CLASS]  HypergeometricDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,int,int,int)  RandomGenerator  rng  int  populationSize  int  numberOfSuccesses  int  sampleSize  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  numericalVariance  long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  RandomGenerator  rng  	projects/Math2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	0.25	111	111	1	replace	this.numberOfSuccesses  =  numberOfSuccesses;  this.randomGenerator  =  new  RandomGenerator();	      this.numberOfSuccesses    =    numberOfSuccesses;    this.rng    =    new    RandomGenerator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
